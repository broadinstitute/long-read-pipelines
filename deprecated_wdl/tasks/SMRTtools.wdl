version 1.0

import "Structs.wdl"

task RunQCreports {
    meta {
        desciption: "Uses SMRTtools runqc-reports to generate a slew of metric json and png files."
    }
    input {
        String smrtcell_data_dir
        String movie_name

        RuntimeAttr? runtime_attr_override
    }
    parameter_meta {
        smrtcell_data_dir: "GS path to the 'folder' holding all files of an on-instrument corrected SMRTCell."
    }

    command <<<
        set -eux

        time gsutil -mq cp -r ~{smrtcell_data_dir} .
        input_xml=$(find . -name "~{movie_name}.consensusreadset.xml")

        mkdir -p "~{movie_name}"
        runqc-reports \
            --log-file "~{movie_name}".runqc-reports.log \
            --log-level "INFO" \
            -o "~{movie_name}" \
            "${input_xml}"

        tree "~{movie_name}"

        cp "~{movie_name}".runqc-reports.log "~{movie_name}" && \
        tar -czf "~{movie_name}.runqc-reports.tar.gz" "~{movie_name}"
    >>>

    output {
        File runqc_reports_tar_gz = "~{movie_name}.runqc-reports.tar.gz"
    }

    #########################
    RuntimeAttr default_attr = object {
        cpu_cores:          4,
        mem_gb:             16,
        disk_gb:            200,
        boot_disk_gb:       10,
        preemptible_tries:  0,
        max_retries:        0,
        docker:             "us.gcr.io/broad-dsp-lrma/lr-smrttools:11.0.0.146107"
    }
    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])
    runtime {
        cpu:                    select_first([runtime_attr.cpu_cores,         default_attr.cpu_cores])
        memory:                 select_first([runtime_attr.mem_gb,            default_attr.mem_gb]) + " GiB"
        disks: "local-disk " +  select_first([runtime_attr.disk_gb,           default_attr.disk_gb]) + " HDD"
        bootDiskSizeGb:         select_first([runtime_attr.boot_disk_gb,      default_attr.boot_disk_gb])
        preemptible:            select_first([runtime_attr.preemptible_tries, default_attr.preemptible_tries])
        maxRetries:             select_first([runtime_attr.max_retries,       default_attr.max_retries])
        docker:                 select_first([runtime_attr.docker,            default_attr.docker])
    }
}

task BarcodeReport {
    meta {
        desciption: "Users SMRTtools barcode_report to generage metrics json and png files for demultiplexing."
    }
    input {
        String movie_name

        Array[File] all_lima_files
        File barcodes_fasta

        RuntimeAttr? runtime_attr_override
    }

    parameter_meta {
        all_lima_files: "All lima generated files. Layout (i.e. relative paths after localization) must be exactly the same when they were generated by lima."
        barcodes_fasta: "Needed by barcode_report."
    }

    command <<<
        set -eux

        mkdir -p "~{movie_name}/lima_out/"

        mv ~{sep=' ' all_lima_files} "~{movie_name}/lima_out/"

        lima_xml=$(find "~{movie_name}/lima_out/" -type f -name "~{movie_name}.consensusreadset.xml")

        barcode_report \
            --log-file "~{movie_name}/barcode_report.log" \
            --log-level "INFO" \
            --per-barcode-reports "~{movie_name}/per_barcode_reports.datastore.json" \
            --report-csv "~{movie_name}/barcode_details.csv" \
            "${lima_xml}" \
            "~{movie_name}/barcode.report.json"

        tree "~{movie_name}"

        rm -rf "~{movie_name}/lima_out/" && \
        tar -czf "~{movie_name}.barcode_report.tar.gz" "~{movie_name}"
    >>>

    output {
        File barcode_report_tar_gz = "~{movie_name}.barcode_report.tar.gz"
    }

    #########################
    RuntimeAttr default_attr = object {
        cpu_cores:          2,
        mem_gb:             8,
        disk_gb:            500,
        boot_disk_gb:       10,
        preemptible_tries:  0,
        max_retries:        0,
        docker:             "us.gcr.io/broad-dsp-lrma/lr-smrttools:11.0.0.146107"
    }
    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])
    runtime {
        cpu:                    select_first([runtime_attr.cpu_cores,         default_attr.cpu_cores])
        memory:                 select_first([runtime_attr.mem_gb,            default_attr.mem_gb]) + " GiB"
        disks: "local-disk " +  select_first([runtime_attr.disk_gb,           default_attr.disk_gb]) + " HDD"
        bootDiskSizeGb:         select_first([runtime_attr.boot_disk_gb,      default_attr.boot_disk_gb])
        preemptible:            select_first([runtime_attr.preemptible_tries, default_attr.preemptible_tries])
        maxRetries:             select_first([runtime_attr.max_retries,       default_attr.max_retries])
        docker:                 select_first([runtime_attr.docker,            default_attr.docker])
    }
}
