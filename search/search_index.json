{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Long read pipelines This repository contains pipelines for processing of long read data from PacBio and/or Oxford Nanopore platforms. The pipelines are written in WDL 1.0 intended for use with Google Cloud Platform via the scientific workflow engine, Cromwell . Processing is designed to be reasonably consistent between both long read platforms, and use platform-specific options or tasks where necessary. High level workflows can be found in the wdl/ directory. Documentation : Documentation for each workflow can be found at the repository site . External Contributors : Please see the Contributing Guidelines for information on how to contribute to the repository.","title":"Home"},{"location":"#long-read-pipelines","text":"This repository contains pipelines for processing of long read data from PacBio and/or Oxford Nanopore platforms. The pipelines are written in WDL 1.0 intended for use with Google Cloud Platform via the scientific workflow engine, Cromwell . Processing is designed to be reasonably consistent between both long read platforms, and use platform-specific options or tasks where necessary. High level workflows can be found in the wdl/ directory. Documentation : Documentation for each workflow can be found at the repository site . External Contributors : Please see the Contributing Guidelines for information on how to contribute to the repository.","title":"Long read pipelines"},{"location":"development_guide/","text":"Development Guide Overview This development guide provides information on the structure of the repository, testing infrastructure, style guides, and contributing guidelines. The hope is that this guide will help developers create and maintain code that is consistent with the rest of the repository. Repository Structure The repository includes files such as the LICENSE and README.md files, which provide legal and informational overviews of the repository. Other directories such as docker, docs, resources, scripts, site, test, and wdl contain various files and directories that are important for building and testing the software in the repository. See Repository Structure documentation for further details and Contributing Guidelines for information on how to contribute to the repository. Workflow Scripts All workflow scripts are located in the /wdl directory and are written in WDL 1.0 and intended for use with Google Cloud Platform via the scientific workflow engine, Cromwell. The WDL scripts are divided into three subdirectories: tasks , structs , and pipelines ; then further divided by sequencing platform and analysis type. See Repository Structure for more information on directory structure. Docker Containers The WDL workflows in this repository are designed to be run using Docker containers. This provides a number of advantages, including the ability to run the workflows on a variety of platforms and the ability to isolate the workflows from each other. Many of these workflows use specialized containers that are built from the Dockerfiles in the docker directory. The docker directory contains Dockerfiles and other scripts for building containers for several tools. The docker containers are pushed to Google Container Registry (GCR) called us.gcr.io/broad-dsp-lrma , for internal use. External audiences interested in running workflows using these containers should build and if needed push them to repository they have access to. Testing Scripts for running tests are located in the test directory. The test directory contains scripts for running tests using Tox. Tox is a Python-based test automation tool that can be used to run tests in a variety of environments. The scripts are run through GitHub Actions, which are configured in the .github/workflows directory. The GitHub Actions are triggered by pushes to the repository and pull requests. Workflow Deployment The workflows in this repository are deployed to Terra using Dockstore. Dockstore is a platform for sharing Docker containers and workflows. The workflows are registered using the dockstore.yml file in the root directory of the repository. The dockstore.yml file contains information about the workflows, including the location of the WDL files and if available the location of example input JSON files. The workflows published in Dockstore are automatically updated when changes are made to the repository. If you would like to add a new workflow to this repository and have it published in Dockstore, please update the dockstore.yml file in your feature branch. This should be enough for Dockstore github app to automatically add your workflow branch version to the Dockstore repository. Contributing Guidelines Please adhere to the following best practices if contributing to this repository: Read Style Guide : Before making any changes to the code, it's important to read the style guide. The style guide contains information on how to write code that is consistent with the rest of the codebase. See WDL Style Guide and Docker Style Guide for more information. Create a new branch : When making contributions to a repository, it's important to create a new branch for each change you make. The name of the branch should begin with your initials followed by an underscore and a short description of the change. For example, if Janet Sully is making a change to the README file, the name might be js_update_readme . Keep commits small and focused : When making changes to the code, it's important to keep your commits small and focused on a specific task. This makes it easier for others to review your changes and also makes it easier to roll back changes if necessary. Write clear commit messages : When committing changes to the repository, it's important to write clear and concise commit messages that describe what changes were made. This helps others understand the changes you made and why you made them. Test your changes : Before submitting your changes, make sure to test them thoroughly to ensure they work as intended. This helps reduce the chance of introducing bugs or issues into the codebase. Submit a pull request : Once you have made your changes and tested them, submit a pull request to the main repository. Make sure to include a clear description of the changes you made and why you made them. This makes it easier for others to review and merge your changes into the main repository. Add reviewers : Once you have submitted your pull request, add reviewers to the pull request. This will notify them that you have submitted a pull request and they should review it. It's important to add at least one reviewer to your pull request. Merging pull requests : Once your pull request has been reviewed and approved, it can be merged into the main repository. It's important to merge pull requests using the \"Squash and merge\" option. This will squash all commits in the pull request into a single commit, which makes it easier to track changes in the repository. External Contributions External contributions are welcome. Please follow the guidelines and submit a pull request. Review Criteria To maintain quality and consistency, contributions are reviewed based on: Adherence to coding standards : The code should follow the project's coding standards, such as naming conventions, indentation, and code style. Passing tests : All existing tests should pass after the changes are applied. New tests should be added to cover the new functionality. Documentation updates : If the contribution introduces new features or changes existing workflows, the documentation should be updated accordingly. Overall quality : The contribution should be of overall high quality, with well-structured code, clear comments, and a minimal impact on other parts of the codebase. Review Process The review process is designed to ensure that contributions are of high quality and consistent with the rest of the codebase. The review process consists of the following steps: 1. Code Review : Reviewers provide feedback for improvements or issue identification. 2. Testing : Ensure code functions as intended without introducing bugs. 3. Merging : Approved code becomes part of the main repository. 4. Release : Automatic generation of releases upon merging to the main branch.","title":"Development Guide Overview"},{"location":"development_guide/#development-guide-overview","text":"This development guide provides information on the structure of the repository, testing infrastructure, style guides, and contributing guidelines. The hope is that this guide will help developers create and maintain code that is consistent with the rest of the repository.","title":"Development Guide Overview"},{"location":"development_guide/#repository-structure","text":"The repository includes files such as the LICENSE and README.md files, which provide legal and informational overviews of the repository. Other directories such as docker, docs, resources, scripts, site, test, and wdl contain various files and directories that are important for building and testing the software in the repository. See Repository Structure documentation for further details and Contributing Guidelines for information on how to contribute to the repository.","title":"Repository Structure"},{"location":"development_guide/#workflow-scripts","text":"All workflow scripts are located in the /wdl directory and are written in WDL 1.0 and intended for use with Google Cloud Platform via the scientific workflow engine, Cromwell. The WDL scripts are divided into three subdirectories: tasks , structs , and pipelines ; then further divided by sequencing platform and analysis type. See Repository Structure for more information on directory structure.","title":"Workflow Scripts"},{"location":"development_guide/#docker-containers","text":"The WDL workflows in this repository are designed to be run using Docker containers. This provides a number of advantages, including the ability to run the workflows on a variety of platforms and the ability to isolate the workflows from each other. Many of these workflows use specialized containers that are built from the Dockerfiles in the docker directory. The docker directory contains Dockerfiles and other scripts for building containers for several tools. The docker containers are pushed to Google Container Registry (GCR) called us.gcr.io/broad-dsp-lrma , for internal use. External audiences interested in running workflows using these containers should build and if needed push them to repository they have access to.","title":"Docker Containers"},{"location":"development_guide/#testing","text":"Scripts for running tests are located in the test directory. The test directory contains scripts for running tests using Tox. Tox is a Python-based test automation tool that can be used to run tests in a variety of environments. The scripts are run through GitHub Actions, which are configured in the .github/workflows directory. The GitHub Actions are triggered by pushes to the repository and pull requests.","title":"Testing"},{"location":"development_guide/#workflow-deployment","text":"The workflows in this repository are deployed to Terra using Dockstore. Dockstore is a platform for sharing Docker containers and workflows. The workflows are registered using the dockstore.yml file in the root directory of the repository. The dockstore.yml file contains information about the workflows, including the location of the WDL files and if available the location of example input JSON files. The workflows published in Dockstore are automatically updated when changes are made to the repository. If you would like to add a new workflow to this repository and have it published in Dockstore, please update the dockstore.yml file in your feature branch. This should be enough for Dockstore github app to automatically add your workflow branch version to the Dockstore repository.","title":"Workflow Deployment"},{"location":"development_guide/#contributing-guidelines","text":"Please adhere to the following best practices if contributing to this repository: Read Style Guide : Before making any changes to the code, it's important to read the style guide. The style guide contains information on how to write code that is consistent with the rest of the codebase. See WDL Style Guide and Docker Style Guide for more information. Create a new branch : When making contributions to a repository, it's important to create a new branch for each change you make. The name of the branch should begin with your initials followed by an underscore and a short description of the change. For example, if Janet Sully is making a change to the README file, the name might be js_update_readme . Keep commits small and focused : When making changes to the code, it's important to keep your commits small and focused on a specific task. This makes it easier for others to review your changes and also makes it easier to roll back changes if necessary. Write clear commit messages : When committing changes to the repository, it's important to write clear and concise commit messages that describe what changes were made. This helps others understand the changes you made and why you made them. Test your changes : Before submitting your changes, make sure to test them thoroughly to ensure they work as intended. This helps reduce the chance of introducing bugs or issues into the codebase. Submit a pull request : Once you have made your changes and tested them, submit a pull request to the main repository. Make sure to include a clear description of the changes you made and why you made them. This makes it easier for others to review and merge your changes into the main repository. Add reviewers : Once you have submitted your pull request, add reviewers to the pull request. This will notify them that you have submitted a pull request and they should review it. It's important to add at least one reviewer to your pull request. Merging pull requests : Once your pull request has been reviewed and approved, it can be merged into the main repository. It's important to merge pull requests using the \"Squash and merge\" option. This will squash all commits in the pull request into a single commit, which makes it easier to track changes in the repository.","title":"Contributing Guidelines"},{"location":"development_guide/#external-contributions","text":"External contributions are welcome. Please follow the guidelines and submit a pull request.","title":"External Contributions"},{"location":"development_guide/#review-criteria","text":"To maintain quality and consistency, contributions are reviewed based on: Adherence to coding standards : The code should follow the project's coding standards, such as naming conventions, indentation, and code style. Passing tests : All existing tests should pass after the changes are applied. New tests should be added to cover the new functionality. Documentation updates : If the contribution introduces new features or changes existing workflows, the documentation should be updated accordingly. Overall quality : The contribution should be of overall high quality, with well-structured code, clear comments, and a minimal impact on other parts of the codebase.","title":"Review Criteria"},{"location":"development_guide/#review-process","text":"The review process is designed to ensure that contributions are of high quality and consistent with the rest of the codebase. The review process consists of the following steps: 1. Code Review : Reviewers provide feedback for improvements or issue identification. 2. Testing : Ensure code functions as intended without introducing bugs. 3. Merging : Approved code becomes part of the main repository. 4. Release : Automatic generation of releases upon merging to the main branch.","title":"Review Process"},{"location":"development_guide/docker_style_guide/","text":"Docker Style Guide This document will provide a guide for writing Dockerfiles for the pipelines. The guide will provide a list of best practices for writing Dockerfiles, and will also provide a list of common mistakes to avoid. The guide is for those wanting to contribute Dockerfiles to the pipelines repository. Dockerfiles Organization All docker related resources should be placed in the docker directory of the repository. The docker directory contains a subdirectory for each Dockerfile and its related resources. The subdirectory name should start with an abbreviation of data type the docker tool will process followed by the name of the tool. For example, the docker image for the bwa aligner that will process long reads would be placed in the docker/lr-bwa directory. Docker Subdirectory Folder Each Docker subdirectory should contain the following files and folders: Dockerfile : The Dockerfile for the Docker image. Makefile : A Makefile for building the Docker image. Optionaly the subdirectory may contain the following files and folders: README.md : A README file for the Docker image. enironment.yml : A conda environment file for installing dependencies. Any resource files (e.g. python script) needed to build the Docker image. Example Directory Tree: docker |__lr-bwa | |__Dockerfile | |__Makefile | |__README.md |__lr-pb |__lr-ont Dockerfile Guidelines This section outlines the guidelines for creating Dockerfiles, including the format, structure, and best practices for creating efficient and maintainable Docker images. Docker Docs provides a valuable resource for learning about Dockerfiles. The following links provide a good starting point for creating Dockerfiles using general best practices: Docker Best Practices In addition to the Docker best practices, use the following guidelines when creating Dockerfiles for the pipelines repository. When appropriate be sure to add a comment proceeding Docker instructions to explain its purpose. # copy other resources COPY ./environment.yml / # install conda packages RUN conda env create -f /environment.yml && conda clean -a ENV PATH=/opt/conda/envs/lr-pb/bin/:/root/google-cloud-sdk/bin/:${PATH} # install gsutil RUN apt install -y curl git-lfs time datamash RUN curl https://sdk.cloud.google.com | bash Specify a MAINTAINER for the Docker image. FROM continuumio/miniconda3 MAINTAINER Barbra Mills Specify version numbers for all packages installed in the Docker image. RUN conda install python=3.6.9 RUN conda create -n venv python=3.6.9 Image Naming and Tagging Guidelines This section outlines the guidelines for naming and tagging Docker images, including the format, structure, and best practices for creating consistent and descriptive image names and tags. Use descriptive names: Choose a name that clearly identifies the image and its purpose. Avoid using generic names like \"docker-image\" or \"latest\". Name should match directory name: When possible the name of the Docker image should match the name of the docker subdirectory it is located in. Use lowercase letters: Docker image names should be in lowercase letters. Use semantic versioning: Follow the semantic versioning pattern (major.minor.patch) to ensure consistency and compatibility between different versions of the image. Avoid special characters: Avoid using special characters in the image name or tag, as it may cause issues with some systems or platforms. Testing and CI/CD Guidelines This section should provide guidelines for testing Docker images and containers, including best practices for creating automated tests and integrating with CI/CD pipelines to ensure consistent builds and deployments. TBD: This section is still under development.","title":"Docker Style Guide"},{"location":"development_guide/docker_style_guide/#docker-style-guide","text":"This document will provide a guide for writing Dockerfiles for the pipelines. The guide will provide a list of best practices for writing Dockerfiles, and will also provide a list of common mistakes to avoid. The guide is for those wanting to contribute Dockerfiles to the pipelines repository.","title":"Docker Style Guide"},{"location":"development_guide/docker_style_guide/#dockerfiles-organization","text":"All docker related resources should be placed in the docker directory of the repository. The docker directory contains a subdirectory for each Dockerfile and its related resources. The subdirectory name should start with an abbreviation of data type the docker tool will process followed by the name of the tool. For example, the docker image for the bwa aligner that will process long reads would be placed in the docker/lr-bwa directory.","title":"Dockerfiles Organization"},{"location":"development_guide/docker_style_guide/#docker-subdirectory-folder","text":"Each Docker subdirectory should contain the following files and folders: Dockerfile : The Dockerfile for the Docker image. Makefile : A Makefile for building the Docker image. Optionaly the subdirectory may contain the following files and folders: README.md : A README file for the Docker image. enironment.yml : A conda environment file for installing dependencies. Any resource files (e.g. python script) needed to build the Docker image. Example Directory Tree: docker |__lr-bwa | |__Dockerfile | |__Makefile | |__README.md |__lr-pb |__lr-ont","title":"Docker Subdirectory Folder"},{"location":"development_guide/docker_style_guide/#dockerfile-guidelines","text":"This section outlines the guidelines for creating Dockerfiles, including the format, structure, and best practices for creating efficient and maintainable Docker images. Docker Docs provides a valuable resource for learning about Dockerfiles. The following links provide a good starting point for creating Dockerfiles using general best practices: Docker Best Practices In addition to the Docker best practices, use the following guidelines when creating Dockerfiles for the pipelines repository. When appropriate be sure to add a comment proceeding Docker instructions to explain its purpose. # copy other resources COPY ./environment.yml / # install conda packages RUN conda env create -f /environment.yml && conda clean -a ENV PATH=/opt/conda/envs/lr-pb/bin/:/root/google-cloud-sdk/bin/:${PATH} # install gsutil RUN apt install -y curl git-lfs time datamash RUN curl https://sdk.cloud.google.com | bash Specify a MAINTAINER for the Docker image. FROM continuumio/miniconda3 MAINTAINER Barbra Mills Specify version numbers for all packages installed in the Docker image. RUN conda install python=3.6.9 RUN conda create -n venv python=3.6.9","title":"Dockerfile Guidelines"},{"location":"development_guide/docker_style_guide/#image-naming-and-tagging-guidelines","text":"This section outlines the guidelines for naming and tagging Docker images, including the format, structure, and best practices for creating consistent and descriptive image names and tags. Use descriptive names: Choose a name that clearly identifies the image and its purpose. Avoid using generic names like \"docker-image\" or \"latest\". Name should match directory name: When possible the name of the Docker image should match the name of the docker subdirectory it is located in. Use lowercase letters: Docker image names should be in lowercase letters. Use semantic versioning: Follow the semantic versioning pattern (major.minor.patch) to ensure consistency and compatibility between different versions of the image. Avoid special characters: Avoid using special characters in the image name or tag, as it may cause issues with some systems or platforms.","title":"Image Naming and Tagging Guidelines"},{"location":"development_guide/docker_style_guide/#testing-and-cicd-guidelines","text":"This section should provide guidelines for testing Docker images and containers, including best practices for creating automated tests and integrating with CI/CD pipelines to ensure consistent builds and deployments. TBD: This section is still under development.","title":"Testing and CI/CD Guidelines"},{"location":"development_guide/repo_structure/","text":"Repository Structure \u251c\u2500\u2500 cloudbuild.yaml \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 tox.ini \u251c\u2500\u2500 VERSION \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 scripts \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 terra \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 test \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 wdl \u2514\u2500\u2500 ... The repository file and directory is as follows: LICENSE: The license for the repository. README.md: This document, which provides an overview of the repository. VERSION: The version number of the repository. cloudbuild.yaml: A Cloud Build configuration file that defines how the repository is built. docker: Contains Dockerfiles for building docker images used by pipelines. docs: Contains documentation for the pipelines and a developer's guide. requirements.txt: A file listing the Python dependencies for the pipelines. resources: A directory containing resources used by the pipelines. mkdocs.yml: A configuration file for the mkdocs documentation generator. scripts: Contains scripts used by the repository (e.g. webpage creation). test: Contains tests for the pipelines. tox.ini: A configuration file for the tox test runner. wdl: Contains WDL files. WDL Directory Structure \u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 structs \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 tasks \u2514\u2500\u2500 ... The WDL directory is further divided into subdirectories. The subdirectories are as follows: tasks: Contains WDL files with a list of tasks to be imported and used by pipeline WDLs. pipelines: Contains WDL files with workflow blocks. structs: Contains WDL structs for the pipelines. Tasks Directory Structure The task directory has an additional subdirectory to organize wdl tasks by analysis type. The subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 alignment \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 annotation \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 assembly \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 epigenomics \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 preprocessing \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 qc \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 transcriptomics \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 utility \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 variantcalling \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 visualization \u2502 \u2502 \u2514\u2500\u2500 ... Pipelines Directory Structure The pipelines directory has two additional subdirectories to organize wdl workflows, first by platform then by analysis type. The first level subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 Illumina \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 PacBio \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 ONT \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 TechAgnostic \u2502 \u2502 \u2514\u2500\u2500 ... The second level subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 Illumina \u2502 \u2502 \u2514\u2500\u2500 alignment \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 assembly \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 epigenomics \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 multianalysis \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 preprocessing \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 utility \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 variantcalling \u2502 \u2502 \u2502 \u2514\u2500\u2500 ...","title":"Repository Structure"},{"location":"development_guide/repo_structure/#repository-structure","text":"\u251c\u2500\u2500 cloudbuild.yaml \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 tox.ini \u251c\u2500\u2500 VERSION \u251c\u2500\u2500 docker \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 resources \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 scripts \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 terra \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 test \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 wdl \u2514\u2500\u2500 ... The repository file and directory is as follows: LICENSE: The license for the repository. README.md: This document, which provides an overview of the repository. VERSION: The version number of the repository. cloudbuild.yaml: A Cloud Build configuration file that defines how the repository is built. docker: Contains Dockerfiles for building docker images used by pipelines. docs: Contains documentation for the pipelines and a developer's guide. requirements.txt: A file listing the Python dependencies for the pipelines. resources: A directory containing resources used by the pipelines. mkdocs.yml: A configuration file for the mkdocs documentation generator. scripts: Contains scripts used by the repository (e.g. webpage creation). test: Contains tests for the pipelines. tox.ini: A configuration file for the tox test runner. wdl: Contains WDL files.","title":"Repository Structure"},{"location":"development_guide/repo_structure/#wdl-directory-structure","text":"\u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 structs \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 tasks \u2514\u2500\u2500 ... The WDL directory is further divided into subdirectories. The subdirectories are as follows: tasks: Contains WDL files with a list of tasks to be imported and used by pipeline WDLs. pipelines: Contains WDL files with workflow blocks. structs: Contains WDL structs for the pipelines.","title":"WDL Directory Structure"},{"location":"development_guide/repo_structure/#tasks-directory-structure","text":"The task directory has an additional subdirectory to organize wdl tasks by analysis type. The subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 tasks \u2502 \u2514\u2500\u2500 alignment \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 annotation \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 assembly \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 epigenomics \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 preprocessing \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 qc \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 transcriptomics \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 utility \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 variantcalling \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 visualization \u2502 \u2502 \u2514\u2500\u2500 ...","title":"Tasks Directory Structure"},{"location":"development_guide/repo_structure/#pipelines-directory-structure","text":"The pipelines directory has two additional subdirectories to organize wdl workflows, first by platform then by analysis type. The first level subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 Illumina \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 PacBio \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 ONT \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 TechAgnostic \u2502 \u2502 \u2514\u2500\u2500 ... The second level subdirectories are as follows: \u2514\u2500\u2500 wdl \u2514\u2500\u2500 pipelines \u2502 \u2514\u2500\u2500 Illumina \u2502 \u2502 \u2514\u2500\u2500 alignment \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 annotation \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 assembly \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 epigenomics \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 multianalysis \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 preprocessing \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 utility \u2502 \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2514\u2500\u2500 variantcalling \u2502 \u2502 \u2502 \u2514\u2500\u2500 ...","title":"Pipelines Directory Structure"},{"location":"development_guide/wdl_style_guide/","text":"WDL Style Guide This document describes the style guide for writing WDL workflows and tasks for the pipelines. The guide will provide a list of best practices for writing WDL workflows, and will also provide a list of common mistakes to avoid. The guide is for those wanting to contribute Dockerfiles to the pipelines repository. WDL Structure This section describes the overall structure of a WDL workflow, including the input and output declarations, the task section, and the workflow section. A common WDL file contains both a workflow block and one or more task blocks. In the pipeline repository, it is recommended to place task blocks in a separate wdl file from the wdl file containing the workflow block. This is to help keep the workflow WDLs more modular, readable, and maintainable. The WDL file containing the workflow block should include meta and parameter_meta sections. The meta section should include a description of the workflow, and the parameter_meta section should include a description of the workflow inputs. For wdl files composed of task blocks it is recommended to include meta and meta_parameters sections within the task blocks. Task Definitions This section provides guidance on how to define tasks in WDL, including best practices for naming tasks, specifying inputs and outputs, and defining command scripts. The order of the sections in a task block should be as follows: 1. meta 2. parameter_meta 3. input 4. command 5. output 6. runtime The following is an example of a task block in WDL: task TaskName { meta { description: \"A description of the task\" } parameter_meta { input1: \"A description of the input1\" input2: \"A description of the input2\" } input { # task inputs } command { # task command } output { # task outputs } runtime { # task runtime } } Task Runtime The WDLs in the pipeline repository often use a runtime object from the struct.wdl in the task block. Using the struct isn't required but is recommended. The following is an example of a runtime struct used in a task block: import \"structs.wdl\" as structs task TaskName { input { ... RuntimeAttr? runtime_attr_override } ... output {...} RuntimeAttr default_attr = object { cpu_cores: cpus, mem_gb: mem, disk_gb: disk_size, boot_disk_gb: 10, preemptible_tries: 3, max_retries: 2, docker: \"us.gcr.io/broad-dsp-lrma/lr-align:0.1.28\" } RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr]) runtime { cpu: select_first([runtime_attr.cpu_cores, default_attr.cpu_cores]) memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\" disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\" bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb]) preemptible: select_first([runtime_attr.preemptible_tries, default_attr.preemptible_tries]) maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries]) docker: select_first([runtime_attr.docker, default_attr.docker]) } } Workflow Definitions This section covers best practices for defining workflows in WDL, including how to specify dependencies between tasks, how to handle errors and exceptions, and how to define scatter and gather blocks. The order of the sections in a task block should be as follows: 1. meta 2. parameter_meta 3. input 4. call 5. output The following is an example of a workflow block in WDL: workflow WorkflowName { meta { description: \"A description of the workflow\" } parameter_meta { input1: \"A description of the input1\" input2: \"A description of the input2\" } input { # workflow inputs } call task_name { # task inputs } output { # workflow outputs } }","title":"WDL Style Guide"},{"location":"development_guide/wdl_style_guide/#wdl-style-guide","text":"This document describes the style guide for writing WDL workflows and tasks for the pipelines. The guide will provide a list of best practices for writing WDL workflows, and will also provide a list of common mistakes to avoid. The guide is for those wanting to contribute Dockerfiles to the pipelines repository.","title":"WDL Style Guide"},{"location":"development_guide/wdl_style_guide/#wdl-structure","text":"This section describes the overall structure of a WDL workflow, including the input and output declarations, the task section, and the workflow section. A common WDL file contains both a workflow block and one or more task blocks. In the pipeline repository, it is recommended to place task blocks in a separate wdl file from the wdl file containing the workflow block. This is to help keep the workflow WDLs more modular, readable, and maintainable. The WDL file containing the workflow block should include meta and parameter_meta sections. The meta section should include a description of the workflow, and the parameter_meta section should include a description of the workflow inputs. For wdl files composed of task blocks it is recommended to include meta and meta_parameters sections within the task blocks.","title":"WDL Structure"},{"location":"development_guide/wdl_style_guide/#task-definitions","text":"This section provides guidance on how to define tasks in WDL, including best practices for naming tasks, specifying inputs and outputs, and defining command scripts. The order of the sections in a task block should be as follows: 1. meta 2. parameter_meta 3. input 4. command 5. output 6. runtime The following is an example of a task block in WDL: task TaskName { meta { description: \"A description of the task\" } parameter_meta { input1: \"A description of the input1\" input2: \"A description of the input2\" } input { # task inputs } command { # task command } output { # task outputs } runtime { # task runtime } }","title":"Task Definitions"},{"location":"development_guide/wdl_style_guide/#task-runtime","text":"The WDLs in the pipeline repository often use a runtime object from the struct.wdl in the task block. Using the struct isn't required but is recommended. The following is an example of a runtime struct used in a task block: import \"structs.wdl\" as structs task TaskName { input { ... RuntimeAttr? runtime_attr_override } ... output {...} RuntimeAttr default_attr = object { cpu_cores: cpus, mem_gb: mem, disk_gb: disk_size, boot_disk_gb: 10, preemptible_tries: 3, max_retries: 2, docker: \"us.gcr.io/broad-dsp-lrma/lr-align:0.1.28\" } RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr]) runtime { cpu: select_first([runtime_attr.cpu_cores, default_attr.cpu_cores]) memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\" disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\" bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb]) preemptible: select_first([runtime_attr.preemptible_tries, default_attr.preemptible_tries]) maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries]) docker: select_first([runtime_attr.docker, default_attr.docker]) } }","title":"Task Runtime"},{"location":"development_guide/wdl_style_guide/#workflow-definitions","text":"This section covers best practices for defining workflows in WDL, including how to specify dependencies between tasks, how to handle errors and exceptions, and how to define scatter and gather blocks. The order of the sections in a task block should be as follows: 1. meta 2. parameter_meta 3. input 4. call 5. output The following is an example of a workflow block in WDL: workflow WorkflowName { meta { description: \"A description of the workflow\" } parameter_meta { input1: \"A description of the input1\" input2: \"A description of the input2\" } input { # workflow inputs } call task_name { # task inputs } output { # workflow outputs } }","title":"Workflow Definitions"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/","text":"P. falciparum Short Read Whole Genome Workspace This is the workspace for short read whole genome variant discovery and analysis in Plasmodium falciparum . This workspace can call variants in a single-sample, joint call cohorts of samples, and perform various tertiary analyses (e.g. drug resistance screening, rapid diagnostic test evasion screening, etc.). While the current focus of this workspace is P. falciparum , but the processing steps here are generalized and can be adapted to other Plasmodium species. Variant Calling Pipeline As part of this workspace there are workflows to call variants on both single samples, and for joint calling across cohorts of samples. The main variant calling pipeline has has the following high-level structure: Data Datasets The following datasets are currently in this workspace: - PF7 - The MalariaGEN crosses - 2022 data collected in Senegal - 2019 data collected in Senegal Data Structure The data processing is broken down into three levels (similar to other LRMA projects) in the following Terra data tables: * Sample (flowcell data) * Sample Set (sample data / single-sample calling) * Sample Set Set (cohort data for joint calling) Sample / Flowcell data consists of reads from a single flowcell. The sample from which these reads have been processed may or may not be represented in other flowcells. Sample Set data consists of all data from a specific sample. This may include data from multiple flowcells that belong to the same \"participant\" (i.e. same strain / clone). Sample Set Set / Cohort data consists of data from multiple samples.","title":"_P. falciparum_ Short Read Whole Genome Workspace"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/#p-falciparum-short-read-whole-genome-workspace","text":"This is the workspace for short read whole genome variant discovery and analysis in Plasmodium falciparum . This workspace can call variants in a single-sample, joint call cohorts of samples, and perform various tertiary analyses (e.g. drug resistance screening, rapid diagnostic test evasion screening, etc.). While the current focus of this workspace is P. falciparum , but the processing steps here are generalized and can be adapted to other Plasmodium species.","title":"P. falciparum Short Read Whole Genome Workspace"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/#variant-calling-pipeline","text":"As part of this workspace there are workflows to call variants on both single samples, and for joint calling across cohorts of samples. The main variant calling pipeline has has the following high-level structure:","title":"Variant Calling Pipeline"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/#data","text":"","title":"Data"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/#datasets","text":"The following datasets are currently in this workspace: - PF7 - The MalariaGEN crosses - 2022 data collected in Senegal - 2019 data collected in Senegal","title":"Datasets"},{"location":"pipeline_documentation/sp_malaria/workspace_markdown_doc/#data-structure","text":"The data processing is broken down into three levels (similar to other LRMA projects) in the following Terra data tables: * Sample (flowcell data) * Sample Set (sample data / single-sample calling) * Sample Set Set (cohort data for joint calling) Sample / Flowcell data consists of reads from a single flowcell. The sample from which these reads have been processed may or may not be represented in other flowcells. Sample Set data consists of all data from a specific sample. This may include data from multiple flowcells that belong to the same \"participant\" (i.e. same strain / clone). Sample Set Set / Cohort data consists of data from multiple samples.","title":"Data Structure"},{"location":"tasks/AlignReads/","text":"AlignReads Minimap2 descrpiton A wrapper to minimap2 for mapping & aligning (groups of) sequences to a reference Inputs Required RG (String, required ): read group information to be supplied to parameter '-R' (note that tabs should be input as ' ') map_preset (String, required ): preset to be used for minimap2 parameter '-x' reads (Array[File], required ): query sequences to be mapped and aligned ref_fasta (File, required ): reference fasta Optional library (String?) runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\"): [default-valued] prefix for output BAM tags_to_preserve (Array[String], default=[]): sam tags to carry over to aligned bam file Outputs aligned_bam (File) aligned_bai (File)","title":"AlignReads"},{"location":"tasks/AlignReads/#alignreads","text":"","title":"AlignReads"},{"location":"tasks/AlignReads/#minimap2","text":"descrpiton A wrapper to minimap2 for mapping & aligning (groups of) sequences to a reference","title":"Minimap2"},{"location":"tasks/AlignReads/#inputs","text":"","title":"Inputs"},{"location":"tasks/AlignReads/#required","text":"RG (String, required ): read group information to be supplied to parameter '-R' (note that tabs should be input as ' ') map_preset (String, required ): preset to be used for minimap2 parameter '-x' reads (Array[File], required ): query sequences to be mapped and aligned ref_fasta (File, required ): reference fasta","title":"Required"},{"location":"tasks/AlignReads/#optional","text":"library (String?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/AlignReads/#defaults","text":"prefix (String, default=\"out\"): [default-valued] prefix for output BAM tags_to_preserve (Array[String], default=[]): sam tags to carry over to aligned bam file","title":"Defaults"},{"location":"tasks/AlignReads/#outputs","text":"aligned_bam (File) aligned_bai (File)","title":"Outputs"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/","text":"BroadOnPremMalariaPipelineTasks VariantRecalibrator Inputs Required input_vcf (File, required ) prefix (String, required ) reference_dict (File, required ) reference_fai (File, required ) reference_fasta (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_3d7_hb3_index (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_7g8_gb4_index (File, required ) resource_vcf_hb3_dd2 (File, required ) resource_vcf_hb3_dd2_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs vcf (File) SortCompressIndexVcf Inputs Required input_vcf (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs vcf (File) vcf_index (File)","title":"BroadOnPremMalariaPipelineTasks"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#broadonpremmalariapipelinetasks","text":"","title":"BroadOnPremMalariaPipelineTasks"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#variantrecalibrator","text":"","title":"VariantRecalibrator"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#inputs","text":"","title":"Inputs"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#required","text":"input_vcf (File, required ) prefix (String, required ) reference_dict (File, required ) reference_fai (File, required ) reference_fasta (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_3d7_hb3_index (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_7g8_gb4_index (File, required ) resource_vcf_hb3_dd2 (File, required ) resource_vcf_hb3_dd2_index (File, required )","title":"Required"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#outputs","text":"vcf (File)","title":"Outputs"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#sortcompressindexvcf","text":"","title":"SortCompressIndexVcf"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#required_1","text":"input_vcf (File, required )","title":"Required"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#optional_1","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/BroadOnPremMalariaPipelineTasks/#outputs_1","text":"vcf (File) vcf_index (File)","title":"Outputs"},{"location":"tasks/Clair/","text":"Clair Clair description Call variants using Clair3. Inputs Required bai (File, required ): index accompanying the BAM bam (File, required ): input BAM from which to call variants preset (String, required ): calling preset (CCS, ONT) ref_fasta (File, required ): reference to which the BAM was aligned to ref_fasta_fai (File, required ): index accompanying the reference zones (String, required ): zones to run the task on Optional chr (String?): chr on which to call variants runtime_attr_override (RuntimeAttr?): override the default runtime attributes sites_vcf (File?): sites VCF sites_vcf_tbi (File?): sites VCF index Outputs pileup_vcf (File?) pileup_vcf_tbi (File?) full_alignment_vcf (File?) full_alignment_tbi (File?) vcf (File) vcf_tbi (File?) gvcf (File) gvcf_tbi (File?)","title":"Clair"},{"location":"tasks/Clair/#clair","text":"","title":"Clair"},{"location":"tasks/Clair/#clair_1","text":"description Call variants using Clair3.","title":"Clair"},{"location":"tasks/Clair/#inputs","text":"","title":"Inputs"},{"location":"tasks/Clair/#required","text":"bai (File, required ): index accompanying the BAM bam (File, required ): input BAM from which to call variants preset (String, required ): calling preset (CCS, ONT) ref_fasta (File, required ): reference to which the BAM was aligned to ref_fasta_fai (File, required ): index accompanying the reference zones (String, required ): zones to run the task on","title":"Required"},{"location":"tasks/Clair/#optional","text":"chr (String?): chr on which to call variants runtime_attr_override (RuntimeAttr?): override the default runtime attributes sites_vcf (File?): sites VCF sites_vcf_tbi (File?): sites VCF index","title":"Optional"},{"location":"tasks/Clair/#outputs","text":"pileup_vcf (File?) pileup_vcf_tbi (File?) full_alignment_vcf (File?) full_alignment_tbi (File?) vcf (File) vcf_tbi (File?) gvcf (File) gvcf_tbi (File?)","title":"Outputs"},{"location":"tasks/FastQC/","text":"FastQC FastQC Inputs Required bai (File, required ) bam (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults num_cpus (Int, default=4) Outputs stats_map (Map[String,Float]) stats (File) report (File)","title":"FastQC"},{"location":"tasks/FastQC/#fastqc","text":"","title":"FastQC"},{"location":"tasks/FastQC/#fastqc_1","text":"","title":"FastQC"},{"location":"tasks/FastQC/#inputs","text":"","title":"Inputs"},{"location":"tasks/FastQC/#required","text":"bai (File, required ) bam (File, required )","title":"Required"},{"location":"tasks/FastQC/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/FastQC/#defaults","text":"num_cpus (Int, default=4)","title":"Defaults"},{"location":"tasks/FastQC/#outputs","text":"stats_map (Map[String,Float]) stats (File) report (File)","title":"Outputs"},{"location":"tasks/Finalize/","text":"Finalize FinalizeToFile description Copies the given file to the specified bucket. Inputs Required file (File, required ); description : file to finalize; localization_optional : true outdir (String, required ): directory to which files should be uploaded Optional keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. name (String?): name to set for uploaded file runtime_attr_override (RuntimeAttr?) Outputs gcs_path (String) FinalizeToDir description Copies the given file to the specified bucket. Inputs Required files (Array[File], required ); description : files to finalize; localization_optional : true outdir (String, required ): directory to which files should be uploaded Optional keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. runtime_attr_override (RuntimeAttr?) Outputs gcs_dir (String) FinalizeTarGzContents description Copies the contents of the given tar.gz file to the specified bucket. author Jonn Smith email jonn@broadinstitute.org Inputs Required outdir (String, required ): Google cloud path to the destination folder. tar_gz_file (File, required ): Gzipped tar file whose contents we'll copy. Optional keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters. Outputs None WriteCompletionFile description Write a file to the given directory indicating the run has completed. author Jonn Smith email jonn@broadinstitute.org Inputs Required outdir (String, required ): Google cloud path to the destination folder. Optional keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. Outputs None CompressAndFinalize description Gzip a file and finalize Inputs Required file (File, required ): File to compress and finalize. outdir (String, required ): Google cloud path to the destination folder. Optional name (String?): [optional] Name of the file to write. If not specified, the name of the input file will be used. runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters. Outputs gcs_path (String) FinalizeAndCompress description Gzip a bunch of files and finalize to the same 'folder' Inputs Required files (Array[File], required ): Files to compress and finalize. outdir (String, required ): Google cloud path to the destination folder. prefix (String, required ): [optional] Prefix to add to the output files. Optional runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters. Outputs gcs_path (String) WriteNamedFile description Write a file to the given directory with the given name. author Jonn Smith email jonn@broadinstitute.org Inputs Required name (String, required ): Name of the file to write. outdir (String, required ): Google cloud path to the destination folder. Optional keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. Outputs None","title":"Finalize"},{"location":"tasks/Finalize/#finalize","text":"","title":"Finalize"},{"location":"tasks/Finalize/#finalizetofile","text":"description Copies the given file to the specified bucket.","title":"FinalizeToFile"},{"location":"tasks/Finalize/#inputs","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required","text":"file (File, required ); description : file to finalize; localization_optional : true outdir (String, required ): directory to which files should be uploaded","title":"Required"},{"location":"tasks/Finalize/#optional","text":"keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. name (String?): name to set for uploaded file runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Finalize/#outputs","text":"gcs_path (String)","title":"Outputs"},{"location":"tasks/Finalize/#finalizetodir","text":"description Copies the given file to the specified bucket.","title":"FinalizeToDir"},{"location":"tasks/Finalize/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_1","text":"files (Array[File], required ); description : files to finalize; localization_optional : true outdir (String, required ): directory to which files should be uploaded","title":"Required"},{"location":"tasks/Finalize/#optional_1","text":"keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Finalize/#outputs_1","text":"gcs_dir (String)","title":"Outputs"},{"location":"tasks/Finalize/#finalizetargzcontents","text":"description Copies the contents of the given tar.gz file to the specified bucket. author Jonn Smith email jonn@broadinstitute.org","title":"FinalizeTarGzContents"},{"location":"tasks/Finalize/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_2","text":"outdir (String, required ): Google cloud path to the destination folder. tar_gz_file (File, required ): Gzipped tar file whose contents we'll copy.","title":"Required"},{"location":"tasks/Finalize/#optional_2","text":"keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this. runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters.","title":"Optional"},{"location":"tasks/Finalize/#outputs_2","text":"None","title":"Outputs"},{"location":"tasks/Finalize/#writecompletionfile","text":"description Write a file to the given directory indicating the run has completed. author Jonn Smith email jonn@broadinstitute.org","title":"WriteCompletionFile"},{"location":"tasks/Finalize/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_3","text":"outdir (String, required ): Google cloud path to the destination folder.","title":"Required"},{"location":"tasks/Finalize/#optional_3","text":"keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this.","title":"Optional"},{"location":"tasks/Finalize/#outputs_3","text":"None","title":"Outputs"},{"location":"tasks/Finalize/#compressandfinalize","text":"description Gzip a file and finalize","title":"CompressAndFinalize"},{"location":"tasks/Finalize/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_4","text":"file (File, required ): File to compress and finalize. outdir (String, required ): Google cloud path to the destination folder.","title":"Required"},{"location":"tasks/Finalize/#optional_4","text":"name (String?): [optional] Name of the file to write. If not specified, the name of the input file will be used. runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters.","title":"Optional"},{"location":"tasks/Finalize/#outputs_4","text":"gcs_path (String)","title":"Outputs"},{"location":"tasks/Finalize/#finalizeandcompress","text":"description Gzip a bunch of files and finalize to the same 'folder'","title":"FinalizeAndCompress"},{"location":"tasks/Finalize/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_5","text":"files (Array[File], required ): Files to compress and finalize. outdir (String, required ): Google cloud path to the destination folder. prefix (String, required ): [optional] Prefix to add to the output files.","title":"Required"},{"location":"tasks/Finalize/#optional_5","text":"runtime_attr_override (RuntimeAttr?): [optional] Additional runtime parameters.","title":"Optional"},{"location":"tasks/Finalize/#outputs_5","text":"gcs_path (String)","title":"Outputs"},{"location":"tasks/Finalize/#writenamedfile","text":"description Write a file to the given directory with the given name. author Jonn Smith email jonn@broadinstitute.org","title":"WriteNamedFile"},{"location":"tasks/Finalize/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/Finalize/#required_6","text":"name (String, required ): Name of the file to write. outdir (String, required ): Google cloud path to the destination folder.","title":"Required"},{"location":"tasks/Finalize/#optional_6","text":"keyfile (File?): [optional] File used to key this finaliation. Finalization will not take place until the KeyFile exists. This can be used to force the finaliation to wait until a certain point in a workflow. NOTE: The latest WDL development spec includes the after keyword which will obviate this.","title":"Optional"},{"location":"tasks/Finalize/#outputs_6","text":"None","title":"Outputs"},{"location":"tasks/Fingerprinting/","text":"Fingerprinting ListGenotypedVCFs description List all VCFs that have been genotyped Inputs Required fingerprint_store (String, required ): A bucket that holds all fingerprinting VCFs Outputs vcf_gs_paths (File) PickGenotypeVCF description Pick a subset of VCFs that have been genotyped Inputs Required fingerprinting_vcf_gs_paths (File, required ): A file holding GS paths to fingerprinting GT'ed VCFs Optional vcf_name (String?): an expression used for picking up VCFs, the filter will be applied to VCF names, a match will lead to the VCF to be included Outputs vcfs (Array[String]) FilterGenotypesVCF description Filter out unwanted genotypes from a VCF Inputs Required fingerprint_vcf (File, required ): A VCF file that has been genotyped Defaults filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']): An array of chromosome names to filter out when verifying fingerprints Outputs ready_to_use_vcf (File) ExtractGenotypingSites description Extract genotyping sites from a VCF Inputs Required fingerprint_vcf (File, required ): A VCF file that has been genotyped Outputs sites (File) MergeGenotypingSites description Merge genotyping sites from multiple VCFs Inputs Required all_sites (Array[File], required ): An array of genotyping sites Outputs merged_sites (File) ExtractRelevantGenotypingReads description Based on genotyping (SNP) sites, extract reads that overlap those places Inputs Required aligned_bai (File, required ) aligned_bam (File, required ); localization_optional : true genotyping_sites_bed (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs relevant_reads (File) relevant_reads_bai (File) ResetCLRBaseQual description Reset base quality scores to a fixed value Inputs Required arbitrary_bq (Int, required ): A fixed base quality score bai (File, required ): A BAI file bam (File, required ): A BAM file Optional runtime_attr_override (RuntimeAttr?) Outputs barbequed_bam (File) barbequed_bai (File) CheckFingerprint description Uses Picard tool CheckFingerprint to verify if the samples in provided VCF and BAM arise from the same biological sample Inputs Required aligned_bai (File, required ) aligned_bam (File, required ); description : GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting VCF; localization_optional : true fingerprint_vcf (File, required ): Fingerprint VCF file from local database; note that sample name must be the same as in BAM haplotype_map (File, required ): Happlotype map file for the reference build used. See https://bit.ly/3QyZbwt vcf_sample_name (String, required ): Sample name in VCF, possibly different from that in the BAM. Optional runtime_attr_override (RuntimeAttr?) Outputs summary_metrics (File) detail_metrics (File) metrics_map (Map[String,String]) CheckCLRFingerprint description Uses Picard tool CheckFingerprint to verify if the samples in provided VCF and the CLR BAM arise from the same biological sample. Inputs Required aligned_bai (File, required ) aligned_bam (File, required ) fingerprint_vcf (File, required ) haplotype_map (File, required ): Haplotype map file for the reference build used. See https://bit.ly/3QyZbwt vcf_sample_name (String, required ): Sample name in VCF, possibly different from that in the BAM. Optional runtime_attr_override (RuntimeAttr?) Defaults min_base_q (Int, default=0) Outputs summary_metrics (File) detail_metrics (File) metrics_map (Map[String,String]) ReheaderFullGRCh38VCFtoNoAlt desciption Reheader the fingperint VCF that's generated with full GRCh38 reference to the no_alt header; project specific. Inputs Required full_GRCh38_vcf (File, required ): Full GRCh38 VCF file. Outputs reheadered_vcf (File)","title":"Fingerprinting"},{"location":"tasks/Fingerprinting/#fingerprinting","text":"","title":"Fingerprinting"},{"location":"tasks/Fingerprinting/#listgenotypedvcfs","text":"description List all VCFs that have been genotyped","title":"ListGenotypedVCFs"},{"location":"tasks/Fingerprinting/#inputs","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required","text":"fingerprint_store (String, required ): A bucket that holds all fingerprinting VCFs","title":"Required"},{"location":"tasks/Fingerprinting/#outputs","text":"vcf_gs_paths (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#pickgenotypevcf","text":"description Pick a subset of VCFs that have been genotyped","title":"PickGenotypeVCF"},{"location":"tasks/Fingerprinting/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_1","text":"fingerprinting_vcf_gs_paths (File, required ): A file holding GS paths to fingerprinting GT'ed VCFs","title":"Required"},{"location":"tasks/Fingerprinting/#optional","text":"vcf_name (String?): an expression used for picking up VCFs, the filter will be applied to VCF names, a match will lead to the VCF to be included","title":"Optional"},{"location":"tasks/Fingerprinting/#outputs_1","text":"vcfs (Array[String])","title":"Outputs"},{"location":"tasks/Fingerprinting/#filtergenotypesvcf","text":"description Filter out unwanted genotypes from a VCF","title":"FilterGenotypesVCF"},{"location":"tasks/Fingerprinting/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_2","text":"fingerprint_vcf (File, required ): A VCF file that has been genotyped","title":"Required"},{"location":"tasks/Fingerprinting/#defaults","text":"filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']): An array of chromosome names to filter out when verifying fingerprints","title":"Defaults"},{"location":"tasks/Fingerprinting/#outputs_2","text":"ready_to_use_vcf (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#extractgenotypingsites","text":"description Extract genotyping sites from a VCF","title":"ExtractGenotypingSites"},{"location":"tasks/Fingerprinting/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_3","text":"fingerprint_vcf (File, required ): A VCF file that has been genotyped","title":"Required"},{"location":"tasks/Fingerprinting/#outputs_3","text":"sites (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#mergegenotypingsites","text":"description Merge genotyping sites from multiple VCFs","title":"MergeGenotypingSites"},{"location":"tasks/Fingerprinting/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_4","text":"all_sites (Array[File], required ): An array of genotyping sites","title":"Required"},{"location":"tasks/Fingerprinting/#outputs_4","text":"merged_sites (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#extractrelevantgenotypingreads","text":"description Based on genotyping (SNP) sites, extract reads that overlap those places","title":"ExtractRelevantGenotypingReads"},{"location":"tasks/Fingerprinting/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_5","text":"aligned_bai (File, required ) aligned_bam (File, required ); localization_optional : true genotyping_sites_bed (File, required )","title":"Required"},{"location":"tasks/Fingerprinting/#optional_1","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Fingerprinting/#outputs_5","text":"relevant_reads (File) relevant_reads_bai (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#resetclrbasequal","text":"description Reset base quality scores to a fixed value","title":"ResetCLRBaseQual"},{"location":"tasks/Fingerprinting/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_6","text":"arbitrary_bq (Int, required ): A fixed base quality score bai (File, required ): A BAI file bam (File, required ): A BAM file","title":"Required"},{"location":"tasks/Fingerprinting/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Fingerprinting/#outputs_6","text":"barbequed_bam (File) barbequed_bai (File)","title":"Outputs"},{"location":"tasks/Fingerprinting/#checkfingerprint","text":"description Uses Picard tool CheckFingerprint to verify if the samples in provided VCF and BAM arise from the same biological sample","title":"CheckFingerprint"},{"location":"tasks/Fingerprinting/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_7","text":"aligned_bai (File, required ) aligned_bam (File, required ); description : GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting VCF; localization_optional : true fingerprint_vcf (File, required ): Fingerprint VCF file from local database; note that sample name must be the same as in BAM haplotype_map (File, required ): Happlotype map file for the reference build used. See https://bit.ly/3QyZbwt vcf_sample_name (String, required ): Sample name in VCF, possibly different from that in the BAM.","title":"Required"},{"location":"tasks/Fingerprinting/#optional_3","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Fingerprinting/#outputs_7","text":"summary_metrics (File) detail_metrics (File) metrics_map (Map[String,String])","title":"Outputs"},{"location":"tasks/Fingerprinting/#checkclrfingerprint","text":"description Uses Picard tool CheckFingerprint to verify if the samples in provided VCF and the CLR BAM arise from the same biological sample.","title":"CheckCLRFingerprint"},{"location":"tasks/Fingerprinting/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_8","text":"aligned_bai (File, required ) aligned_bam (File, required ) fingerprint_vcf (File, required ) haplotype_map (File, required ): Haplotype map file for the reference build used. See https://bit.ly/3QyZbwt vcf_sample_name (String, required ): Sample name in VCF, possibly different from that in the BAM.","title":"Required"},{"location":"tasks/Fingerprinting/#optional_4","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Fingerprinting/#defaults_1","text":"min_base_q (Int, default=0)","title":"Defaults"},{"location":"tasks/Fingerprinting/#outputs_8","text":"summary_metrics (File) detail_metrics (File) metrics_map (Map[String,String])","title":"Outputs"},{"location":"tasks/Fingerprinting/#reheaderfullgrch38vcftonoalt","text":"desciption Reheader the fingperint VCF that's generated with full GRCh38 reference to the no_alt header; project specific.","title":"ReheaderFullGRCh38VCFtoNoAlt"},{"location":"tasks/Fingerprinting/#inputs_9","text":"","title":"Inputs"},{"location":"tasks/Fingerprinting/#required_9","text":"full_GRCh38_vcf (File, required ): Full GRCh38 VCF file.","title":"Required"},{"location":"tasks/Fingerprinting/#outputs_9","text":"reheadered_vcf (File)","title":"Outputs"},{"location":"tasks/FunctionalAnnotation/","text":"FunctionalAnnotation FunctionallyAnnotateVariants Inputs Required snpeff_db (File, required ) snpeff_db_identifier (String, required ) vcf (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs annotated_vcf (File) annotated_vcf_index (File) snpEff_summary (File) snpEff_genes (File)","title":"FunctionalAnnotation"},{"location":"tasks/FunctionalAnnotation/#functionalannotation","text":"","title":"FunctionalAnnotation"},{"location":"tasks/FunctionalAnnotation/#functionallyannotatevariants","text":"","title":"FunctionallyAnnotateVariants"},{"location":"tasks/FunctionalAnnotation/#inputs","text":"","title":"Inputs"},{"location":"tasks/FunctionalAnnotation/#required","text":"snpeff_db (File, required ) snpeff_db_identifier (String, required ) vcf (File, required )","title":"Required"},{"location":"tasks/FunctionalAnnotation/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/FunctionalAnnotation/#outputs","text":"annotated_vcf (File) annotated_vcf_index (File) snpEff_summary (File) snpEff_genes (File)","title":"Outputs"},{"location":"tasks/GeneralUtils/","text":"GeneralUtils TarGZFiles description Zip up a list of files to a tar.gz file. Inputs Required files (Array[File], required ): List of files to zip up. name (String, required ): Name of the tar.gz file. Outputs you_got_it (File) GetTodayDate desciption Generates a YYYY-MM-DD date of today (when this task is called). UTC. volatile true Inputs None Outputs yyyy_mm_dd (String)","title":"GeneralUtils"},{"location":"tasks/GeneralUtils/#generalutils","text":"","title":"GeneralUtils"},{"location":"tasks/GeneralUtils/#targzfiles","text":"description Zip up a list of files to a tar.gz file.","title":"TarGZFiles"},{"location":"tasks/GeneralUtils/#inputs","text":"","title":"Inputs"},{"location":"tasks/GeneralUtils/#required","text":"files (Array[File], required ): List of files to zip up. name (String, required ): Name of the tar.gz file.","title":"Required"},{"location":"tasks/GeneralUtils/#outputs","text":"you_got_it (File)","title":"Outputs"},{"location":"tasks/GeneralUtils/#gettodaydate","text":"desciption Generates a YYYY-MM-DD date of today (when this task is called). UTC. volatile true","title":"GetTodayDate"},{"location":"tasks/GeneralUtils/#inputs_1","text":"None","title":"Inputs"},{"location":"tasks/GeneralUtils/#outputs_1","text":"yyyy_mm_dd (String)","title":"Outputs"},{"location":"tasks/Hail/","text":"Hail ConvertToHailMT description Convert a .vcf.bgz file to a Hail MatrixTable and copy it to a final gs:// URL. Inputs Required gvcf (File, required ): The input .vcf.bgz file. tbi (File, required ): The input .vcf.bgz.tbi file. Optional ref_fai (String?): The reference genome FASTA index file. If not specified, the reference genome will be downloaded from the Hail website. ref_fasta (String?): The reference genome FASTA file. If not specified, the reference genome will be downloaded from the Hail website. runtime_attr_override (RuntimeAttr?): Override the default runtime attributes for this task. Defaults prefix (String, default=\"out\"): The prefix to use for the output MatrixTable. reference (String, default=\"GRCh38\"): The reference genome to use. Currently only GRCh38 is supported. Outputs mt_tar (File) completion_file (File)","title":"Hail"},{"location":"tasks/Hail/#hail","text":"","title":"Hail"},{"location":"tasks/Hail/#converttohailmt","text":"description Convert a .vcf.bgz file to a Hail MatrixTable and copy it to a final gs:// URL.","title":"ConvertToHailMT"},{"location":"tasks/Hail/#inputs","text":"","title":"Inputs"},{"location":"tasks/Hail/#required","text":"gvcf (File, required ): The input .vcf.bgz file. tbi (File, required ): The input .vcf.bgz.tbi file.","title":"Required"},{"location":"tasks/Hail/#optional","text":"ref_fai (String?): The reference genome FASTA index file. If not specified, the reference genome will be downloaded from the Hail website. ref_fasta (String?): The reference genome FASTA file. If not specified, the reference genome will be downloaded from the Hail website. runtime_attr_override (RuntimeAttr?): Override the default runtime attributes for this task.","title":"Optional"},{"location":"tasks/Hail/#defaults","text":"prefix (String, default=\"out\"): The prefix to use for the output MatrixTable. reference (String, default=\"GRCh38\"): The reference genome to use. Currently only GRCh38 is supported.","title":"Defaults"},{"location":"tasks/Hail/#outputs","text":"mt_tar (File) completion_file (File)","title":"Outputs"},{"location":"tasks/MASSeq/","text":"MASSeq RemoveMasSeqTruncatedReads description Removes reads that are truncated by the MAS-SEQ adapter. Inputs Required bam (File, required ): The BAM file to remove truncated reads from. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\"): The prefix to use for the output BAM file. Outputs non_trucated_bam (File) non_trucated_bai (File) AdjustUmiSequenceWithAdapterAlignment description Extracts a new UMI from each given read by aligning the preceding adapter sequences to the read. author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): The BAM file to extract UMIs from. Optional post_umi_seq (String?): The sequence of the adapter following the UMI sequence. post_umi_tag (String?): The tag to use for the adapter following the UMI sequence. pre_pre_umi_seq (String?): The sequence of the adapter preceding the UMI sequence. pre_umi_seq (String?): The sequence of the adapter preceding the UMI sequence. pre_umi_tag (String?): The tag to use for the adapter preceding the UMI sequence. runtime_attr_override (RuntimeAttr?) Defaults existing_umi_tag (String, default=\"ZU\"): The tag to use for the existing UMI sequence. new_umi_tag (String, default=\"JX\"): The tag to use for the new UMI sequence. prefix (String, default=\"out\"): The prefix to use for the output BAM file. umi_length (Int, default=10): The length of the UMI sequence. Outputs umi_adjusted_bam (File) log (File) FilterMasSeqReads description Filters out reads that are likely to be from the MAS-Seq protocol. Inputs Required input_bai (File, required ): The BAI file for the BAM file to filter. input_bam (File, required ): The BAM file to filter. Optional runtime_attr_override (RuntimeAttr?) Defaults maxEndClipping (Int, default=1000): The maximum amount of end clipping to allow. maxReadLength (Int, default=15000): The maximum read length to allow. prefix (String, default=\"out\"): The prefix to use for the output BAM file. Outputs bam (File) bai (File) RenameSingleCellBamTagsForMasIsoSeqV0 description Rename the single-cell tags in MAS-ISO-seq v0 data (CB -> Jp; ZU -> Jq ...). author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): The BAM file to rename. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"tags_renamed\"): The prefix to use for the output BAM file. Outputs bam_out (File) bai (File) RestoreSingleCellBamTagsForMasIsoSeqV0 description Restore the single-cell tags in MAS-ISO-seq v0 data (Jp -> Cb; Jq -> ZU ...). author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): The BAM file to rename. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"tags_restored\"): The prefix to use for the output BAM file. Outputs bam_out (File) bai (File)","title":"MASSeq"},{"location":"tasks/MASSeq/#masseq","text":"","title":"MASSeq"},{"location":"tasks/MASSeq/#removemasseqtruncatedreads","text":"description Removes reads that are truncated by the MAS-SEQ adapter.","title":"RemoveMasSeqTruncatedReads"},{"location":"tasks/MASSeq/#inputs","text":"","title":"Inputs"},{"location":"tasks/MASSeq/#required","text":"bam (File, required ): The BAM file to remove truncated reads from.","title":"Required"},{"location":"tasks/MASSeq/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/MASSeq/#defaults","text":"prefix (String, default=\"out\"): The prefix to use for the output BAM file.","title":"Defaults"},{"location":"tasks/MASSeq/#outputs","text":"non_trucated_bam (File) non_trucated_bai (File)","title":"Outputs"},{"location":"tasks/MASSeq/#adjustumisequencewithadapteralignment","text":"description Extracts a new UMI from each given read by aligning the preceding adapter sequences to the read. author Jonn Smith email jonn@broadinstitute.org","title":"AdjustUmiSequenceWithAdapterAlignment"},{"location":"tasks/MASSeq/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/MASSeq/#required_1","text":"bam (File, required ): The BAM file to extract UMIs from.","title":"Required"},{"location":"tasks/MASSeq/#optional_1","text":"post_umi_seq (String?): The sequence of the adapter following the UMI sequence. post_umi_tag (String?): The tag to use for the adapter following the UMI sequence. pre_pre_umi_seq (String?): The sequence of the adapter preceding the UMI sequence. pre_umi_seq (String?): The sequence of the adapter preceding the UMI sequence. pre_umi_tag (String?): The tag to use for the adapter preceding the UMI sequence. runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/MASSeq/#defaults_1","text":"existing_umi_tag (String, default=\"ZU\"): The tag to use for the existing UMI sequence. new_umi_tag (String, default=\"JX\"): The tag to use for the new UMI sequence. prefix (String, default=\"out\"): The prefix to use for the output BAM file. umi_length (Int, default=10): The length of the UMI sequence.","title":"Defaults"},{"location":"tasks/MASSeq/#outputs_1","text":"umi_adjusted_bam (File) log (File)","title":"Outputs"},{"location":"tasks/MASSeq/#filtermasseqreads","text":"description Filters out reads that are likely to be from the MAS-Seq protocol.","title":"FilterMasSeqReads"},{"location":"tasks/MASSeq/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/MASSeq/#required_2","text":"input_bai (File, required ): The BAI file for the BAM file to filter. input_bam (File, required ): The BAM file to filter.","title":"Required"},{"location":"tasks/MASSeq/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/MASSeq/#defaults_2","text":"maxEndClipping (Int, default=1000): The maximum amount of end clipping to allow. maxReadLength (Int, default=15000): The maximum read length to allow. prefix (String, default=\"out\"): The prefix to use for the output BAM file.","title":"Defaults"},{"location":"tasks/MASSeq/#outputs_2","text":"bam (File) bai (File)","title":"Outputs"},{"location":"tasks/MASSeq/#renamesinglecellbamtagsformasisoseqv0","text":"description Rename the single-cell tags in MAS-ISO-seq v0 data (CB -> Jp; ZU -> Jq ...). author Jonn Smith email jonn@broadinstitute.org","title":"RenameSingleCellBamTagsForMasIsoSeqV0"},{"location":"tasks/MASSeq/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/MASSeq/#required_3","text":"bam (File, required ): The BAM file to rename.","title":"Required"},{"location":"tasks/MASSeq/#optional_3","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/MASSeq/#defaults_3","text":"prefix (String, default=\"tags_renamed\"): The prefix to use for the output BAM file.","title":"Defaults"},{"location":"tasks/MASSeq/#outputs_3","text":"bam_out (File) bai (File)","title":"Outputs"},{"location":"tasks/MASSeq/#restoresinglecellbamtagsformasisoseqv0","text":"description Restore the single-cell tags in MAS-ISO-seq v0 data (Jp -> Cb; Jq -> ZU ...). author Jonn Smith email jonn@broadinstitute.org","title":"RestoreSingleCellBamTagsForMasIsoSeqV0"},{"location":"tasks/MASSeq/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/MASSeq/#required_4","text":"bam (File, required ): The BAM file to rename.","title":"Required"},{"location":"tasks/MASSeq/#optional_4","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/MASSeq/#defaults_4","text":"prefix (String, default=\"tags_restored\"): The prefix to use for the output BAM file.","title":"Defaults"},{"location":"tasks/MASSeq/#outputs_4","text":"bam_out (File) bai (File)","title":"Outputs"},{"location":"tasks/MalariaReports/","text":"MalariaReports RunReportScript description Use RunReportScript to start the report generation process. Inputs Required aligned_bases (Float, required ): total number of bases aligned to the reference genome aligned_coverage (Float, required ): number of reads uniquely mapped to a reference aligned_reads (Int, required ): total number of reads aligned to the reference genome average_identity (Float, required ) base_bucket (String, required ): Base google bucket for the sample data. Used for retrieving BED files. fraction_aligned_bases (Float, required ): percentage of bases aligned out of all bases in the sequence location_table (File, required ): table containing the region, district, site, and facility type for this sample's location num_reads_q10 (Int, required ): the number of reads where the probability of a given base call being wrong is 1 in 10 num_reads_q12 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 16 num_reads_q15 (Int, required ) num_reads_q5 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 3 num_reads_q7 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 5 qc_pass (String, required ): status to determine whether or not the sequencing run passes quality control standards regions_bed (File, required ) sample_name (String, required ): name of sequenced sample snapshots (Array[File], required ) tech_flag (String, required ): string denoting if the sample was sequenced using long read or short read techniques upload_date (String, required ): date sample was uploaded Optional HRP2 (String?): value denoting whether the HRP2 marker is present or not -- true or false HRP3 (String?): value denoting whether the HRP3 marker is present or not -- true or false aligned_read_length (Float?): number at which 50% of the read lengths are longer than this value barcode (String?): the barcode of the sample code (String?): the three letter code denoting the corresponding health facility/site collection_date (String?): date sample was collected coverage_bin_size (Int?): number to use as size of bins for coverage plot generation; default is 1500 drug_resistance_text (File?): text file used for determining and displaying drug resistances fastqc_path (File?): directory of fastqc_report used for finding BED and BAM files latitude (Float?): latitude value of where the sample was taken location (String?): location where the sample was taken longitude (Float?): longitude value of where the sample was taken ont_qc_report (File?): ONT QC report file pct_properly_paired_reads (Float?): median read length predicted_drug_status_artemisinin (String?): value denoting the sensitivity of this sample to artemisinin predicted_drug_status_chloroquine (String?): value denoting the sensitivity of this sample to chloroquine predicted_drug_status_mefloquine (String?): value denoting the sensitivity of this sample to mefloquine predicted_drug_status_piperaquine (String?): value denoting the sensitivity of this sample to piperaquine predicted_drug_status_pyrimethamine (String?): value denoting the sensitivity of this sample to pyrimethamine predicted_drug_status_sulfadoxine (String?): value denoting the sensitivity of this sample to sulfadoxine read_qual_mean (Float?): mean measure of the uncertainty of base calls runtime_attr_override (RuntimeAttr?): Override the default runtime attributes sequencing_date (String?): date sample was sequenced species (String?): species of sample Outputs report (File)","title":"MalariaReports"},{"location":"tasks/MalariaReports/#malariareports","text":"","title":"MalariaReports"},{"location":"tasks/MalariaReports/#runreportscript","text":"description Use RunReportScript to start the report generation process.","title":"RunReportScript"},{"location":"tasks/MalariaReports/#inputs","text":"","title":"Inputs"},{"location":"tasks/MalariaReports/#required","text":"aligned_bases (Float, required ): total number of bases aligned to the reference genome aligned_coverage (Float, required ): number of reads uniquely mapped to a reference aligned_reads (Int, required ): total number of reads aligned to the reference genome average_identity (Float, required ) base_bucket (String, required ): Base google bucket for the sample data. Used for retrieving BED files. fraction_aligned_bases (Float, required ): percentage of bases aligned out of all bases in the sequence location_table (File, required ): table containing the region, district, site, and facility type for this sample's location num_reads_q10 (Int, required ): the number of reads where the probability of a given base call being wrong is 1 in 10 num_reads_q12 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 16 num_reads_q15 (Int, required ) num_reads_q5 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 3 num_reads_q7 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 5 qc_pass (String, required ): status to determine whether or not the sequencing run passes quality control standards regions_bed (File, required ) sample_name (String, required ): name of sequenced sample snapshots (Array[File], required ) tech_flag (String, required ): string denoting if the sample was sequenced using long read or short read techniques upload_date (String, required ): date sample was uploaded","title":"Required"},{"location":"tasks/MalariaReports/#optional","text":"HRP2 (String?): value denoting whether the HRP2 marker is present or not -- true or false HRP3 (String?): value denoting whether the HRP3 marker is present or not -- true or false aligned_read_length (Float?): number at which 50% of the read lengths are longer than this value barcode (String?): the barcode of the sample code (String?): the three letter code denoting the corresponding health facility/site collection_date (String?): date sample was collected coverage_bin_size (Int?): number to use as size of bins for coverage plot generation; default is 1500 drug_resistance_text (File?): text file used for determining and displaying drug resistances fastqc_path (File?): directory of fastqc_report used for finding BED and BAM files latitude (Float?): latitude value of where the sample was taken location (String?): location where the sample was taken longitude (Float?): longitude value of where the sample was taken ont_qc_report (File?): ONT QC report file pct_properly_paired_reads (Float?): median read length predicted_drug_status_artemisinin (String?): value denoting the sensitivity of this sample to artemisinin predicted_drug_status_chloroquine (String?): value denoting the sensitivity of this sample to chloroquine predicted_drug_status_mefloquine (String?): value denoting the sensitivity of this sample to mefloquine predicted_drug_status_piperaquine (String?): value denoting the sensitivity of this sample to piperaquine predicted_drug_status_pyrimethamine (String?): value denoting the sensitivity of this sample to pyrimethamine predicted_drug_status_sulfadoxine (String?): value denoting the sensitivity of this sample to sulfadoxine read_qual_mean (Float?): mean measure of the uncertainty of base calls runtime_attr_override (RuntimeAttr?): Override the default runtime attributes sequencing_date (String?): date sample was sequenced species (String?): species of sample","title":"Optional"},{"location":"tasks/MalariaReports/#outputs","text":"report (File)","title":"Outputs"},{"location":"tasks/MalariaReportsSnapshots/","text":"MalariaReportsSnapshots DrugResIGV description DrugResIGV generates IGV snapshots for the different drug resistance loci for malaria. Inputs Required aligned_bai (File, required ): GCS path to aligned bai aligned_bam (File, required ): GCS path to aligned bam fasta_index_path (File, required ): GCS path to fasta.fai file fasta_path (File, required ): GCS path to fasta file regions_bed (File, required ): GCS path to bed file containing drug resistance loci sample_name (String, required ): name of the sample sequenced Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs snapshots (Array[File]) batch_script (File)","title":"MalariaReportsSnapshots"},{"location":"tasks/MalariaReportsSnapshots/#malariareportssnapshots","text":"","title":"MalariaReportsSnapshots"},{"location":"tasks/MalariaReportsSnapshots/#drugresigv","text":"description DrugResIGV generates IGV snapshots for the different drug resistance loci for malaria.","title":"DrugResIGV"},{"location":"tasks/MalariaReportsSnapshots/#inputs","text":"","title":"Inputs"},{"location":"tasks/MalariaReportsSnapshots/#required","text":"aligned_bai (File, required ): GCS path to aligned bai aligned_bam (File, required ): GCS path to aligned bam fasta_index_path (File, required ): GCS path to fasta.fai file fasta_path (File, required ): GCS path to fasta file regions_bed (File, required ): GCS path to bed file containing drug resistance loci sample_name (String, required ): name of the sample sequenced","title":"Required"},{"location":"tasks/MalariaReportsSnapshots/#optional","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/MalariaReportsSnapshots/#outputs","text":"snapshots (Array[File]) batch_script (File)","title":"Outputs"},{"location":"tasks/Medaka/","text":"Medaka MedakaPolish description Polish an ONT draft assembly with GUPPY basecalled ONT reads. Runs within a few hours with 18GB basecalled_reads and a 23Mb genome Inputs Required basecalled_reads (File, required ): basecalled reads to be used with polishing draft_assembly (File, required ): draft assembly to be polished Optional runtime_attr_override (RuntimeAttr?) Defaults model (String, default=\"r941_prom_high_g360\"): run medaka tools list_models and pick string with the correct pore type, machine, and guppy version n_rounds (Int, default=3): number of polishing rounds to apply prefix (String, default=\"consensus\"): prefix for output files Outputs polished_assembly (File)","title":"Medaka"},{"location":"tasks/Medaka/#medaka","text":"","title":"Medaka"},{"location":"tasks/Medaka/#medakapolish","text":"description Polish an ONT draft assembly with GUPPY basecalled ONT reads. Runs within a few hours with 18GB basecalled_reads and a 23Mb genome","title":"MedakaPolish"},{"location":"tasks/Medaka/#inputs","text":"","title":"Inputs"},{"location":"tasks/Medaka/#required","text":"basecalled_reads (File, required ): basecalled reads to be used with polishing draft_assembly (File, required ): draft assembly to be polished","title":"Required"},{"location":"tasks/Medaka/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Medaka/#defaults","text":"model (String, default=\"r941_prom_high_g360\"): run medaka tools list_models and pick string with the correct pore type, machine, and guppy version n_rounds (Int, default=3): number of polishing rounds to apply prefix (String, default=\"consensus\"): prefix for output files","title":"Defaults"},{"location":"tasks/Medaka/#outputs","text":"polished_assembly (File)","title":"Outputs"},{"location":"tasks/NanoPlot/","text":"NanoPlot NanoPlotFromSummary description Use NanoPlot to generate plots from ONT summary files Inputs Required summary_files (Array[File], required ): A list of summary files to use as input Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs stats (File) stats_map (Map[String,Float]) plots (Array[File]) ActivePores_Over_Time (File) ActivityMap_ReadsPerChannel (File) CumulativeYieldPlot_Gigabases (File) CumulativeYieldPlot_NumberOfReads (File) LengthvsQualityScatterPlot_dot (File) LengthvsQualityScatterPlot_kde (File) Non_weightedHistogramReadlength (File) Non_weightedLogTransformed_HistogramReadlength (File) NumberOfReads_Over_Time (File) TimeLengthViolinPlot (File) TimeQualityViolinPlot (File) WeightedHistogramReadlength (File) WeightedLogTransformed_HistogramReadlength (File) Yield_By_Length (File) NanoPlotFromRichFastqs description Use NanoPlot to generate plots from a list of ONT fastq files Inputs Required fastqs (Array[File], required ): A list of fastq files to use as input Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs stats (File) stats_map (Map[String,Float]) plots (Array[File]) ActivePores_Over_Time (File) ActivityMap_ReadsPerChannel (File) CumulativeYieldPlot_Gigabases (File) CumulativeYieldPlot_NumberOfReads (File) LengthvsQualityScatterPlot_dot (File) LengthvsQualityScatterPlot_kde (File) Non_weightedHistogramReadlength (File) Non_weightedLogTransformed_HistogramReadlength (File) NumberOfReads_Over_Time (File) TimeLengthViolinPlot (File) TimeQualityViolinPlot (File) WeightedHistogramReadlength (File) WeightedLogTransformed_HistogramReadlength (File) Yield_By_Length (File) NanoPlotFromBam description Use NanoPlot to generate plots from a bam file Inputs Required bai (File, required ): The bai file for the bam file bam (File, required ): A bam file to use as input Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs stats (File) stats_map (Map[String,Float]) plots (Array[File])","title":"NanoPlot"},{"location":"tasks/NanoPlot/#nanoplot","text":"","title":"NanoPlot"},{"location":"tasks/NanoPlot/#nanoplotfromsummary","text":"description Use NanoPlot to generate plots from ONT summary files","title":"NanoPlotFromSummary"},{"location":"tasks/NanoPlot/#inputs","text":"","title":"Inputs"},{"location":"tasks/NanoPlot/#required","text":"summary_files (Array[File], required ): A list of summary files to use as input","title":"Required"},{"location":"tasks/NanoPlot/#optional","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/NanoPlot/#outputs","text":"stats (File) stats_map (Map[String,Float]) plots (Array[File]) ActivePores_Over_Time (File) ActivityMap_ReadsPerChannel (File) CumulativeYieldPlot_Gigabases (File) CumulativeYieldPlot_NumberOfReads (File) LengthvsQualityScatterPlot_dot (File) LengthvsQualityScatterPlot_kde (File) Non_weightedHistogramReadlength (File) Non_weightedLogTransformed_HistogramReadlength (File) NumberOfReads_Over_Time (File) TimeLengthViolinPlot (File) TimeQualityViolinPlot (File) WeightedHistogramReadlength (File) WeightedLogTransformed_HistogramReadlength (File) Yield_By_Length (File)","title":"Outputs"},{"location":"tasks/NanoPlot/#nanoplotfromrichfastqs","text":"description Use NanoPlot to generate plots from a list of ONT fastq files","title":"NanoPlotFromRichFastqs"},{"location":"tasks/NanoPlot/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/NanoPlot/#required_1","text":"fastqs (Array[File], required ): A list of fastq files to use as input","title":"Required"},{"location":"tasks/NanoPlot/#optional_1","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/NanoPlot/#outputs_1","text":"stats (File) stats_map (Map[String,Float]) plots (Array[File]) ActivePores_Over_Time (File) ActivityMap_ReadsPerChannel (File) CumulativeYieldPlot_Gigabases (File) CumulativeYieldPlot_NumberOfReads (File) LengthvsQualityScatterPlot_dot (File) LengthvsQualityScatterPlot_kde (File) Non_weightedHistogramReadlength (File) Non_weightedLogTransformed_HistogramReadlength (File) NumberOfReads_Over_Time (File) TimeLengthViolinPlot (File) TimeQualityViolinPlot (File) WeightedHistogramReadlength (File) WeightedLogTransformed_HistogramReadlength (File) Yield_By_Length (File)","title":"Outputs"},{"location":"tasks/NanoPlot/#nanoplotfrombam","text":"description Use NanoPlot to generate plots from a bam file","title":"NanoPlotFromBam"},{"location":"tasks/NanoPlot/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/NanoPlot/#required_2","text":"bai (File, required ): The bai file for the bam file bam (File, required ): A bam file to use as input","title":"Required"},{"location":"tasks/NanoPlot/#optional_2","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/NanoPlot/#outputs_2","text":"stats (File) stats_map (Map[String,Float]) plots (Array[File])","title":"Outputs"},{"location":"tasks/ONTPepper/","text":"ONTPepper Pepper description A 1-stop shop task offered by Pepper for ONT data. This pipeline calls small variants using DeepVariant. Inputs Required bai (File, required ): The input bam index file. bam (File, required ): The input bam file. memory (Int, required ): The amount of memory to use. ref_fasta (File, required ): The reference fasta file. ref_fasta_fai (File, required ): The reference fasta index file. threads (Int, required ): The number of threads to use. Optional runtime_attr_override (RuntimeAttr?): override the default runtime attributes Defaults zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task Outputs VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File) phasedVCF (File) phasedtbi (File) hap_tagged_bam (File) hap_tagged_bai (File) output_dir_structure (File) phaseset_bed (File) visual_report_html (File)","title":"ONTPepper"},{"location":"tasks/ONTPepper/#ontpepper","text":"","title":"ONTPepper"},{"location":"tasks/ONTPepper/#pepper","text":"description A 1-stop shop task offered by Pepper for ONT data. This pipeline calls small variants using DeepVariant.","title":"Pepper"},{"location":"tasks/ONTPepper/#inputs","text":"","title":"Inputs"},{"location":"tasks/ONTPepper/#required","text":"bai (File, required ): The input bam index file. bam (File, required ): The input bam file. memory (Int, required ): The amount of memory to use. ref_fasta (File, required ): The reference fasta file. ref_fasta_fai (File, required ): The reference fasta index file. threads (Int, required ): The number of threads to use.","title":"Required"},{"location":"tasks/ONTPepper/#optional","text":"runtime_attr_override (RuntimeAttr?): override the default runtime attributes","title":"Optional"},{"location":"tasks/ONTPepper/#defaults","text":"zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task","title":"Defaults"},{"location":"tasks/ONTPepper/#outputs","text":"VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File) phasedVCF (File) phasedtbi (File) hap_tagged_bam (File) hap_tagged_bai (File) output_dir_structure (File) phaseset_bed (File) visual_report_html (File)","title":"Outputs"},{"location":"tasks/ONTUtils/","text":"ONTUtils GetRunInfo description Get ONT run info from a final summary file. Inputs Required final_summary (String, required ): Sequencing summary file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs run_info (Map[String,String]) ListFiles description List files in a GCS directory. Inputs Required sequencing_summary (String, required ): Sequencing summary file. suffix (String, required ): Suffix of files to list. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs manifest (File) count (Int) PartitionManifest description Partition a manifest into chunks. Inputs Required N (Int, required ): Number of chunks to partition into. manifest (File, required ): Manifest to partition. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs manifest_chunks (Array[File])","title":"ONTUtils"},{"location":"tasks/ONTUtils/#ontutils","text":"","title":"ONTUtils"},{"location":"tasks/ONTUtils/#getruninfo","text":"description Get ONT run info from a final summary file.","title":"GetRunInfo"},{"location":"tasks/ONTUtils/#inputs","text":"","title":"Inputs"},{"location":"tasks/ONTUtils/#required","text":"final_summary (String, required ): Sequencing summary file.","title":"Required"},{"location":"tasks/ONTUtils/#optional","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/ONTUtils/#outputs","text":"run_info (Map[String,String])","title":"Outputs"},{"location":"tasks/ONTUtils/#listfiles","text":"description List files in a GCS directory.","title":"ListFiles"},{"location":"tasks/ONTUtils/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/ONTUtils/#required_1","text":"sequencing_summary (String, required ): Sequencing summary file. suffix (String, required ): Suffix of files to list.","title":"Required"},{"location":"tasks/ONTUtils/#optional_1","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/ONTUtils/#outputs_1","text":"manifest (File) count (Int)","title":"Outputs"},{"location":"tasks/ONTUtils/#partitionmanifest","text":"description Partition a manifest into chunks.","title":"PartitionManifest"},{"location":"tasks/ONTUtils/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/ONTUtils/#required_2","text":"N (Int, required ): Number of chunks to partition into. manifest (File, required ): Manifest to partition.","title":"Required"},{"location":"tasks/ONTUtils/#optional_2","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/ONTUtils/#outputs_2","text":"manifest_chunks (Array[File])","title":"Outputs"},{"location":"tasks/PBUtils/","text":"PBUtils GetRunInfo description Get run info from a PacBio BAM file. Inputs Required SM (String, required ): Sample name. bam (String, required ): BAM file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs run_info (Map[String,String]) is_corrected (Boolean) ShardLongReads description Shard long reads. Inputs Required unaligned_bam (File, required ): Unaligned BAM file. unaligned_pbi (File, required ): Unaligned BAM index file. Optional num_ssds (Int?): number of SSDs to use runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults drop_per_base_N_pulse_tags (Boolean, default=false): Drop per-base N and pulse tags. num_shards (Int, default=300): Number of shards. num_threads (Int, default=8): Number of threads. prefix (String, default=\"shard\"): Prefix for shard BAM files. zones (String, default=\"us-central1-c us-central1-b\"): select which zone (GCP) to run this task Outputs unmapped_shards (Array[File]) CCS description Run CCS. Inputs Required subreads (File, required ): Subreads BAM file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults all (Boolean, default=true): Generates one representative sequence per zero mode waveguide (ZMW), irrespective of quality and passes by_strand (Boolean, default=false): Treats each strand of a ZMW (zero mode waveguide) as an individual entity and generates one consensus read for each strand that passes all filters. kinetics (Boolean, default=false): Generate SQIIe values. Outputs consensus (File) report (File) report_json (File) metrics_json (File) hifi_summary_json (File) ExtractHifiReads description Extract HiFi reads from a BAM file. Inputs Required bam (File, required ): Input BAM file. library (String, required ): Library name, this will override the LB: entry on the @RG line sample_name (String, required ): Sample name, we always rely explicitly on input SM name Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"hifi\"): Prefix for output files. Outputs hifi_bam (File) MergeCCSReports description Merge CCS reports from shards of a single BAM. Inputs Required reports (Array[File], required ): Input CCS reports. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for output files. Outputs report (File) Demultiplex description Demultiplex reads in a multiplexed PacBio bam. Inputs Required bam (File, required ): Input BAM. barcode_file (File, required ): Input barcode file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults ccs (Boolean, default=false): Input BAM is CCS. dump_removed (Boolean, default=false): Dump removed reads to a BAM file. guess (Int, default=0): Guess barcodes. guess_min_count (Int, default=0): Minimum number of reads to guess barcodes. isoseq (Boolean, default=false): Input BAM is IsoSeq. min_score (Int, default=0): Minimum barcode score. peek (Int, default=0): Looks at the first n ZMWs of the input and return the mean peek_guess (Boolean, default=false): Demultiplex Barcodes will run twice on the input data. For the first 50,000 ZMWs, it will guess the barcodes and store the mask of identified barcodes. In the second run, the barcode mask is used to demultiplex all ZMWs prefix (String, default=\"demux\"): Prefix for output files. split_bam_named (Boolean, default=false): Split BAM by barcode name. Outputs demux_bams (Array[File]) counts (File) report (File) summary (File) clips (File?) MakeDetailedDemultiplexingReport description Make a detailed demultiplexing report. Inputs Required report (File, required ): Input report. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults type (String, default=\"png\"): Output file type (pdf or png). Outputs report_files (Array[File]) MakeSummarizedDemultiplexingReport description Make a summarized demultiplexing report. Inputs Required report (File, required ): Input report. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs report_files (Array[File]) RefineTranscriptReads description Refine transcript reads. Inputs Required bam (File, required ): Input BAM file. barcode_file (File, required ): Input barcode file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"flnc\"): Prefix for output BAM file. require_polya (Boolean, default=true): Require polyA tail. Outputs refined_bam (File) ClusterTranscripts description Cluster transcripts. Inputs Required bam (File, required ): Input BAM file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"clustered\"): Prefix for output BAM file. use_qvs (Boolean, default=true): Use CCS Analysis Quality Values. Outputs clustered_bam (File) clustered_pbi (File) hq_fasta (File) hq_bam (File) hq_pbi (File) lq_fasta (File) lq_bam (File) lq_pbi (File) cluster (File) cluster_report_csv (File) transcriptset_xml (File) Align description Align reads to reference. Inputs Required bam (File, required ): Input BAM file. drop_per_base_N_pulse_tags (Boolean, required ): Drop per-base N and pulse tags. map_preset (String, required ) ref_fasta (File, required ): Input reference FASTA file. sample_name (String, required ): we always rely explicitly on input SM name Optional library (String?): this will override the LB: entry on the @RG line runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for output BAM file. Outputs aligned_bam (File) aligned_bai (File) PBIndex description Index a BAM file. Inputs Required bam (File, required ): Input BAM file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs pbi (File) CollapseTranscripts description Collapse transcripts using isoseq3. Inputs Required bam (File, required ): Input BAM file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for output files. use_qvs (Boolean, default=true): Use CCS Analysis Quality Values. Outputs gff (File) SummarizeCCSReport description Summarize CCS report. Inputs Required report (File, required ): Input CCS report. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Outputs zmws_input (Float) zmws_pass_filters (Float) zmws_fail_filters (Float) zmws_shortcut_filters (Float) zmws_pass_filters_pct (Float) zmws_fail_filters_pct (Float) zmws_shortcut_filters_pct (Float) SummarizePBI description Summarize PBI. Inputs Required pbi (File, required ): Input PBI. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults qual_threshold (Int, default=0): Quality threshold. Outputs results (Map[String,Float])","title":"PBUtils"},{"location":"tasks/PBUtils/#pbutils","text":"","title":"PBUtils"},{"location":"tasks/PBUtils/#getruninfo","text":"description Get run info from a PacBio BAM file.","title":"GetRunInfo"},{"location":"tasks/PBUtils/#inputs","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required","text":"SM (String, required ): Sample name. bam (String, required ): BAM file.","title":"Required"},{"location":"tasks/PBUtils/#optional","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#outputs","text":"run_info (Map[String,String]) is_corrected (Boolean)","title":"Outputs"},{"location":"tasks/PBUtils/#shardlongreads","text":"description Shard long reads.","title":"ShardLongReads"},{"location":"tasks/PBUtils/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_1","text":"unaligned_bam (File, required ): Unaligned BAM file. unaligned_pbi (File, required ): Unaligned BAM index file.","title":"Required"},{"location":"tasks/PBUtils/#optional_1","text":"num_ssds (Int?): number of SSDs to use runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults","text":"drop_per_base_N_pulse_tags (Boolean, default=false): Drop per-base N and pulse tags. num_shards (Int, default=300): Number of shards. num_threads (Int, default=8): Number of threads. prefix (String, default=\"shard\"): Prefix for shard BAM files. zones (String, default=\"us-central1-c us-central1-b\"): select which zone (GCP) to run this task","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_1","text":"unmapped_shards (Array[File])","title":"Outputs"},{"location":"tasks/PBUtils/#ccs","text":"description Run CCS.","title":"CCS"},{"location":"tasks/PBUtils/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_2","text":"subreads (File, required ): Subreads BAM file.","title":"Required"},{"location":"tasks/PBUtils/#optional_2","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_1","text":"all (Boolean, default=true): Generates one representative sequence per zero mode waveguide (ZMW), irrespective of quality and passes by_strand (Boolean, default=false): Treats each strand of a ZMW (zero mode waveguide) as an individual entity and generates one consensus read for each strand that passes all filters. kinetics (Boolean, default=false): Generate SQIIe values.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_2","text":"consensus (File) report (File) report_json (File) metrics_json (File) hifi_summary_json (File)","title":"Outputs"},{"location":"tasks/PBUtils/#extracthifireads","text":"description Extract HiFi reads from a BAM file.","title":"ExtractHifiReads"},{"location":"tasks/PBUtils/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_3","text":"bam (File, required ): Input BAM file. library (String, required ): Library name, this will override the LB: entry on the @RG line sample_name (String, required ): Sample name, we always rely explicitly on input SM name","title":"Required"},{"location":"tasks/PBUtils/#optional_3","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_2","text":"prefix (String, default=\"hifi\"): Prefix for output files.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_3","text":"hifi_bam (File)","title":"Outputs"},{"location":"tasks/PBUtils/#mergeccsreports","text":"description Merge CCS reports from shards of a single BAM.","title":"MergeCCSReports"},{"location":"tasks/PBUtils/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_4","text":"reports (Array[File], required ): Input CCS reports.","title":"Required"},{"location":"tasks/PBUtils/#optional_4","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_3","text":"prefix (String, default=\"out\"): Prefix for output files.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_4","text":"report (File)","title":"Outputs"},{"location":"tasks/PBUtils/#demultiplex","text":"description Demultiplex reads in a multiplexed PacBio bam.","title":"Demultiplex"},{"location":"tasks/PBUtils/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_5","text":"bam (File, required ): Input BAM. barcode_file (File, required ): Input barcode file.","title":"Required"},{"location":"tasks/PBUtils/#optional_5","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_4","text":"ccs (Boolean, default=false): Input BAM is CCS. dump_removed (Boolean, default=false): Dump removed reads to a BAM file. guess (Int, default=0): Guess barcodes. guess_min_count (Int, default=0): Minimum number of reads to guess barcodes. isoseq (Boolean, default=false): Input BAM is IsoSeq. min_score (Int, default=0): Minimum barcode score. peek (Int, default=0): Looks at the first n ZMWs of the input and return the mean peek_guess (Boolean, default=false): Demultiplex Barcodes will run twice on the input data. For the first 50,000 ZMWs, it will guess the barcodes and store the mask of identified barcodes. In the second run, the barcode mask is used to demultiplex all ZMWs prefix (String, default=\"demux\"): Prefix for output files. split_bam_named (Boolean, default=false): Split BAM by barcode name.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_5","text":"demux_bams (Array[File]) counts (File) report (File) summary (File) clips (File?)","title":"Outputs"},{"location":"tasks/PBUtils/#makedetaileddemultiplexingreport","text":"description Make a detailed demultiplexing report.","title":"MakeDetailedDemultiplexingReport"},{"location":"tasks/PBUtils/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_6","text":"report (File, required ): Input report.","title":"Required"},{"location":"tasks/PBUtils/#optional_6","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_5","text":"type (String, default=\"png\"): Output file type (pdf or png).","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_6","text":"report_files (Array[File])","title":"Outputs"},{"location":"tasks/PBUtils/#makesummarizeddemultiplexingreport","text":"description Make a summarized demultiplexing report.","title":"MakeSummarizedDemultiplexingReport"},{"location":"tasks/PBUtils/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_7","text":"report (File, required ): Input report.","title":"Required"},{"location":"tasks/PBUtils/#optional_7","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#outputs_7","text":"report_files (Array[File])","title":"Outputs"},{"location":"tasks/PBUtils/#refinetranscriptreads","text":"description Refine transcript reads.","title":"RefineTranscriptReads"},{"location":"tasks/PBUtils/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_8","text":"bam (File, required ): Input BAM file. barcode_file (File, required ): Input barcode file.","title":"Required"},{"location":"tasks/PBUtils/#optional_8","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_6","text":"prefix (String, default=\"flnc\"): Prefix for output BAM file. require_polya (Boolean, default=true): Require polyA tail.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_8","text":"refined_bam (File)","title":"Outputs"},{"location":"tasks/PBUtils/#clustertranscripts","text":"description Cluster transcripts.","title":"ClusterTranscripts"},{"location":"tasks/PBUtils/#inputs_9","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_9","text":"bam (File, required ): Input BAM file.","title":"Required"},{"location":"tasks/PBUtils/#optional_9","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_7","text":"prefix (String, default=\"clustered\"): Prefix for output BAM file. use_qvs (Boolean, default=true): Use CCS Analysis Quality Values.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_9","text":"clustered_bam (File) clustered_pbi (File) hq_fasta (File) hq_bam (File) hq_pbi (File) lq_fasta (File) lq_bam (File) lq_pbi (File) cluster (File) cluster_report_csv (File) transcriptset_xml (File)","title":"Outputs"},{"location":"tasks/PBUtils/#align","text":"description Align reads to reference.","title":"Align"},{"location":"tasks/PBUtils/#inputs_10","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_10","text":"bam (File, required ): Input BAM file. drop_per_base_N_pulse_tags (Boolean, required ): Drop per-base N and pulse tags. map_preset (String, required ) ref_fasta (File, required ): Input reference FASTA file. sample_name (String, required ): we always rely explicitly on input SM name","title":"Required"},{"location":"tasks/PBUtils/#optional_10","text":"library (String?): this will override the LB: entry on the @RG line runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_8","text":"prefix (String, default=\"out\"): Prefix for output BAM file.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_10","text":"aligned_bam (File) aligned_bai (File)","title":"Outputs"},{"location":"tasks/PBUtils/#pbindex","text":"description Index a BAM file.","title":"PBIndex"},{"location":"tasks/PBUtils/#inputs_11","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_11","text":"bam (File, required ): Input BAM file.","title":"Required"},{"location":"tasks/PBUtils/#optional_11","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#outputs_11","text":"pbi (File)","title":"Outputs"},{"location":"tasks/PBUtils/#collapsetranscripts","text":"description Collapse transcripts using isoseq3.","title":"CollapseTranscripts"},{"location":"tasks/PBUtils/#inputs_12","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_12","text":"bam (File, required ): Input BAM file.","title":"Required"},{"location":"tasks/PBUtils/#optional_12","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_9","text":"prefix (String, default=\"out\"): Prefix for output files. use_qvs (Boolean, default=true): Use CCS Analysis Quality Values.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_12","text":"gff (File)","title":"Outputs"},{"location":"tasks/PBUtils/#summarizeccsreport","text":"description Summarize CCS report.","title":"SummarizeCCSReport"},{"location":"tasks/PBUtils/#inputs_13","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_13","text":"report (File, required ): Input CCS report.","title":"Required"},{"location":"tasks/PBUtils/#optional_13","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#outputs_13","text":"zmws_input (Float) zmws_pass_filters (Float) zmws_fail_filters (Float) zmws_shortcut_filters (Float) zmws_pass_filters_pct (Float) zmws_fail_filters_pct (Float) zmws_shortcut_filters_pct (Float)","title":"Outputs"},{"location":"tasks/PBUtils/#summarizepbi","text":"description Summarize PBI.","title":"SummarizePBI"},{"location":"tasks/PBUtils/#inputs_14","text":"","title":"Inputs"},{"location":"tasks/PBUtils/#required_14","text":"pbi (File, required ): Input PBI.","title":"Required"},{"location":"tasks/PBUtils/#optional_14","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/PBUtils/#defaults_10","text":"qual_threshold (Int, default=0): Quality threshold.","title":"Defaults"},{"location":"tasks/PBUtils/#outputs_14","text":"results (Map[String,Float])","title":"Outputs"},{"location":"tasks/Postprocessing_Tasks/","text":"Postprocessing_Tasks CreateCountMatrixFromAnnotatedBam description Creates a count matrix TSV file from the given annotated bam file. Bam file must contain tags that indicate the gene/transcript (XG), cell barcode (CB), and umi (BX) of the read. author Jonn Smith email jonn@broadinstitute.org Inputs Required annotated_transcriptome_bam (File, required ): Annotated transcriptome bam file. Must contain tags that indicate the gene/transcript (XG), cell barcode (CB), and umi (BX) of the read. Optional runtime_attr_override (RuntimeAttr?) tx_equivalence_class_assignments (File?): Optional file containing a list of equivalence classes for each transcript. Defaults prefix (String, default=\"umi_tools_group\"): Prefix for the output file. The output file will be named .tsv umi_tag (String, default=\"ZU\"): The tag that contains the umi. Default is ZU. Outputs count_matrix (File) CreateCountMatrixAnndataFromEquivalenceClasses description Creates a python anndata object from the given countmatrix tsv and equivalence classes. Expects the input to have been generated by CreateCountMatrixFromAnnotatedBam. The resulting anndata object can be directly read into scanpy for single-cell analysis. author Jonn Smith email jonn@broadinstitute.org Inputs Required count_matrix_tsv (File, required ): The TSV file containing the count matrix to convert to anndata. gene_equivalence_class_assignments (File, required ): The equivalence class assignments file to use for the anndata object. gene_equivalence_class_definitions (File, required ): The equivalence class definitions file to use for the anndata object. genome_annotation_gtf_file (File, required ): The GTF file containing the genome annotation. tx_equivalence_class_assignments (File, required ): The equivalence class assignments file to use for the anndata object. tx_equivalence_class_definitions (File, required ): The equivalence class definitions file to use for the anndata object. Optional gencode_reference_gtf_file (File?): The gencode reference GTF file overlap_interval_label (String?): The label to use for the overlap intervals. overlap_intervals (File?): Overlaping interval file. runtime_attr_override (RuntimeAttr?) Defaults force_anndata_gencode_overwrite (Boolean, default=false) prefix (String, default=\"umi_tools_group\"): The prefix to use for the output anndata object. Outputs transcript_gene_count_anndata_h5ad (File) pickles (Array[File]) QuantifyGffComparison description Create equivalence classes and gene assignments from a set of gffcompare results. author Jonn Smith email jonn@broadinstitute.org Inputs Required gencode_read_refmap (File, required ): Refmap file (produced by gffcompare) comparing the genome reference gtf to input reads (in GFF format). gencode_read_tmap (File, required ): Tmap file (produced by gffcompare) comparing the genome reference gtf to input reads (in GFF format). gencode_st2_refmap (File, required ): Refmap file (produced by gffcompare) comparing the genome reference gtf to the stringtie2 discovered transcriptome. gencode_st2_tmap (File, required ): Tmap file (produced by gffcompare) comparing the genome reference gtf to the stringtie2 discovered transcriptome. genome_gtf (File, required ): Genome annotation GTF file (usually gencode). st2_gencode_refmap (File, required ): Refmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to the genome reference gtf. st2_gencode_tmap (File, required ): Tmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to the genome reference gtf. st2_read_refmap (File, required ): Refmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to input reads (in GFF format). st2_read_tmap (File, required ): Tmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to input reads (in GFF format). Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"reads_comparison\"): Prefix for ouput file. Outputs gene_eq_class_labels_file (File) gene_assignments_file (File) tx_equivalence_class_labels_file (File) tx_equivalence_class_file (File) graph_gpickle (File) CombineEqClassFiles description Combine equivalence classes and gene assignments from disjoint sets of reads produced by QuantifyGffComparison. author Jonn Smith email jonn@broadinstitute.org Inputs Required equivalence_class_definitions (Array[File], required ): TSV files containing transcript equivalence class definitions as produced by QuantifyGffComparison.tx_equivalence_class_labels_file. equivalence_classes (Array[File], required ): TSV files containing read -> transcript equivalence class assignments as produced by QuantifyGffComparison.tx_equivalence_class_file. gene_assignment_files (Array[File], required ): TSV files containing read -> gene equivalence class assignments as produced by QuantifyGffComparison.gene_assignments_file. gene_eq_class_definitions (Array[File], required ): TSV files containing equivalence class definitions for genes as produced by QuantifyGffComparison.gene_eq_class_labels_file. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"combined\"): Prefix for ouput file. Outputs combined_gene_eq_class_defs (File) combined_gene_eq_class_assignments (File) combined_tx_eq_class_defs (File) combined_tx_eq_class_assignments (File) CopyEqClassInfoToTag description Copy the gene assignment for each given read into the given tag for each read. author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): BAM file containing reads to copy gene assignments into. eq_class_file (File, required ): TSV file containing read -> gene equivalence class assignments as produced by QuantifyGffComparison.gene_assignments_file. Optional runtime_attr_override (RuntimeAttr?) Defaults eq_class_tag (String, default=\"eq\"): Tag to copy gene equivalence class into. gene_tag (String, default=\"XG\"): Tag to copy gene assignment into. prefix (String, default=\"combined\"): Prefix for ouput file. Outputs bam_out (File) bai (File)","title":"Postprocessing_Tasks"},{"location":"tasks/Postprocessing_Tasks/#postprocessing_tasks","text":"","title":"Postprocessing_Tasks"},{"location":"tasks/Postprocessing_Tasks/#createcountmatrixfromannotatedbam","text":"description Creates a count matrix TSV file from the given annotated bam file. Bam file must contain tags that indicate the gene/transcript (XG), cell barcode (CB), and umi (BX) of the read. author Jonn Smith email jonn@broadinstitute.org","title":"CreateCountMatrixFromAnnotatedBam"},{"location":"tasks/Postprocessing_Tasks/#inputs","text":"","title":"Inputs"},{"location":"tasks/Postprocessing_Tasks/#required","text":"annotated_transcriptome_bam (File, required ): Annotated transcriptome bam file. Must contain tags that indicate the gene/transcript (XG), cell barcode (CB), and umi (BX) of the read.","title":"Required"},{"location":"tasks/Postprocessing_Tasks/#optional","text":"runtime_attr_override (RuntimeAttr?) tx_equivalence_class_assignments (File?): Optional file containing a list of equivalence classes for each transcript.","title":"Optional"},{"location":"tasks/Postprocessing_Tasks/#defaults","text":"prefix (String, default=\"umi_tools_group\"): Prefix for the output file. The output file will be named .tsv umi_tag (String, default=\"ZU\"): The tag that contains the umi. Default is ZU.","title":"Defaults"},{"location":"tasks/Postprocessing_Tasks/#outputs","text":"count_matrix (File)","title":"Outputs"},{"location":"tasks/Postprocessing_Tasks/#createcountmatrixanndatafromequivalenceclasses","text":"description Creates a python anndata object from the given countmatrix tsv and equivalence classes. Expects the input to have been generated by CreateCountMatrixFromAnnotatedBam. The resulting anndata object can be directly read into scanpy for single-cell analysis. author Jonn Smith email jonn@broadinstitute.org","title":"CreateCountMatrixAnndataFromEquivalenceClasses"},{"location":"tasks/Postprocessing_Tasks/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Postprocessing_Tasks/#required_1","text":"count_matrix_tsv (File, required ): The TSV file containing the count matrix to convert to anndata. gene_equivalence_class_assignments (File, required ): The equivalence class assignments file to use for the anndata object. gene_equivalence_class_definitions (File, required ): The equivalence class definitions file to use for the anndata object. genome_annotation_gtf_file (File, required ): The GTF file containing the genome annotation. tx_equivalence_class_assignments (File, required ): The equivalence class assignments file to use for the anndata object. tx_equivalence_class_definitions (File, required ): The equivalence class definitions file to use for the anndata object.","title":"Required"},{"location":"tasks/Postprocessing_Tasks/#optional_1","text":"gencode_reference_gtf_file (File?): The gencode reference GTF file overlap_interval_label (String?): The label to use for the overlap intervals. overlap_intervals (File?): Overlaping interval file. runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Postprocessing_Tasks/#defaults_1","text":"force_anndata_gencode_overwrite (Boolean, default=false) prefix (String, default=\"umi_tools_group\"): The prefix to use for the output anndata object.","title":"Defaults"},{"location":"tasks/Postprocessing_Tasks/#outputs_1","text":"transcript_gene_count_anndata_h5ad (File) pickles (Array[File])","title":"Outputs"},{"location":"tasks/Postprocessing_Tasks/#quantifygffcomparison","text":"description Create equivalence classes and gene assignments from a set of gffcompare results. author Jonn Smith email jonn@broadinstitute.org","title":"QuantifyGffComparison"},{"location":"tasks/Postprocessing_Tasks/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/Postprocessing_Tasks/#required_2","text":"gencode_read_refmap (File, required ): Refmap file (produced by gffcompare) comparing the genome reference gtf to input reads (in GFF format). gencode_read_tmap (File, required ): Tmap file (produced by gffcompare) comparing the genome reference gtf to input reads (in GFF format). gencode_st2_refmap (File, required ): Refmap file (produced by gffcompare) comparing the genome reference gtf to the stringtie2 discovered transcriptome. gencode_st2_tmap (File, required ): Tmap file (produced by gffcompare) comparing the genome reference gtf to the stringtie2 discovered transcriptome. genome_gtf (File, required ): Genome annotation GTF file (usually gencode). st2_gencode_refmap (File, required ): Refmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to the genome reference gtf. st2_gencode_tmap (File, required ): Tmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to the genome reference gtf. st2_read_refmap (File, required ): Refmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to input reads (in GFF format). st2_read_tmap (File, required ): Tmap file (produced by gffcompare) comparing the stringtie2 discovered transcriptome to input reads (in GFF format).","title":"Required"},{"location":"tasks/Postprocessing_Tasks/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Postprocessing_Tasks/#defaults_2","text":"prefix (String, default=\"reads_comparison\"): Prefix for ouput file.","title":"Defaults"},{"location":"tasks/Postprocessing_Tasks/#outputs_2","text":"gene_eq_class_labels_file (File) gene_assignments_file (File) tx_equivalence_class_labels_file (File) tx_equivalence_class_file (File) graph_gpickle (File)","title":"Outputs"},{"location":"tasks/Postprocessing_Tasks/#combineeqclassfiles","text":"description Combine equivalence classes and gene assignments from disjoint sets of reads produced by QuantifyGffComparison. author Jonn Smith email jonn@broadinstitute.org","title":"CombineEqClassFiles"},{"location":"tasks/Postprocessing_Tasks/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/Postprocessing_Tasks/#required_3","text":"equivalence_class_definitions (Array[File], required ): TSV files containing transcript equivalence class definitions as produced by QuantifyGffComparison.tx_equivalence_class_labels_file. equivalence_classes (Array[File], required ): TSV files containing read -> transcript equivalence class assignments as produced by QuantifyGffComparison.tx_equivalence_class_file. gene_assignment_files (Array[File], required ): TSV files containing read -> gene equivalence class assignments as produced by QuantifyGffComparison.gene_assignments_file. gene_eq_class_definitions (Array[File], required ): TSV files containing equivalence class definitions for genes as produced by QuantifyGffComparison.gene_eq_class_labels_file.","title":"Required"},{"location":"tasks/Postprocessing_Tasks/#optional_3","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Postprocessing_Tasks/#defaults_3","text":"prefix (String, default=\"combined\"): Prefix for ouput file.","title":"Defaults"},{"location":"tasks/Postprocessing_Tasks/#outputs_3","text":"combined_gene_eq_class_defs (File) combined_gene_eq_class_assignments (File) combined_tx_eq_class_defs (File) combined_tx_eq_class_assignments (File)","title":"Outputs"},{"location":"tasks/Postprocessing_Tasks/#copyeqclassinfototag","text":"description Copy the gene assignment for each given read into the given tag for each read. author Jonn Smith email jonn@broadinstitute.org","title":"CopyEqClassInfoToTag"},{"location":"tasks/Postprocessing_Tasks/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/Postprocessing_Tasks/#required_4","text":"bam (File, required ): BAM file containing reads to copy gene assignments into. eq_class_file (File, required ): TSV file containing read -> gene equivalence class assignments as produced by QuantifyGffComparison.gene_assignments_file.","title":"Required"},{"location":"tasks/Postprocessing_Tasks/#optional_4","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Postprocessing_Tasks/#defaults_4","text":"eq_class_tag (String, default=\"eq\"): Tag to copy gene equivalence class into. gene_tag (String, default=\"XG\"): Tag to copy gene assignment into. prefix (String, default=\"combined\"): Prefix for ouput file.","title":"Defaults"},{"location":"tasks/Postprocessing_Tasks/#outputs_4","text":"bam_out (File) bai (File)","title":"Outputs"},{"location":"tasks/Preprocessing_Tasks/","text":"Preprocessing_Tasks DemuxMasSeqDataByIndex description This workflow will split MAS-seq data that is indexed with a 10bp sequence at the 3' end. author Jonn Smith email jonn@broadinstitute.org Inputs Required array_bam (File, required ): Bam file containing annotated MAS-seq array reads that contain a 10bp index near the 3' end.. Outputs demux_i1 (File) demux_i2 (File) demux_i3 (File) demux_i4 (File) demux_ambiguous (File) log_file (File) ConvertSplicedBamToGff description Convert a given splice aligned bam file into a gff file. author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): Bamfile to be converted to gff. Optional runtime_attr_override (RuntimeAttr?) Outputs gff (File) GffCompare description Compare two GFF files author Jonn Smith email jonn@broadinstitute.org Inputs Required gff_query (File, required ): Gff file to be used as a query (compared against the gff_ref). gff_ref (File, required ): Gff file to be used as a reference. ref_fasta (File, required ): Reference fasta file. Optional ref_fasta_index (File?): Reference fasta file index. runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs refmap (File) tmap (File) tracking (File) loci (File) annotated_gtf (File) stats (File) log (File) RestoreOriginalReadNames description Copies the contents of the XM tag to the read name and sets the XM tag to the read name. author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): Bam file in which to restore the original read names. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs bam_out (File) bai_out (File) CorrectUmisWithSetCover description Corrects the UMIs in the given reads using a set cover algorithm author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): Bam file for which to correct UMIs. Optional runtime_attr_override (RuntimeAttr?) Defaults is_extracted (Boolean, default=true) prefix (String, default=\"out\"): Prefix to assign to output files. Outputs corrected_umi_reads (File) corrected_umi_reads_index (File) uncorrected_umi_reads (File)","title":"Preprocessing_Tasks"},{"location":"tasks/Preprocessing_Tasks/#preprocessing_tasks","text":"","title":"Preprocessing_Tasks"},{"location":"tasks/Preprocessing_Tasks/#demuxmasseqdatabyindex","text":"description This workflow will split MAS-seq data that is indexed with a 10bp sequence at the 3' end. author Jonn Smith email jonn@broadinstitute.org","title":"DemuxMasSeqDataByIndex"},{"location":"tasks/Preprocessing_Tasks/#inputs","text":"","title":"Inputs"},{"location":"tasks/Preprocessing_Tasks/#required","text":"array_bam (File, required ): Bam file containing annotated MAS-seq array reads that contain a 10bp index near the 3' end..","title":"Required"},{"location":"tasks/Preprocessing_Tasks/#outputs","text":"demux_i1 (File) demux_i2 (File) demux_i3 (File) demux_i4 (File) demux_ambiguous (File) log_file (File)","title":"Outputs"},{"location":"tasks/Preprocessing_Tasks/#convertsplicedbamtogff","text":"description Convert a given splice aligned bam file into a gff file. author Jonn Smith email jonn@broadinstitute.org","title":"ConvertSplicedBamToGff"},{"location":"tasks/Preprocessing_Tasks/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Preprocessing_Tasks/#required_1","text":"bam (File, required ): Bamfile to be converted to gff.","title":"Required"},{"location":"tasks/Preprocessing_Tasks/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Preprocessing_Tasks/#outputs_1","text":"gff (File)","title":"Outputs"},{"location":"tasks/Preprocessing_Tasks/#gffcompare","text":"description Compare two GFF files author Jonn Smith email jonn@broadinstitute.org","title":"GffCompare"},{"location":"tasks/Preprocessing_Tasks/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/Preprocessing_Tasks/#required_2","text":"gff_query (File, required ): Gff file to be used as a query (compared against the gff_ref). gff_ref (File, required ): Gff file to be used as a reference. ref_fasta (File, required ): Reference fasta file.","title":"Required"},{"location":"tasks/Preprocessing_Tasks/#optional_1","text":"ref_fasta_index (File?): Reference fasta file index. runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Preprocessing_Tasks/#defaults","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/Preprocessing_Tasks/#outputs_2","text":"refmap (File) tmap (File) tracking (File) loci (File) annotated_gtf (File) stats (File) log (File)","title":"Outputs"},{"location":"tasks/Preprocessing_Tasks/#restoreoriginalreadnames","text":"description Copies the contents of the XM tag to the read name and sets the XM tag to the read name. author Jonn Smith email jonn@broadinstitute.org","title":"RestoreOriginalReadNames"},{"location":"tasks/Preprocessing_Tasks/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/Preprocessing_Tasks/#required_3","text":"bam (File, required ): Bam file in which to restore the original read names.","title":"Required"},{"location":"tasks/Preprocessing_Tasks/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Preprocessing_Tasks/#defaults_1","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/Preprocessing_Tasks/#outputs_3","text":"bam_out (File) bai_out (File)","title":"Outputs"},{"location":"tasks/Preprocessing_Tasks/#correctumiswithsetcover","text":"description Corrects the UMIs in the given reads using a set cover algorithm author Jonn Smith email jonn@broadinstitute.org","title":"CorrectUmisWithSetCover"},{"location":"tasks/Preprocessing_Tasks/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/Preprocessing_Tasks/#required_4","text":"bam (File, required ): Bam file for which to correct UMIs.","title":"Required"},{"location":"tasks/Preprocessing_Tasks/#optional_3","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Preprocessing_Tasks/#defaults_2","text":"is_extracted (Boolean, default=true) prefix (String, default=\"out\"): Prefix to assign to output files.","title":"Defaults"},{"location":"tasks/Preprocessing_Tasks/#outputs_4","text":"corrected_umi_reads (File) corrected_umi_reads_index (File) uncorrected_umi_reads (File)","title":"Outputs"},{"location":"tasks/QCAssessment/","text":"QCAssessment AssessQualityMetrics description Assess quality metrics from mosdepth coverage and callable loci data to determine pass/fail status. To pass, the fraction of callable bases must be greater than min_callable_fraction and at least min_coverage_threshold_regions fraction of the genome must have a coverage depth greater than min_coverage. Inputs Required callable_loci_summary (File, required ): Summary file from GATK CallableLoci mosdepth_region_bed (File, required ): Region bed file from mosdepth prefix (String, required ): Prefix for output files Optional runtime_attr_override (RuntimeAttr?) Defaults min_callable_fraction (Float, default=0.5): Minimum required fraction of genome that is callable min_coverage (Float, default=5): Minimum required mean coverage depth min_coverage_threshold_regions (Float, default=0.2): Minimum required fraction of genome that must have a coverage depth greater than min_coverage Outputs qc_status (String) qc_message (String)","title":"QCAssessment"},{"location":"tasks/QCAssessment/#qcassessment","text":"","title":"QCAssessment"},{"location":"tasks/QCAssessment/#assessqualitymetrics","text":"description Assess quality metrics from mosdepth coverage and callable loci data to determine pass/fail status. To pass, the fraction of callable bases must be greater than min_callable_fraction and at least min_coverage_threshold_regions fraction of the genome must have a coverage depth greater than min_coverage.","title":"AssessQualityMetrics"},{"location":"tasks/QCAssessment/#inputs","text":"","title":"Inputs"},{"location":"tasks/QCAssessment/#required","text":"callable_loci_summary (File, required ): Summary file from GATK CallableLoci mosdepth_region_bed (File, required ): Region bed file from mosdepth prefix (String, required ): Prefix for output files","title":"Required"},{"location":"tasks/QCAssessment/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/QCAssessment/#defaults","text":"min_callable_fraction (Float, default=0.5): Minimum required fraction of genome that is callable min_coverage (Float, default=5): Minimum required mean coverage depth min_coverage_threshold_regions (Float, default=0.2): Minimum required fraction of genome that must have a coverage depth greater than min_coverage","title":"Defaults"},{"location":"tasks/QCAssessment/#outputs","text":"qc_status (String) qc_message (String)","title":"Outputs"},{"location":"tasks/Quast/","text":"Quast Quast description A task that runs QUAST to evaluate a given set of assemblies on a species with existing reference assembly. Entire Quast output will be tarballed Inputs Required assemblies (Array[File], required ): list of assemblies to evaluate Optional ref (File?): reference assembly of the species runtime_attr_override (RuntimeAttr?) Defaults is_large (Boolean, default=false) Outputs report_txt (File) report_html (File) report_in_various_formats (Array[File]) plots (Array[File]) contigs_reports (File?) SummarizeQuastReport description A task that summarizes the QUAST report into a single tab-delimited file Inputs Required quast_report_txt (File, required ): the QUAST report file Outputs quast_metrics_together (File) quast_metrics (Array[File])","title":"Quast"},{"location":"tasks/Quast/#quast","text":"","title":"Quast"},{"location":"tasks/Quast/#quast_1","text":"description A task that runs QUAST to evaluate a given set of assemblies on a species with existing reference assembly. Entire Quast output will be tarballed","title":"Quast"},{"location":"tasks/Quast/#inputs","text":"","title":"Inputs"},{"location":"tasks/Quast/#required","text":"assemblies (Array[File], required ): list of assemblies to evaluate","title":"Required"},{"location":"tasks/Quast/#optional","text":"ref (File?): reference assembly of the species runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Quast/#defaults","text":"is_large (Boolean, default=false)","title":"Defaults"},{"location":"tasks/Quast/#outputs","text":"report_txt (File) report_html (File) report_in_various_formats (Array[File]) plots (Array[File]) contigs_reports (File?)","title":"Outputs"},{"location":"tasks/Quast/#summarizequastreport","text":"description A task that summarizes the QUAST report into a single tab-delimited file","title":"SummarizeQuastReport"},{"location":"tasks/Quast/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Quast/#required_1","text":"quast_report_txt (File, required ): the QUAST report file","title":"Required"},{"location":"tasks/Quast/#outputs_1","text":"quast_metrics_together (File) quast_metrics (Array[File])","title":"Outputs"},{"location":"tasks/SGKit/","text":"SGKit ConvertToZarrStore description Convert a .vcf.bgz file to a Zarr store and copy it to a final gs:// URL. Inputs Required tbi (File, required ) vcf (File, required ) Optional ref_fai (String?) ref_fasta (String?) runtime_attr_override (RuntimeAttr?) Defaults num_cpus (Int, default=4) prefix (String, default=\"out\") reference (String, default=\"GRCh38\") Outputs zarr (File)","title":"SGKit"},{"location":"tasks/SGKit/#sgkit","text":"","title":"SGKit"},{"location":"tasks/SGKit/#converttozarrstore","text":"description Convert a .vcf.bgz file to a Zarr store and copy it to a final gs:// URL.","title":"ConvertToZarrStore"},{"location":"tasks/SGKit/#inputs","text":"","title":"Inputs"},{"location":"tasks/SGKit/#required","text":"tbi (File, required ) vcf (File, required )","title":"Required"},{"location":"tasks/SGKit/#optional","text":"ref_fai (String?) ref_fasta (String?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SGKit/#defaults","text":"num_cpus (Int, default=4) prefix (String, default=\"out\") reference (String, default=\"GRCh38\")","title":"Defaults"},{"location":"tasks/SGKit/#outputs","text":"zarr (File)","title":"Outputs"},{"location":"tasks/SRJointGenotyping/","text":"SRJointGenotyping CreateSampleNameMap description Creates the sample / name-map file of the GVCFs for ingest into ImportGVCFs. NOTE: Some of this functionality is duplicated from Utils.InferSampleName. This is intentional - we don't want to localize all these files or shard over potentially thousands of input GVCFs. Inputs Required gvcfs (Array[File], required ): Array of single-sample GVCF files.; localization_optional : true prefix (String, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults background_sample_gvcfs (Array[File], default=[]): Array of single-sample GVCF files to use as background samples for joint calling.; localization_optional : true Outputs sample_name_map (File) total_gvcf_size_gb (Int) ImportGVCFs Inputs Required interval_list (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_name_map (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults batch_size (Int, default=50) Outputs output_genomicsdb (File) GenotypeGVCFs Inputs Required input_gvcf_data (File, required ): Either a single GVCF file or a GenomicsDB Tar file. interval_list (File, required ); localization_optional : true prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) Optional dbsnp_vcf (String?) input_gvcf_index (File?) runtime_attr_override (RuntimeAttr?) Defaults heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) keep_combined_raw_annotations (Boolean, default=false) Outputs output_vcf (File) output_vcf_index (File) GnarlyGenotypeGVCFs Inputs Required input_gvcf_data (File, required ): Either a single GVCF file or a GenomicsDB Tar file. interval_list (File, required ); localization_optional : true prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) Optional dbsnp_vcf (String?) input_gvcf_index (File?) runtime_attr_override (RuntimeAttr?) Defaults heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) keep_combined_raw_annotations (Boolean, default=false) Outputs output_vcf (File) output_vcf_index (File)","title":"SRJointGenotyping"},{"location":"tasks/SRJointGenotyping/#srjointgenotyping","text":"","title":"SRJointGenotyping"},{"location":"tasks/SRJointGenotyping/#createsamplenamemap","text":"description Creates the sample / name-map file of the GVCFs for ingest into ImportGVCFs. NOTE: Some of this functionality is duplicated from Utils.InferSampleName. This is intentional - we don't want to localize all these files or shard over potentially thousands of input GVCFs.","title":"CreateSampleNameMap"},{"location":"tasks/SRJointGenotyping/#inputs","text":"","title":"Inputs"},{"location":"tasks/SRJointGenotyping/#required","text":"gvcfs (Array[File], required ): Array of single-sample GVCF files.; localization_optional : true prefix (String, required )","title":"Required"},{"location":"tasks/SRJointGenotyping/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRJointGenotyping/#defaults","text":"background_sample_gvcfs (Array[File], default=[]): Array of single-sample GVCF files to use as background samples for joint calling.; localization_optional : true","title":"Defaults"},{"location":"tasks/SRJointGenotyping/#outputs","text":"sample_name_map (File) total_gvcf_size_gb (Int)","title":"Outputs"},{"location":"tasks/SRJointGenotyping/#importgvcfs","text":"","title":"ImportGVCFs"},{"location":"tasks/SRJointGenotyping/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/SRJointGenotyping/#required_1","text":"interval_list (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_name_map (File, required )","title":"Required"},{"location":"tasks/SRJointGenotyping/#optional_1","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRJointGenotyping/#defaults_1","text":"batch_size (Int, default=50)","title":"Defaults"},{"location":"tasks/SRJointGenotyping/#outputs_1","text":"output_genomicsdb (File)","title":"Outputs"},{"location":"tasks/SRJointGenotyping/#genotypegvcfs","text":"","title":"GenotypeGVCFs"},{"location":"tasks/SRJointGenotyping/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/SRJointGenotyping/#required_2","text":"input_gvcf_data (File, required ): Either a single GVCF file or a GenomicsDB Tar file. interval_list (File, required ); localization_optional : true prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/SRJointGenotyping/#optional_2","text":"dbsnp_vcf (String?) input_gvcf_index (File?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRJointGenotyping/#defaults_2","text":"heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) keep_combined_raw_annotations (Boolean, default=false)","title":"Defaults"},{"location":"tasks/SRJointGenotyping/#outputs_2","text":"output_vcf (File) output_vcf_index (File)","title":"Outputs"},{"location":"tasks/SRJointGenotyping/#gnarlygenotypegvcfs","text":"","title":"GnarlyGenotypeGVCFs"},{"location":"tasks/SRJointGenotyping/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/SRJointGenotyping/#required_3","text":"input_gvcf_data (File, required ): Either a single GVCF file or a GenomicsDB Tar file. interval_list (File, required ); localization_optional : true prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/SRJointGenotyping/#optional_3","text":"dbsnp_vcf (String?) input_gvcf_index (File?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRJointGenotyping/#defaults_3","text":"heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) keep_combined_raw_annotations (Boolean, default=false)","title":"Defaults"},{"location":"tasks/SRJointGenotyping/#outputs_3","text":"output_vcf (File) output_vcf_index (File)","title":"Outputs"},{"location":"tasks/SRUtils/","text":"SRUtils BamToFq Inputs Required bam (File, required ) Optional bam_index (File?) reference_dict (File?) reference_fasta (File?) reference_fasta_index (File?) runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs fq_end1 (File) fq_end2 (File) fq_unpaired (File) FixMate Inputs Required input_bam (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs bam (File) Bam2FqPicard Inputs Required bam (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs fastq (File) BwaMem2 Inputs Required fq_end1 (File, required ) fq_end2 (File, required ) ref_0123 (File, required ) ref_amb (File, required ) ref_ann (File, required ) ref_bwt (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) ref_pac (File, required ) Optional read_group (String?) runtime_attr_override (RuntimeAttr?) Defaults mark_short_splits_as_secondary (Boolean, default=false) prefix (String, default=\"out\") Outputs bam (File) Bowtie2 Inputs Required fq_end1 (File, required ): FASTQ file containing end 1 of reads. fq_end2 (File, required ): FASTQ file containing end 2 of reads. prefix (String, required ): Prefix for output files. ref_bowtie_indices (Array[File], required ): Bowtie2 indices for the given genome. ref_fasta (File, required ): Reference FASTA file for the genome of the organism to which to align reads. ref_fasta_index (File, required ): Reference FASTA index file for the genome of the organism to which to align reads. Optional rg_id (String?) rg_lb (String?) rg_pl (String?) rg_sm (String?) runtime_attr_override (RuntimeAttr?): Optional override for runtime attributes. Defaults skip_sort (Boolean, default=false) Outputs bam (File) bai (File) MergeBamAlignment Inputs Required aligned_bam (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) unaligned_bam (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs bam (File) MarkDuplicates Inputs Required input_bam (File, required ) prefix (String, required ) Optional read_name_regex (String?) runtime_attr_override (RuntimeAttr?) sorting_collection_size_ratio (Float?) Outputs bam (File) metrics (File) BaseRecalibrator Inputs Required input_bam (File, required ); localization_optional : true input_bam_index (File, required ) known_sites_index (File, required ) known_sites_vcf (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs recalibration_report (File) ApplyBQSR Inputs Required input_bam (File, required ); localization_optional : true input_bam_index (File, required ) prefix (String, required ) recalibration_report (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults bin_base_qualities (Boolean, default=true) emit_original_quals (Boolean, default=true) Outputs recalibrated_bam (File) recalibrated_bai (File) RevertSam Inputs Required input_bam (File, required ) prefix (String, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs bam (File) ComputeBamStats Inputs Required bam_file (File, required ) Optional qual_threshold (Int?) runtime_attr_override (RuntimeAttr?) Outputs results (Map[String,Float]) results_file (File) MergeVCFs description Combine multiple VCFs or GVCFs from scattered HaplotypeCaller runs Inputs Required input_vcfs (Array[File], required ) input_vcfs_indexes (Array[File], required ) prefix (String, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults is_gvcf (Boolean, default=false) Outputs output_vcf (File) output_vcf_index (File) IndexFeatureFile description Create a Tribble index for a feature file using GATK. Feature files are defined inside GATK and include VCF, BED, GTF, and other files. Inputs Required feature_file (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs index (File) RevertBaseQualities description Replace base qualities in the bam file with those located in the OQ tag. If ApplyBQSR has not been run on the given bam file, no changes are made and the original file is returned. Inputs Required bam (File, required ) prefix (String, required ) Optional bai (File?) runtime_attr_override (RuntimeAttr?) Outputs bam_out (File) bai_out (File)","title":"SRUtils"},{"location":"tasks/SRUtils/#srutils","text":"","title":"SRUtils"},{"location":"tasks/SRUtils/#bamtofq","text":"","title":"BamToFq"},{"location":"tasks/SRUtils/#inputs","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required","text":"bam (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional","text":"bam_index (File?) reference_dict (File?) reference_fasta (File?) reference_fasta_index (File?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/SRUtils/#outputs","text":"fq_end1 (File) fq_end2 (File) fq_unpaired (File)","title":"Outputs"},{"location":"tasks/SRUtils/#fixmate","text":"","title":"FixMate"},{"location":"tasks/SRUtils/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_1","text":"input_bam (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_1","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_1","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_1","text":"bam (File)","title":"Outputs"},{"location":"tasks/SRUtils/#bam2fqpicard","text":"","title":"Bam2FqPicard"},{"location":"tasks/SRUtils/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_2","text":"bam (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_2","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_2","text":"fastq (File)","title":"Outputs"},{"location":"tasks/SRUtils/#bwamem2","text":"","title":"BwaMem2"},{"location":"tasks/SRUtils/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_3","text":"fq_end1 (File, required ) fq_end2 (File, required ) ref_0123 (File, required ) ref_amb (File, required ) ref_ann (File, required ) ref_bwt (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) ref_pac (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_3","text":"read_group (String?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_3","text":"mark_short_splits_as_secondary (Boolean, default=false) prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_3","text":"bam (File)","title":"Outputs"},{"location":"tasks/SRUtils/#bowtie2","text":"","title":"Bowtie2"},{"location":"tasks/SRUtils/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_4","text":"fq_end1 (File, required ): FASTQ file containing end 1 of reads. fq_end2 (File, required ): FASTQ file containing end 2 of reads. prefix (String, required ): Prefix for output files. ref_bowtie_indices (Array[File], required ): Bowtie2 indices for the given genome. ref_fasta (File, required ): Reference FASTA file for the genome of the organism to which to align reads. ref_fasta_index (File, required ): Reference FASTA index file for the genome of the organism to which to align reads.","title":"Required"},{"location":"tasks/SRUtils/#optional_4","text":"rg_id (String?) rg_lb (String?) rg_pl (String?) rg_sm (String?) runtime_attr_override (RuntimeAttr?): Optional override for runtime attributes.","title":"Optional"},{"location":"tasks/SRUtils/#defaults_4","text":"skip_sort (Boolean, default=false)","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_4","text":"bam (File) bai (File)","title":"Outputs"},{"location":"tasks/SRUtils/#mergebamalignment","text":"","title":"MergeBamAlignment"},{"location":"tasks/SRUtils/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_5","text":"aligned_bam (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required ) unaligned_bam (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_5","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_5","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_5","text":"bam (File)","title":"Outputs"},{"location":"tasks/SRUtils/#markduplicates","text":"","title":"MarkDuplicates"},{"location":"tasks/SRUtils/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_6","text":"input_bam (File, required ) prefix (String, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_6","text":"read_name_regex (String?) runtime_attr_override (RuntimeAttr?) sorting_collection_size_ratio (Float?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_6","text":"bam (File) metrics (File)","title":"Outputs"},{"location":"tasks/SRUtils/#baserecalibrator","text":"","title":"BaseRecalibrator"},{"location":"tasks/SRUtils/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_7","text":"input_bam (File, required ); localization_optional : true input_bam_index (File, required ) known_sites_index (File, required ) known_sites_vcf (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_7","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_7","text":"recalibration_report (File)","title":"Outputs"},{"location":"tasks/SRUtils/#applybqsr","text":"","title":"ApplyBQSR"},{"location":"tasks/SRUtils/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_8","text":"input_bam (File, required ); localization_optional : true input_bam_index (File, required ) prefix (String, required ) recalibration_report (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_index (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_8","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_6","text":"bin_base_qualities (Boolean, default=true) emit_original_quals (Boolean, default=true)","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_8","text":"recalibrated_bam (File) recalibrated_bai (File)","title":"Outputs"},{"location":"tasks/SRUtils/#revertsam","text":"","title":"RevertSam"},{"location":"tasks/SRUtils/#inputs_9","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_9","text":"input_bam (File, required ) prefix (String, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_9","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_9","text":"bam (File)","title":"Outputs"},{"location":"tasks/SRUtils/#computebamstats","text":"","title":"ComputeBamStats"},{"location":"tasks/SRUtils/#inputs_10","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_10","text":"bam_file (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_10","text":"qual_threshold (Int?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_10","text":"results (Map[String,Float]) results_file (File)","title":"Outputs"},{"location":"tasks/SRUtils/#mergevcfs","text":"description Combine multiple VCFs or GVCFs from scattered HaplotypeCaller runs","title":"MergeVCFs"},{"location":"tasks/SRUtils/#inputs_11","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_11","text":"input_vcfs (Array[File], required ) input_vcfs_indexes (Array[File], required ) prefix (String, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_11","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#defaults_7","text":"is_gvcf (Boolean, default=false)","title":"Defaults"},{"location":"tasks/SRUtils/#outputs_11","text":"output_vcf (File) output_vcf_index (File)","title":"Outputs"},{"location":"tasks/SRUtils/#indexfeaturefile","text":"description Create a Tribble index for a feature file using GATK. Feature files are defined inside GATK and include VCF, BED, GTF, and other files.","title":"IndexFeatureFile"},{"location":"tasks/SRUtils/#inputs_12","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_12","text":"feature_file (File, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_12","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_12","text":"index (File)","title":"Outputs"},{"location":"tasks/SRUtils/#revertbasequalities","text":"description Replace base qualities in the bam file with those located in the OQ tag. If ApplyBQSR has not been run on the given bam file, no changes are made and the original file is returned.","title":"RevertBaseQualities"},{"location":"tasks/SRUtils/#inputs_13","text":"","title":"Inputs"},{"location":"tasks/SRUtils/#required_13","text":"bam (File, required ) prefix (String, required )","title":"Required"},{"location":"tasks/SRUtils/#optional_13","text":"bai (File?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/SRUtils/#outputs_13","text":"bam_out (File) bai_out (File)","title":"Outputs"},{"location":"tasks/StringTie2/","text":"StringTie2 Quantify description Quantify gene expression using StringTie2. Inputs Required aligned_bai (File, required ): Aligned reads in BAI format. aligned_bam (File, required ): Aligned reads in BAM format. gtf (File, required ): Reference GTF file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults keep_retained_introns (Boolean, default=false): Keep retained introns. prefix (String, default=\"out\"): Prefix for output files. Outputs st_gtf (File) st_abund (File) ExtractTranscriptSequences description Extract transcript sequences from a GTF file. Inputs Required gtf (File, required ): Reference GTF file. ref_fasta (File, required ): Reference FASTA file. ref_fasta_fai (File, required ): Reference FASTA index file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for output files. Outputs transcripts_fa (File) transcripts_fai (File) transcripts_dict (File) CompareTranscriptomes description Compare two GTF files. Inputs Required guide_gtf (File, required ): Reference GTF file. new_gtf (File, required ): New GTF file. Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for output files. Outputs annotated_gtf (File) loci (File) tracking (File) refmap (File) tmap (File) stats (File)","title":"StringTie2"},{"location":"tasks/StringTie2/#stringtie2","text":"","title":"StringTie2"},{"location":"tasks/StringTie2/#quantify","text":"description Quantify gene expression using StringTie2.","title":"Quantify"},{"location":"tasks/StringTie2/#inputs","text":"","title":"Inputs"},{"location":"tasks/StringTie2/#required","text":"aligned_bai (File, required ): Aligned reads in BAI format. aligned_bam (File, required ): Aligned reads in BAM format. gtf (File, required ): Reference GTF file.","title":"Required"},{"location":"tasks/StringTie2/#optional","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/StringTie2/#defaults","text":"keep_retained_introns (Boolean, default=false): Keep retained introns. prefix (String, default=\"out\"): Prefix for output files.","title":"Defaults"},{"location":"tasks/StringTie2/#outputs","text":"st_gtf (File) st_abund (File)","title":"Outputs"},{"location":"tasks/StringTie2/#extracttranscriptsequences","text":"description Extract transcript sequences from a GTF file.","title":"ExtractTranscriptSequences"},{"location":"tasks/StringTie2/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/StringTie2/#required_1","text":"gtf (File, required ): Reference GTF file. ref_fasta (File, required ): Reference FASTA file. ref_fasta_fai (File, required ): Reference FASTA index file.","title":"Required"},{"location":"tasks/StringTie2/#optional_1","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/StringTie2/#defaults_1","text":"prefix (String, default=\"out\"): Prefix for output files.","title":"Defaults"},{"location":"tasks/StringTie2/#outputs_1","text":"transcripts_fa (File) transcripts_fai (File) transcripts_dict (File)","title":"Outputs"},{"location":"tasks/StringTie2/#comparetranscriptomes","text":"description Compare two GTF files.","title":"CompareTranscriptomes"},{"location":"tasks/StringTie2/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/StringTie2/#required_2","text":"guide_gtf (File, required ): Reference GTF file. new_gtf (File, required ): New GTF file.","title":"Required"},{"location":"tasks/StringTie2/#optional_2","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes.","title":"Optional"},{"location":"tasks/StringTie2/#defaults_2","text":"prefix (String, default=\"out\"): Prefix for output files.","title":"Defaults"},{"location":"tasks/StringTie2/#outputs_2","text":"annotated_gtf (File) loci (File) tracking (File) refmap (File) tmap (File) stats (File)","title":"Outputs"},{"location":"tasks/Utils/","text":"Utils ChunkManifest description Chunk a manifest file into smaller files Inputs Required manifest (File, required ): The manifest file to chunk manifest_lines_per_chunk (Int, required ): The number of lines to include in each chunk Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs manifest_chunks (Array[File]) SortSam description Sort a BAM file by coordinate order Inputs Required input_bam (File, required ): The BAM file to sort prefix (String, required ): The basename for the output BAM file Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs output_bam (File) output_bam_index (File) MakeChrIntervalList description Make a Picard-style list of intervals for each chromosome in the reference genome Inputs Required ref_dict (File, required ): The reference dictionary Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Defaults filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']): A list of strings to filter out of the reference dictionary Outputs chrs (Array[Array[String]]) interval_list (File) contig_interval_strings (Array[String]) contig_interval_list_files (Array[File]) ExtractIntervalNamesFromIntervalOrBamFile description Pulls the contig names and regions out of an interval list or bed file. Inputs Required interval_file (File, required ): Interval list or bed file from which to extract contig names and regions. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs interval_info (Array[Array[String]]) MakeIntervalListFromSequenceDictionary description Make a Picard-style list of intervals that covers the given reference genome dictionary, with intervals no larger than the given size limit. Inputs Required ref_dict (File, required ): The reference dictionary Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Defaults ignore_contigs (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']): A list of strings to filter out of the reference dictionary max_interval_size (Int, default=10000) Outputs interval_list (File) interval_info (Array[Array[String]]) CreateIntervalListFileFromIntervalInfo description Make a Picard-style interval list file from the given interval info. Inputs Required contig (String, required ): Contig for the interval. end (String, required ): End position for the interval. start (String, required ): Start position for the interval. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs interval_list (File) CountBamRecords description Count the number of records in a bam file Inputs Required bam (File, required ); localization_optional : true; description : The bam file Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes Outputs samools_error (File?) num_records (Int) DownsampleSam description Downsample the given bam / sam file using Picard/GATK's DownsampleSam tool. author Jonn Smith email jonn@broadinstitute.org Inputs Required bam (File, required ): BAM file to be filtered. Optional runtime_attr_override (RuntimeAttr?) Defaults extra_args (String, default=\"\"): [Optional] Extra arguments to pass into DownsampleSam. prefix (String, default=\"downsampled_reads\"): [Optional] Prefix string to name the output file (Default: downsampled_reads). probability (Float, default=0.01): [Optional] Probability that a read will be emitted (Default: 0.01). random_seed (Int, default=1) strategy (String, default=\"HighAccuracy\"): [Optional] Strategy to use to downsample the given bam file (Default: HighAccuracy). Outputs output_bam (File) output_bam_index (File) Sum description Sum a list of integers. Inputs Required ints (Array[Int], required ): List of integers to be summed. Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"sum\"): [Optional] Prefix string to name the output file (Default: sum). Outputs sum (Int) sum_file (File) Uniq description Find the unique elements in a list of strings. Inputs Required strings (Array[String], required ): List of strings to be filtered. Optional runtime_attr_override (RuntimeAttr?) Outputs unique_strings (Array[String]) Timestamp description Get the current timestamp. Inputs Required dummy_dependencies (Array[String], required ): List of dummy dependencies to force recomputation. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Outputs timestamp (String) ConvertReads description Convert reads from one format to another. Inputs Required output_format (String, required ): Output format. reads (File, required ): Reads to be converted. Outputs converted_reads (File) BamToBed description Convert a BAM file to a bed file. Inputs Required bam (File, required ): BAM file to be converted. prefix (String, required ): Prefix for the output bed file. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Outputs bed (File) BamToFastq description Convert a BAM file to a fastq file. Inputs Required bam (File, required ): BAM file to be converted. prefix (String, required ): Prefix for the output fastq file. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Outputs reads_fq (File) MergeFastqs description Merge fastq files. Inputs Required fastqs (Array[File], required ): Fastq files to be merged. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Defaults prefix (String, default=\"merged\"): Prefix for the output fastq file. Outputs merged_fastq (File) MergeBams description Merge several input BAMs into a single BAM. Inputs Required bams (Array[File], required ): Input array of BAMs to be merged. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Defaults prefix (String, default=\"out\"): Prefix for the output BAM. Outputs merged_bam (File) merged_bai (File) Index description samtools index a BAM file. Inputs Required bam (File, required ): BAM file to be indexed. Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Outputs bai (File) SubsetBam description Subset a BAM file to a specified locus. Inputs Required bai (File, required ): index for bam file bam (File, required ); description : bam to subset; localization_optional : true locus (String, required ): genomic locus to select Optional runtime_attr_override (RuntimeAttr?): Override the default runtime attributes. Defaults prefix (String, default=\"subset\"): prefix for output bam and bai file names Outputs subset_bam (File) subset_bai (File) ResilientSubsetBam description For subsetting a high-coverage BAM stored in GCS, without localizing (more resilient to auth. expiration). Inputs Required bai (File, required ) bam (File, required ); localization_optional : true interval_id (String, required ): an ID string for representing the intervals in the interval list file interval_list_file (File, required ): a Picard-style interval list file to subset reads with prefix (String, required ): prefix for output bam and bai file names Optional runtime_attr_override (RuntimeAttr?) Outputs subset_bam (File) subset_bai (File) Bamtools description Runs a given bamtools command on a bam file Inputs Required args (String, required ): arguments to pass to bamtools bamfile (File, required ): bam file to run bamtools on cmd (String, required ): bamtools command to run Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") Outputs bam (File) DeduplicateBam description Utility to drop (occationally happening) duplicate records in input BAM Inputs Required aligned_bai (File, required ): input BAM index file aligned_bam (File, required ): input BAM file Optional runtime_attr_override (RuntimeAttr?): override default runtime attributes Defaults same_name_as_input (Boolean, default=true): if true, output BAM will have the same name as input BAM, otherwise it will have the input basename with .dedup suffix Outputs corrected_bam (File) corrected_bai (File) Cat description Utility to concatenates a group of files into a single output file, with headers in the first line if has_header is true. If has_header is false, the script concatenates the files without headers. Inputs Required files (Array[File], required ): text files to combine Optional runtime_attr_override (RuntimeAttr?) Defaults has_header (Boolean, default=false): files have a redundant header out (String, default=\"out.txt\"): [default-valued] output filename Outputs combined (File) ComputeGenomeLength description Utility to compute the length of a genome from a FASTA file Inputs Required fasta (File, required ): FASTA file Optional runtime_attr_override (RuntimeAttr?) Outputs length (Float) ListFilesOfType description Utility to list files of a given type in a directory Inputs Required gcs_dir (String, required ): input directory suffixes (Array[String], required ): suffix(es) for files Optional runtime_attr_override (RuntimeAttr?) Defaults recurse (Boolean, default=false): if true, recurse through subdirectories Outputs files (Array[String]) manifest (File) StopWorkflow description Utility to stop a workflow Inputs Required reason (String, required ): reason for stopping Outputs None InferSampleName description Infer sample name encoded on the @RG line of the header section. Fails if multiple values found, or if SM ~= unnamedsample. Inputs Required bai (File, required ) bam (File, required ); localization_optional : true; description : BAM file Outputs sample_name (String) CheckOnSamplenames description Makes sure the provided sample names are all same, i.e. no mixture of sample names Inputs Required sample_names (Array[String], required ): sample names Outputs None ComputeAllowedLocalSSD description Compute the number of LOCAL ssd's allowed by Google Inputs Required intended_gb (Int, required ): intended number of GB Outputs numb_of_local_ssd (Int) RandomZoneSpewer description Spews a random GCP zone Inputs Required num_of_zones (Int, required ): number of zones to spew Outputs zones (String) GetCurrentTimestampString volatile true description Get the current timestamp as a string Inputs Defaults date_format (String, default=\"%Y%m%d_%H%M%S_%N\"): The date format string to use. See the unix date command for more info. Outputs timestamp_string (String) GetRawReadGroup description Get the raw read group from a bam file (assumed to have 1 read group only) Inputs Required gcs_bam_path (String, required ): path to bam file in GCS Optional runtime_attr_override (RuntimeAttr?): override the runtime attributes Outputs rg (String) GetReadsInBedFileRegions desciption Get the reads from the given bam path which overlap the regions in the given bed file. Inputs Required gcs_bam_path (String, required ): GCS URL to bam file from which to extract reads. regions_bed (File, required ): Bed file containing regions for which to extract reads. Optional runtime_attr_override (RuntimeAttr?): Runtime attributes override struct. Defaults prefix (String, default=\"reads\"): [default-valued] prefix for output BAM Outputs bam (File) bai (File) MapToTsv description Convert a map to a tsv file Inputs Required my_map (Map[String,Float], required ): The map to convert name_of_file (String, required ): The name of the file to write to Outputs result (File) CreateIGVSession description Create an IGV session given a list of IGV compatible file paths. Adapted / borrowed from https://github.com/broadinstitute/palantir-workflows/blob/mg_benchmark_compare/BenchmarkVCFs . Inputs Required input_bams (Array[String], required ) input_vcfs (Array[String], required ) output_name (String, required ) reference_short_name (String, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs igv_session (File) SplitContigToIntervals author Jonn Smith notes Splits the given contig into intervals of the given size. Inputs Required contig (String, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults size (Int, default=200000) Outputs full_bed_file (File) individual_bed_files (Array[File]) ResolveMapKeysInPriorityOrder description Gets the first key in the map that exists. If no keys exist, returns an empty string. Inputs Required keys (Array[String], required ): Array[String] of keys to check in order of priority map (Map[String,String], required ): Map[String, String] to resolve. Outputs key (String)","title":"Utils"},{"location":"tasks/Utils/#utils","text":"","title":"Utils"},{"location":"tasks/Utils/#chunkmanifest","text":"description Chunk a manifest file into smaller files","title":"ChunkManifest"},{"location":"tasks/Utils/#inputs","text":"","title":"Inputs"},{"location":"tasks/Utils/#required","text":"manifest (File, required ): The manifest file to chunk manifest_lines_per_chunk (Int, required ): The number of lines to include in each chunk","title":"Required"},{"location":"tasks/Utils/#optional","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs","text":"manifest_chunks (Array[File])","title":"Outputs"},{"location":"tasks/Utils/#sortsam","text":"description Sort a BAM file by coordinate order","title":"SortSam"},{"location":"tasks/Utils/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_1","text":"input_bam (File, required ): The BAM file to sort prefix (String, required ): The basename for the output BAM file","title":"Required"},{"location":"tasks/Utils/#optional_1","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs_1","text":"output_bam (File) output_bam_index (File)","title":"Outputs"},{"location":"tasks/Utils/#makechrintervallist","text":"description Make a Picard-style list of intervals for each chromosome in the reference genome","title":"MakeChrIntervalList"},{"location":"tasks/Utils/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_2","text":"ref_dict (File, required ): The reference dictionary","title":"Required"},{"location":"tasks/Utils/#optional_2","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#defaults","text":"filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']): A list of strings to filter out of the reference dictionary","title":"Defaults"},{"location":"tasks/Utils/#outputs_2","text":"chrs (Array[Array[String]]) interval_list (File) contig_interval_strings (Array[String]) contig_interval_list_files (Array[File])","title":"Outputs"},{"location":"tasks/Utils/#extractintervalnamesfromintervalorbamfile","text":"description Pulls the contig names and regions out of an interval list or bed file.","title":"ExtractIntervalNamesFromIntervalOrBamFile"},{"location":"tasks/Utils/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_3","text":"interval_file (File, required ): Interval list or bed file from which to extract contig names and regions.","title":"Required"},{"location":"tasks/Utils/#optional_3","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs_3","text":"interval_info (Array[Array[String]])","title":"Outputs"},{"location":"tasks/Utils/#makeintervallistfromsequencedictionary","text":"description Make a Picard-style list of intervals that covers the given reference genome dictionary, with intervals no larger than the given size limit.","title":"MakeIntervalListFromSequenceDictionary"},{"location":"tasks/Utils/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_4","text":"ref_dict (File, required ): The reference dictionary","title":"Required"},{"location":"tasks/Utils/#optional_4","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#defaults_1","text":"ignore_contigs (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']): A list of strings to filter out of the reference dictionary max_interval_size (Int, default=10000)","title":"Defaults"},{"location":"tasks/Utils/#outputs_4","text":"interval_list (File) interval_info (Array[Array[String]])","title":"Outputs"},{"location":"tasks/Utils/#createintervallistfilefromintervalinfo","text":"description Make a Picard-style interval list file from the given interval info.","title":"CreateIntervalListFileFromIntervalInfo"},{"location":"tasks/Utils/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_5","text":"contig (String, required ): Contig for the interval. end (String, required ): End position for the interval. start (String, required ): Start position for the interval.","title":"Required"},{"location":"tasks/Utils/#optional_5","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs_5","text":"interval_list (File)","title":"Outputs"},{"location":"tasks/Utils/#countbamrecords","text":"description Count the number of records in a bam file","title":"CountBamRecords"},{"location":"tasks/Utils/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_6","text":"bam (File, required ); localization_optional : true; description : The bam file","title":"Required"},{"location":"tasks/Utils/#optional_6","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs_6","text":"samools_error (File?) num_records (Int)","title":"Outputs"},{"location":"tasks/Utils/#downsamplesam","text":"description Downsample the given bam / sam file using Picard/GATK's DownsampleSam tool. author Jonn Smith email jonn@broadinstitute.org","title":"DownsampleSam"},{"location":"tasks/Utils/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_7","text":"bam (File, required ): BAM file to be filtered.","title":"Required"},{"location":"tasks/Utils/#optional_7","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_2","text":"extra_args (String, default=\"\"): [Optional] Extra arguments to pass into DownsampleSam. prefix (String, default=\"downsampled_reads\"): [Optional] Prefix string to name the output file (Default: downsampled_reads). probability (Float, default=0.01): [Optional] Probability that a read will be emitted (Default: 0.01). random_seed (Int, default=1) strategy (String, default=\"HighAccuracy\"): [Optional] Strategy to use to downsample the given bam file (Default: HighAccuracy).","title":"Defaults"},{"location":"tasks/Utils/#outputs_7","text":"output_bam (File) output_bam_index (File)","title":"Outputs"},{"location":"tasks/Utils/#sum","text":"description Sum a list of integers.","title":"Sum"},{"location":"tasks/Utils/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_8","text":"ints (Array[Int], required ): List of integers to be summed.","title":"Required"},{"location":"tasks/Utils/#optional_8","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_3","text":"prefix (String, default=\"sum\"): [Optional] Prefix string to name the output file (Default: sum).","title":"Defaults"},{"location":"tasks/Utils/#outputs_8","text":"sum (Int) sum_file (File)","title":"Outputs"},{"location":"tasks/Utils/#uniq","text":"description Find the unique elements in a list of strings.","title":"Uniq"},{"location":"tasks/Utils/#inputs_9","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_9","text":"strings (Array[String], required ): List of strings to be filtered.","title":"Required"},{"location":"tasks/Utils/#optional_9","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#outputs_9","text":"unique_strings (Array[String])","title":"Outputs"},{"location":"tasks/Utils/#timestamp","text":"description Get the current timestamp.","title":"Timestamp"},{"location":"tasks/Utils/#inputs_10","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_10","text":"dummy_dependencies (Array[String], required ): List of dummy dependencies to force recomputation.","title":"Required"},{"location":"tasks/Utils/#optional_10","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#outputs_10","text":"timestamp (String)","title":"Outputs"},{"location":"tasks/Utils/#convertreads","text":"description Convert reads from one format to another.","title":"ConvertReads"},{"location":"tasks/Utils/#inputs_11","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_11","text":"output_format (String, required ): Output format. reads (File, required ): Reads to be converted.","title":"Required"},{"location":"tasks/Utils/#outputs_11","text":"converted_reads (File)","title":"Outputs"},{"location":"tasks/Utils/#bamtobed","text":"description Convert a BAM file to a bed file.","title":"BamToBed"},{"location":"tasks/Utils/#inputs_12","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_12","text":"bam (File, required ): BAM file to be converted. prefix (String, required ): Prefix for the output bed file.","title":"Required"},{"location":"tasks/Utils/#optional_11","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#outputs_12","text":"bed (File)","title":"Outputs"},{"location":"tasks/Utils/#bamtofastq","text":"description Convert a BAM file to a fastq file.","title":"BamToFastq"},{"location":"tasks/Utils/#inputs_13","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_13","text":"bam (File, required ): BAM file to be converted. prefix (String, required ): Prefix for the output fastq file.","title":"Required"},{"location":"tasks/Utils/#optional_12","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#outputs_13","text":"reads_fq (File)","title":"Outputs"},{"location":"tasks/Utils/#mergefastqs","text":"description Merge fastq files.","title":"MergeFastqs"},{"location":"tasks/Utils/#inputs_14","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_14","text":"fastqs (Array[File], required ): Fastq files to be merged.","title":"Required"},{"location":"tasks/Utils/#optional_13","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#defaults_4","text":"prefix (String, default=\"merged\"): Prefix for the output fastq file.","title":"Defaults"},{"location":"tasks/Utils/#outputs_14","text":"merged_fastq (File)","title":"Outputs"},{"location":"tasks/Utils/#mergebams","text":"description Merge several input BAMs into a single BAM.","title":"MergeBams"},{"location":"tasks/Utils/#inputs_15","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_15","text":"bams (Array[File], required ): Input array of BAMs to be merged.","title":"Required"},{"location":"tasks/Utils/#optional_14","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#defaults_5","text":"prefix (String, default=\"out\"): Prefix for the output BAM.","title":"Defaults"},{"location":"tasks/Utils/#outputs_15","text":"merged_bam (File) merged_bai (File)","title":"Outputs"},{"location":"tasks/Utils/#index","text":"description samtools index a BAM file.","title":"Index"},{"location":"tasks/Utils/#inputs_16","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_16","text":"bam (File, required ): BAM file to be indexed.","title":"Required"},{"location":"tasks/Utils/#optional_15","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#outputs_16","text":"bai (File)","title":"Outputs"},{"location":"tasks/Utils/#subsetbam","text":"description Subset a BAM file to a specified locus.","title":"SubsetBam"},{"location":"tasks/Utils/#inputs_17","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_17","text":"bai (File, required ): index for bam file bam (File, required ); description : bam to subset; localization_optional : true locus (String, required ): genomic locus to select","title":"Required"},{"location":"tasks/Utils/#optional_16","text":"runtime_attr_override (RuntimeAttr?): Override the default runtime attributes.","title":"Optional"},{"location":"tasks/Utils/#defaults_6","text":"prefix (String, default=\"subset\"): prefix for output bam and bai file names","title":"Defaults"},{"location":"tasks/Utils/#outputs_17","text":"subset_bam (File) subset_bai (File)","title":"Outputs"},{"location":"tasks/Utils/#resilientsubsetbam","text":"description For subsetting a high-coverage BAM stored in GCS, without localizing (more resilient to auth. expiration).","title":"ResilientSubsetBam"},{"location":"tasks/Utils/#inputs_18","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_18","text":"bai (File, required ) bam (File, required ); localization_optional : true interval_id (String, required ): an ID string for representing the intervals in the interval list file interval_list_file (File, required ): a Picard-style interval list file to subset reads with prefix (String, required ): prefix for output bam and bai file names","title":"Required"},{"location":"tasks/Utils/#optional_17","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#outputs_18","text":"subset_bam (File) subset_bai (File)","title":"Outputs"},{"location":"tasks/Utils/#bamtools","text":"description Runs a given bamtools command on a bam file","title":"Bamtools"},{"location":"tasks/Utils/#inputs_19","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_19","text":"args (String, required ): arguments to pass to bamtools bamfile (File, required ): bam file to run bamtools on cmd (String, required ): bamtools command to run","title":"Required"},{"location":"tasks/Utils/#optional_18","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_7","text":"prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/Utils/#outputs_19","text":"bam (File)","title":"Outputs"},{"location":"tasks/Utils/#deduplicatebam","text":"description Utility to drop (occationally happening) duplicate records in input BAM","title":"DeduplicateBam"},{"location":"tasks/Utils/#inputs_20","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_20","text":"aligned_bai (File, required ): input BAM index file aligned_bam (File, required ): input BAM file","title":"Required"},{"location":"tasks/Utils/#optional_19","text":"runtime_attr_override (RuntimeAttr?): override default runtime attributes","title":"Optional"},{"location":"tasks/Utils/#defaults_8","text":"same_name_as_input (Boolean, default=true): if true, output BAM will have the same name as input BAM, otherwise it will have the input basename with .dedup suffix","title":"Defaults"},{"location":"tasks/Utils/#outputs_20","text":"corrected_bam (File) corrected_bai (File)","title":"Outputs"},{"location":"tasks/Utils/#cat","text":"description Utility to concatenates a group of files into a single output file, with headers in the first line if has_header is true. If has_header is false, the script concatenates the files without headers.","title":"Cat"},{"location":"tasks/Utils/#inputs_21","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_21","text":"files (Array[File], required ): text files to combine","title":"Required"},{"location":"tasks/Utils/#optional_20","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_9","text":"has_header (Boolean, default=false): files have a redundant header out (String, default=\"out.txt\"): [default-valued] output filename","title":"Defaults"},{"location":"tasks/Utils/#outputs_21","text":"combined (File)","title":"Outputs"},{"location":"tasks/Utils/#computegenomelength","text":"description Utility to compute the length of a genome from a FASTA file","title":"ComputeGenomeLength"},{"location":"tasks/Utils/#inputs_22","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_22","text":"fasta (File, required ): FASTA file","title":"Required"},{"location":"tasks/Utils/#optional_21","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#outputs_22","text":"length (Float)","title":"Outputs"},{"location":"tasks/Utils/#listfilesoftype","text":"description Utility to list files of a given type in a directory","title":"ListFilesOfType"},{"location":"tasks/Utils/#inputs_23","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_23","text":"gcs_dir (String, required ): input directory suffixes (Array[String], required ): suffix(es) for files","title":"Required"},{"location":"tasks/Utils/#optional_22","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_10","text":"recurse (Boolean, default=false): if true, recurse through subdirectories","title":"Defaults"},{"location":"tasks/Utils/#outputs_23","text":"files (Array[String]) manifest (File)","title":"Outputs"},{"location":"tasks/Utils/#stopworkflow","text":"description Utility to stop a workflow","title":"StopWorkflow"},{"location":"tasks/Utils/#inputs_24","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_24","text":"reason (String, required ): reason for stopping","title":"Required"},{"location":"tasks/Utils/#outputs_24","text":"None","title":"Outputs"},{"location":"tasks/Utils/#infersamplename","text":"description Infer sample name encoded on the @RG line of the header section. Fails if multiple values found, or if SM ~= unnamedsample.","title":"InferSampleName"},{"location":"tasks/Utils/#inputs_25","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_25","text":"bai (File, required ) bam (File, required ); localization_optional : true; description : BAM file","title":"Required"},{"location":"tasks/Utils/#outputs_25","text":"sample_name (String)","title":"Outputs"},{"location":"tasks/Utils/#checkonsamplenames","text":"description Makes sure the provided sample names are all same, i.e. no mixture of sample names","title":"CheckOnSamplenames"},{"location":"tasks/Utils/#inputs_26","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_26","text":"sample_names (Array[String], required ): sample names","title":"Required"},{"location":"tasks/Utils/#outputs_26","text":"None","title":"Outputs"},{"location":"tasks/Utils/#computeallowedlocalssd","text":"description Compute the number of LOCAL ssd's allowed by Google","title":"ComputeAllowedLocalSSD"},{"location":"tasks/Utils/#inputs_27","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_27","text":"intended_gb (Int, required ): intended number of GB","title":"Required"},{"location":"tasks/Utils/#outputs_27","text":"numb_of_local_ssd (Int)","title":"Outputs"},{"location":"tasks/Utils/#randomzonespewer","text":"description Spews a random GCP zone","title":"RandomZoneSpewer"},{"location":"tasks/Utils/#inputs_28","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_28","text":"num_of_zones (Int, required ): number of zones to spew","title":"Required"},{"location":"tasks/Utils/#outputs_28","text":"zones (String)","title":"Outputs"},{"location":"tasks/Utils/#getcurrenttimestampstring","text":"volatile true description Get the current timestamp as a string","title":"GetCurrentTimestampString"},{"location":"tasks/Utils/#inputs_29","text":"","title":"Inputs"},{"location":"tasks/Utils/#defaults_11","text":"date_format (String, default=\"%Y%m%d_%H%M%S_%N\"): The date format string to use. See the unix date command for more info.","title":"Defaults"},{"location":"tasks/Utils/#outputs_29","text":"timestamp_string (String)","title":"Outputs"},{"location":"tasks/Utils/#getrawreadgroup","text":"description Get the raw read group from a bam file (assumed to have 1 read group only)","title":"GetRawReadGroup"},{"location":"tasks/Utils/#inputs_30","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_29","text":"gcs_bam_path (String, required ): path to bam file in GCS","title":"Required"},{"location":"tasks/Utils/#optional_23","text":"runtime_attr_override (RuntimeAttr?): override the runtime attributes","title":"Optional"},{"location":"tasks/Utils/#outputs_30","text":"rg (String)","title":"Outputs"},{"location":"tasks/Utils/#getreadsinbedfileregions","text":"desciption Get the reads from the given bam path which overlap the regions in the given bed file.","title":"GetReadsInBedFileRegions"},{"location":"tasks/Utils/#inputs_31","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_30","text":"gcs_bam_path (String, required ): GCS URL to bam file from which to extract reads. regions_bed (File, required ): Bed file containing regions for which to extract reads.","title":"Required"},{"location":"tasks/Utils/#optional_24","text":"runtime_attr_override (RuntimeAttr?): Runtime attributes override struct.","title":"Optional"},{"location":"tasks/Utils/#defaults_12","text":"prefix (String, default=\"reads\"): [default-valued] prefix for output BAM","title":"Defaults"},{"location":"tasks/Utils/#outputs_31","text":"bam (File) bai (File)","title":"Outputs"},{"location":"tasks/Utils/#maptotsv","text":"description Convert a map to a tsv file","title":"MapToTsv"},{"location":"tasks/Utils/#inputs_32","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_31","text":"my_map (Map[String,Float], required ): The map to convert name_of_file (String, required ): The name of the file to write to","title":"Required"},{"location":"tasks/Utils/#outputs_32","text":"result (File)","title":"Outputs"},{"location":"tasks/Utils/#createigvsession","text":"description Create an IGV session given a list of IGV compatible file paths. Adapted / borrowed from https://github.com/broadinstitute/palantir-workflows/blob/mg_benchmark_compare/BenchmarkVCFs .","title":"CreateIGVSession"},{"location":"tasks/Utils/#inputs_33","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_32","text":"input_bams (Array[String], required ) input_vcfs (Array[String], required ) output_name (String, required ) reference_short_name (String, required )","title":"Required"},{"location":"tasks/Utils/#optional_25","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#outputs_33","text":"igv_session (File)","title":"Outputs"},{"location":"tasks/Utils/#splitcontigtointervals","text":"author Jonn Smith notes Splits the given contig into intervals of the given size.","title":"SplitContigToIntervals"},{"location":"tasks/Utils/#inputs_34","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_33","text":"contig (String, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/Utils/#optional_26","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/Utils/#defaults_13","text":"size (Int, default=200000)","title":"Defaults"},{"location":"tasks/Utils/#outputs_34","text":"full_bed_file (File) individual_bed_files (Array[File])","title":"Outputs"},{"location":"tasks/Utils/#resolvemapkeysinpriorityorder","text":"description Gets the first key in the map that exists. If no keys exist, returns an empty string.","title":"ResolveMapKeysInPriorityOrder"},{"location":"tasks/Utils/#inputs_35","text":"","title":"Inputs"},{"location":"tasks/Utils/#required_34","text":"keys (Array[String], required ): Array[String] of keys to check in order of priority map (Map[String,String], required ): Map[String, String] to resolve.","title":"Required"},{"location":"tasks/Utils/#outputs_35","text":"key (String)","title":"Outputs"},{"location":"tasks/VariantUtils/","text":"VariantUtils MergePerChrCalls description Merge per-chromosome calls into a single VCF Inputs Required prefix (String, required ): Prefix for output VCF ref_dict (File, required ): Reference dictionary vcfs (Array[File], required ): List of per-chromosome VCFs to merge Optional runtime_attr_override (RuntimeAttr?) Outputs vcf (File) tbi (File) MergeAndSortVCFs description Fast merging & sorting VCFs when the default sorting is expected to be slow Inputs Required prefix (String, required ) ref_fasta_fai (File, required ) vcfs (Array[File], required ) Optional header_definitions_file (File?): a union of definition header lines for input VCFs (related to https://github.com/samtools/bcftools/issues/1629) runtime_attr_override (RuntimeAttr?) Outputs vcf (File) tbi (File) CollectDefinitions description Collect (union) various definitions in vcf files, adddressing a bcftols bug: https://github.com/samtools/bcftools/issues/1629 Inputs Required vcfs (Array[File], required ) Optional runtime_attr_override (RuntimeAttr?) Outputs union_definitions (File) GetVCFSampleName description Currently mostly used for extracting sample name in fingerprinting genotyped VCF Inputs Required fingerprint_vcf (File, required ): Assumed to be genotyped, and hold only one sample (other samples will be ignored). Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes Outputs sample_name (String) SubsetVCF description Subset a VCF file to a given locus Inputs Required locus (String, required ): Locus to be subsetted vcf_gz (File, required ): VCF file to be subsetted vcf_tbi (File, required ): Tabix index for the VCF file Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes Defaults prefix (String, default=\"subset\"): Prefix for the output file Outputs subset_vcf (File) subset_tbi (File) ZipAndIndexVCF description gZip plain text VCF and index it. Inputs Required vcf (File, required ): VCF file to be zipped and indexed Optional runtime_attr_override (RuntimeAttr?): Override default runtime attributes Outputs vcfgz (File) tbi (File) IndexVCF description Indexing vcf.gz. Note: do NOT use remote index as that's buggy. Inputs Required vcf (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs tbi (File) FixSnifflesVCF Inputs Required sample_name (String, required ): Sniffles infers sample name from the BAM file name, so we fix it here vcf (File, required ) Optional ref_fasta_fai (File?): provide only when the contig section of the input vcf is suspected to be corrupted runtime_attr_override (RuntimeAttr?) Outputs sortedVCF (File) tbi (File) HardFilterVcf Inputs Required prefix (String, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults excess_het_threshold (Float, default=54.69) Outputs variant_filtered_vcf (File) variant_filtered_vcf_index (File) MakeSitesOnlyVcf Inputs Required prefix (String, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs sites_only_vcf (File) sites_only_vcf_index (File) AnnotateVcfWithBedRegions Inputs Required bed_file_annotation_names (Array[String], required ) bed_file_indexes (Array[File], required ) bed_files (Array[File], required ) prefix (String, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs annotated_vcf (File) annotated_vcf_index (File) IndelsVariantRecalibrator Inputs Required is_known (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains known variants. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains training data. Must be the same length as known_reference_variants . is_truth (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains truth data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. prefix (String, required ) prior (Array[Float], required ): Array of integer values indicating the priors for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . recalibration_annotation_values (Array[String], required ) recalibration_tranche_values (Array[String], required ) use_allele_specific_annotations (Boolean, required ) vcf_indices (Array[File], required ): Tribble Indexes for sites only VCF. vcfs (Array[File], required ): Sites only VCFs. Can be pre-filtered using hard-filters. Optional runtime_attr_override (RuntimeAttr?) Defaults max_gaussians (Int, default=4) Outputs recalibration (File) recalibration_index (File) tranches (File) model_report (File) SNPsVariantRecalibratorCreateModel Inputs Required is_known (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains known variants. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains training data. Must be the same length as known_reference_variants . is_truth (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains truth data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. prefix (String, required ) prior (Array[Float], required ): Array of integer values indicating the priors for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . recalibration_annotation_values (Array[String], required ) recalibration_tranche_values (Array[String], required ) use_allele_specific_annotations (Boolean, required ) vcf_indices (Array[File], required ): Tribble Indexes for sites only VCF. vcfs (Array[File], required ): Sites only VCFs. Can be pre-filtered using hard-filters. Optional downsampleFactor (Int?) runtime_attr_override (RuntimeAttr?) Defaults max_gaussians (Int, default=6) Outputs recalibration (File) recalibration_index (File) tranches (File) model_report (File) ApplyVqsr Inputs Required indel_filter_level (Float, required ) indels_recalibration (File, required ) indels_recalibration_index (File, required ) indels_tranches (File, required ) prefix (String, required ) snp_filter_level (Float, required ) snps_recalibration (File, required ) snps_recalibration_index (File, required ) snps_tranches (File, required ) use_allele_specific_annotations (Boolean, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs recalibrated_vcf (File) recalibrated_vcf_index (File) SelectVariants Inputs Required prefix (String, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs vcf_out (File) vcf_out_index (File) RenameSingleSampleVcf Inputs Required new_sample_name (String, required ) prefix (String, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults is_gvcf (Boolean, default=false) Outputs new_sample_name_vcf (File) new_sample_name_vcf_index (File) GatherVcfs Inputs Required input_vcf_indices (Array[File], required ) input_vcfs (Array[File], required ); localization_optional : true prefix (String, required ) Optional runtime_attr_override (RuntimeAttr?) Outputs output_vcf (File) output_vcf_index (File) ExtractFingerprint Inputs Required bai (File, required ) bam (File, required ) haplotype_database_file (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"fingerprint\") Outputs output_vcf (File) fingerprint_string (File) ExtractFingerprintAndBarcode Inputs Required haplotype_database_file (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) vcf (File, required ) vcf_index (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"fingerprint\") Outputs output_vcf (File) barcode (String) barcode_file (File) ExtractVariantAnnotations Inputs Required is_calibration (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'calibration' data. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'training' data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. mode (String, required ): SNP or INDEL prefix (String, required ): Prefix of the output files. recalibration_annotation_values (Array[String], required ) vcf (File, required ): VCF File from which to extract annotations. vcf_index (File, required ): Index for the given VCF file. Optional runtime_attr_override (RuntimeAttr?) Defaults max_unlabeled_variants (Int, default=0): How many sites should be used for unlableled training data. Setting this to values > 0 will enable a positive-negative training model. Outputs annotation_hdf5 (File) sites_only_vcf (File) sites_only_vcf_index (File) unlabeled_annotation_hdf5 (File?) TrainVariantAnnotationsModel Inputs Required annotation_hdf5 (File, required ): Labeled-annotations HDF5 file. mode (String, required ): SNP or INDEL prefix (String, required ): Prefix of the output files. Optional runtime_attr_override (RuntimeAttr?) unlabeled_annotation_hdf5 (File?): Unlabeled-annotations HDF5 file (optional) Defaults calibration_sensitivity_threshold (Float, default=0.95): Calibration-set sensitivity threshold. (optional) Outputs training_scores (File) positive_model_scorer_pickle (File) unlabeled_positive_model_scores (File?) calibration_set_scores (File?) negative_model_scorer_pickle (File?) ScoreVariantAnnotations Inputs Required is_calibration (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'calibration' data. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'training' data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. mode (String, required ): SNP or INDEL model_files (Array[File], required ) model_prefix (String, required ) prefix (String, required ): Prefix of the output files. recalibration_annotation_values (Array[String], required ) sites_only_extracted_vcf (File, required ) sites_only_extracted_vcf_index (File, required ) vcf (File, required ): VCF File from which to extract annotations. vcf_index (File, required ): Index for the given VCF file. Optional runtime_attr_override (RuntimeAttr?) Defaults calibration_sensitivity_threshold (Float, default=0.99) Outputs scored_vcf (File) scored_vcf_index (File) annotations_hdf5 (File?) scores_hdf5 (File?) CompressAndIndex description Convert a BCF file to a vcf.bgz file and index it. Inputs Required joint_bcf (File, required ) Optional runtime_attr_override (RuntimeAttr?) Defaults num_cpus (Int, default=8) prefix (String, default=\"out\") Outputs joint_gvcf (File) joint_gvcf_tbi (File) ConcatBCFs description Concatenate BCFs into a single .vcf.bgz file and index it. Inputs Required bcfs (Array[File], required ) Optional runtime_attr_override (RuntimeAttr?) Defaults num_cpus (Int, default=4) prefix (String, default=\"out\") Outputs joint_gvcf (File) joint_gvcf_tbi (File)","title":"VariantUtils"},{"location":"tasks/VariantUtils/#variantutils","text":"","title":"VariantUtils"},{"location":"tasks/VariantUtils/#_1","text":"","title":""},{"location":"tasks/VariantUtils/#_2","text":"","title":""},{"location":"tasks/VariantUtils/#_3","text":"","title":""},{"location":"tasks/VariantUtils/#mergeperchrcalls","text":"description Merge per-chromosome calls into a single VCF","title":"MergePerChrCalls"},{"location":"tasks/VariantUtils/#inputs","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required","text":"prefix (String, required ): Prefix for output VCF ref_dict (File, required ): Reference dictionary vcfs (Array[File], required ): List of per-chromosome VCFs to merge","title":"Required"},{"location":"tasks/VariantUtils/#optional","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs","text":"vcf (File) tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#mergeandsortvcfs","text":"description Fast merging & sorting VCFs when the default sorting is expected to be slow","title":"MergeAndSortVCFs"},{"location":"tasks/VariantUtils/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_1","text":"prefix (String, required ) ref_fasta_fai (File, required ) vcfs (Array[File], required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_1","text":"header_definitions_file (File?): a union of definition header lines for input VCFs (related to https://github.com/samtools/bcftools/issues/1629) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_1","text":"vcf (File) tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#collectdefinitions","text":"description Collect (union) various definitions in vcf files, adddressing a bcftols bug: https://github.com/samtools/bcftools/issues/1629","title":"CollectDefinitions"},{"location":"tasks/VariantUtils/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_2","text":"vcfs (Array[File], required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_2","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_2","text":"union_definitions (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#getvcfsamplename","text":"description Currently mostly used for extracting sample name in fingerprinting genotyped VCF","title":"GetVCFSampleName"},{"location":"tasks/VariantUtils/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_3","text":"fingerprint_vcf (File, required ): Assumed to be genotyped, and hold only one sample (other samples will be ignored).","title":"Required"},{"location":"tasks/VariantUtils/#optional_3","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_3","text":"sample_name (String)","title":"Outputs"},{"location":"tasks/VariantUtils/#subsetvcf","text":"description Subset a VCF file to a given locus","title":"SubsetVCF"},{"location":"tasks/VariantUtils/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_4","text":"locus (String, required ): Locus to be subsetted vcf_gz (File, required ): VCF file to be subsetted vcf_tbi (File, required ): Tabix index for the VCF file","title":"Required"},{"location":"tasks/VariantUtils/#optional_4","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes","title":"Optional"},{"location":"tasks/VariantUtils/#defaults","text":"prefix (String, default=\"subset\"): Prefix for the output file","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_4","text":"subset_vcf (File) subset_tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#zipandindexvcf","text":"description gZip plain text VCF and index it.","title":"ZipAndIndexVCF"},{"location":"tasks/VariantUtils/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_5","text":"vcf (File, required ): VCF file to be zipped and indexed","title":"Required"},{"location":"tasks/VariantUtils/#optional_5","text":"runtime_attr_override (RuntimeAttr?): Override default runtime attributes","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_5","text":"vcfgz (File) tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#indexvcf","text":"description Indexing vcf.gz. Note: do NOT use remote index as that's buggy.","title":"IndexVCF"},{"location":"tasks/VariantUtils/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_6","text":"vcf (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_6","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_6","text":"tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#fixsnifflesvcf","text":"","title":"FixSnifflesVCF"},{"location":"tasks/VariantUtils/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_7","text":"sample_name (String, required ): Sniffles infers sample name from the BAM file name, so we fix it here vcf (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_7","text":"ref_fasta_fai (File?): provide only when the contig section of the input vcf is suspected to be corrupted runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_7","text":"sortedVCF (File) tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#hardfiltervcf","text":"","title":"HardFilterVcf"},{"location":"tasks/VariantUtils/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_8","text":"prefix (String, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_8","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_1","text":"excess_het_threshold (Float, default=54.69)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_8","text":"variant_filtered_vcf (File) variant_filtered_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#makesitesonlyvcf","text":"","title":"MakeSitesOnlyVcf"},{"location":"tasks/VariantUtils/#inputs_9","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_9","text":"prefix (String, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_9","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_9","text":"sites_only_vcf (File) sites_only_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#annotatevcfwithbedregions","text":"","title":"AnnotateVcfWithBedRegions"},{"location":"tasks/VariantUtils/#inputs_10","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_10","text":"bed_file_annotation_names (Array[String], required ) bed_file_indexes (Array[File], required ) bed_files (Array[File], required ) prefix (String, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_10","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_10","text":"annotated_vcf (File) annotated_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#indelsvariantrecalibrator","text":"","title":"IndelsVariantRecalibrator"},{"location":"tasks/VariantUtils/#inputs_11","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_11","text":"is_known (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains known variants. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains training data. Must be the same length as known_reference_variants . is_truth (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains truth data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. prefix (String, required ) prior (Array[Float], required ): Array of integer values indicating the priors for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . recalibration_annotation_values (Array[String], required ) recalibration_tranche_values (Array[String], required ) use_allele_specific_annotations (Boolean, required ) vcf_indices (Array[File], required ): Tribble Indexes for sites only VCF. vcfs (Array[File], required ): Sites only VCFs. Can be pre-filtered using hard-filters.","title":"Required"},{"location":"tasks/VariantUtils/#optional_11","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_2","text":"max_gaussians (Int, default=4)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_11","text":"recalibration (File) recalibration_index (File) tranches (File) model_report (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#snpsvariantrecalibratorcreatemodel","text":"","title":"SNPsVariantRecalibratorCreateModel"},{"location":"tasks/VariantUtils/#inputs_12","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_12","text":"is_known (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains known variants. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains training data. Must be the same length as known_reference_variants . is_truth (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position contains truth data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. prefix (String, required ) prior (Array[Float], required ): Array of integer values indicating the priors for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . recalibration_annotation_values (Array[String], required ) recalibration_tranche_values (Array[String], required ) use_allele_specific_annotations (Boolean, required ) vcf_indices (Array[File], required ): Tribble Indexes for sites only VCF. vcfs (Array[File], required ): Sites only VCFs. Can be pre-filtered using hard-filters.","title":"Required"},{"location":"tasks/VariantUtils/#optional_12","text":"downsampleFactor (Int?) runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_3","text":"max_gaussians (Int, default=6)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_12","text":"recalibration (File) recalibration_index (File) tranches (File) model_report (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#applyvqsr","text":"","title":"ApplyVqsr"},{"location":"tasks/VariantUtils/#inputs_13","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_13","text":"indel_filter_level (Float, required ) indels_recalibration (File, required ) indels_recalibration_index (File, required ) indels_tranches (File, required ) prefix (String, required ) snp_filter_level (Float, required ) snps_recalibration (File, required ) snps_recalibration_index (File, required ) snps_tranches (File, required ) use_allele_specific_annotations (Boolean, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_13","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_13","text":"recalibrated_vcf (File) recalibrated_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#selectvariants","text":"","title":"SelectVariants"},{"location":"tasks/VariantUtils/#inputs_14","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_14","text":"prefix (String, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_14","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_14","text":"vcf_out (File) vcf_out_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#renamesinglesamplevcf","text":"","title":"RenameSingleSampleVcf"},{"location":"tasks/VariantUtils/#inputs_15","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_15","text":"new_sample_name (String, required ) prefix (String, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_15","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_4","text":"is_gvcf (Boolean, default=false)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_15","text":"new_sample_name_vcf (File) new_sample_name_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#gathervcfs","text":"","title":"GatherVcfs"},{"location":"tasks/VariantUtils/#inputs_16","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_16","text":"input_vcf_indices (Array[File], required ) input_vcfs (Array[File], required ); localization_optional : true prefix (String, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_16","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#outputs_16","text":"output_vcf (File) output_vcf_index (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#extractfingerprint","text":"","title":"ExtractFingerprint"},{"location":"tasks/VariantUtils/#inputs_17","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_17","text":"bai (File, required ) bam (File, required ) haplotype_database_file (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_17","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_5","text":"prefix (String, default=\"fingerprint\")","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_17","text":"output_vcf (File) fingerprint_string (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#extractfingerprintandbarcode","text":"","title":"ExtractFingerprintAndBarcode"},{"location":"tasks/VariantUtils/#inputs_18","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_18","text":"haplotype_database_file (File, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) vcf (File, required ) vcf_index (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_18","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_6","text":"prefix (String, default=\"fingerprint\")","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_18","text":"output_vcf (File) barcode (String) barcode_file (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#extractvariantannotations","text":"","title":"ExtractVariantAnnotations"},{"location":"tasks/VariantUtils/#inputs_19","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_19","text":"is_calibration (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'calibration' data. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'training' data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. mode (String, required ): SNP or INDEL prefix (String, required ): Prefix of the output files. recalibration_annotation_values (Array[String], required ) vcf (File, required ): VCF File from which to extract annotations. vcf_index (File, required ): Index for the given VCF file.","title":"Required"},{"location":"tasks/VariantUtils/#optional_19","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_7","text":"max_unlabeled_variants (Int, default=0): How many sites should be used for unlableled training data. Setting this to values > 0 will enable a positive-negative training model.","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_19","text":"annotation_hdf5 (File) sites_only_vcf (File) sites_only_vcf_index (File) unlabeled_annotation_hdf5 (File?)","title":"Outputs"},{"location":"tasks/VariantUtils/#trainvariantannotationsmodel","text":"","title":"TrainVariantAnnotationsModel"},{"location":"tasks/VariantUtils/#inputs_20","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_20","text":"annotation_hdf5 (File, required ): Labeled-annotations HDF5 file. mode (String, required ): SNP or INDEL prefix (String, required ): Prefix of the output files.","title":"Required"},{"location":"tasks/VariantUtils/#optional_20","text":"runtime_attr_override (RuntimeAttr?) unlabeled_annotation_hdf5 (File?): Unlabeled-annotations HDF5 file (optional)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_8","text":"calibration_sensitivity_threshold (Float, default=0.95): Calibration-set sensitivity threshold. (optional)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_20","text":"training_scores (File) positive_model_scorer_pickle (File) unlabeled_positive_model_scores (File?) calibration_set_scores (File?) negative_model_scorer_pickle (File?)","title":"Outputs"},{"location":"tasks/VariantUtils/#scorevariantannotations","text":"","title":"ScoreVariantAnnotations"},{"location":"tasks/VariantUtils/#inputs_21","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_21","text":"is_calibration (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'calibration' data. Must be the same length as known_reference_variants . is_training (Array[Boolean], required ): Array of boolean values indicating if the known_reference_variant file at the same array position should be used for 'training' data. Must be the same length as known_reference_variants . known_reference_variants (Array[File], required ): Array of known reference VCF files. For humans, dbSNP is one example. known_reference_variants_identifier (Array[String], required ): Array of boolean values the identifier / name for the known_reference_variant file at the same array position. Must be the same length as known_reference_variants . known_reference_variants_index (Array[File], required ): Array of index files for known reference VCF files. mode (String, required ): SNP or INDEL model_files (Array[File], required ) model_prefix (String, required ) prefix (String, required ): Prefix of the output files. recalibration_annotation_values (Array[String], required ) sites_only_extracted_vcf (File, required ) sites_only_extracted_vcf_index (File, required ) vcf (File, required ): VCF File from which to extract annotations. vcf_index (File, required ): Index for the given VCF file.","title":"Required"},{"location":"tasks/VariantUtils/#optional_21","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_9","text":"calibration_sensitivity_threshold (Float, default=0.99)","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_21","text":"scored_vcf (File) scored_vcf_index (File) annotations_hdf5 (File?) scores_hdf5 (File?)","title":"Outputs"},{"location":"tasks/VariantUtils/#compressandindex","text":"description Convert a BCF file to a vcf.bgz file and index it.","title":"CompressAndIndex"},{"location":"tasks/VariantUtils/#inputs_22","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_22","text":"joint_bcf (File, required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_22","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_10","text":"num_cpus (Int, default=8) prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_22","text":"joint_gvcf (File) joint_gvcf_tbi (File)","title":"Outputs"},{"location":"tasks/VariantUtils/#concatbcfs","text":"description Concatenate BCFs into a single .vcf.bgz file and index it.","title":"ConcatBCFs"},{"location":"tasks/VariantUtils/#inputs_23","text":"","title":"Inputs"},{"location":"tasks/VariantUtils/#required_23","text":"bcfs (Array[File], required )","title":"Required"},{"location":"tasks/VariantUtils/#optional_23","text":"runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"tasks/VariantUtils/#defaults_11","text":"num_cpus (Int, default=4) prefix (String, default=\"out\")","title":"Defaults"},{"location":"tasks/VariantUtils/#outputs_23","text":"joint_gvcf (File) joint_gvcf_tbi (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/","text":"cnv_common_tasks PreprocessIntervals description Reusing workflow from GATK Git Repository: https://github.com/broadinstitute/gatk/blob/master/scripts/cnv_wdl/cnv_common_tasks.wdl Inputs Required gatk_docker (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required ) Optional bin_length (Int?) blacklist_intervals (File?) cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) intervals (File?) mem_gb (Int?) padding (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs preprocessed_intervals (File) AnnotateIntervals Inputs Required gatk_docker (String, required ) intervals (File, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required ) Optional cpu (Int?) disk_space_gb (Int?) feature_query_lookahead (Int?) gatk4_jar_override (File?) mappability_track_bed (File?) mappability_track_bed_idx (File?) mem_gb (Int?) preemptible_attempts (Int?) segmental_duplication_track_bed (File?) segmental_duplication_track_bed_idx (File?) Defaults use_ssd (Boolean, default=false) Outputs annotated_intervals (File) FilterIntervals Inputs Required gatk_docker (String, required ) intervals (File, required ) Optional annotated_intervals (File?) blacklist_intervals (File?) cpu (Int?) disk_space_gb (Int?) extreme_count_filter_maximum_percentile (Float?) extreme_count_filter_minimum_percentile (Float?) extreme_count_filter_percentage_of_samples (Float?) gatk4_jar_override (File?) low_count_filter_count_threshold (Int?) low_count_filter_percentage_of_samples (Float?) maximum_gc_content (Float?) maximum_mappability (Float?) maximum_segmental_duplication_content (Float?) mem_gb (Int?) minimum_gc_content (Float?) minimum_mappability (Float?) minimum_segmental_duplication_content (Float?) preemptible_attempts (Int?) read_count_files (Array[File]?) Defaults use_ssd (Boolean, default=false) Outputs filtered_intervals (File) CollectCounts Inputs Required bam (File, required ) bam_idx (File, required ) gatk_docker (String, required ) intervals (File, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required ) Optional cpu (Int?) disk_space_gb (Int?) enable_indexing (Boolean?) format (String?) gatk4_jar_override (File?) mem_gb (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs entity_id (String) counts (File) CollectAllelicCounts Inputs Required bam (File, required ) bam_idx (File, required ) common_sites (File, required ) gatk_docker (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required ) Optional cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) minimum_base_quality (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs entity_id (String) allelic_counts (File) ScatterIntervals Inputs Required gatk_docker (String, required ) interval_list (File, required ) num_intervals_per_scatter (Int, required ) Optional cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) output_dir (String?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs scattered_interval_lists (Array[File]) PostprocessGermlineCNVCalls Inputs Required calling_configs (Array[File], required ) contig_ploidy_calls_tar (File, required ) denoising_configs (Array[File], required ) entity_id (String, required ) gatk_docker (String, required ) gcnv_calls_tars (Array[File], required ) gcnv_model_tars (Array[File], required ) gcnvkernel_version (Array[File], required ) ref_copy_number_autosomal_contigs (Int, required ) sample_index (Int, required ) sharded_interval_lists (Array[File], required ) Optional allosomal_contigs (Array[String]?) cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs genotyped_intervals_vcf (File) genotyped_segments_vcf (File) denoised_copy_ratios (File) CollectSampleQualityMetrics Inputs Required entity_id (String, required ) gatk_docker (String, required ) genotyped_segments_vcf (File, required ) maximum_number_events (Int, required ) Optional cpu (Int?) disk_space_gb (Int?) mem_gb (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs qc_status_file (File) qc_status_string (String) CollectModelQualityMetrics Inputs Required gatk_docker (String, required ) gcnv_model_tars (Array[File], required ) Optional cpu (Int?) disk_space_gb (Int?) mem_gb (Int?) preemptible_attempts (Int?) Defaults use_ssd (Boolean, default=false) Outputs qc_status_file (File) qc_status_string (String)","title":"cnv_common_tasks"},{"location":"tasks/cnv_common_tasks/#cnv_common_tasks","text":"","title":"cnv_common_tasks"},{"location":"tasks/cnv_common_tasks/#preprocessintervals","text":"description Reusing workflow from GATK Git Repository: https://github.com/broadinstitute/gatk/blob/master/scripts/cnv_wdl/cnv_common_tasks.wdl","title":"PreprocessIntervals"},{"location":"tasks/cnv_common_tasks/#inputs","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required","text":"gatk_docker (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional","text":"bin_length (Int?) blacklist_intervals (File?) cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) intervals (File?) mem_gb (Int?) padding (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs","text":"preprocessed_intervals (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#annotateintervals","text":"","title":"AnnotateIntervals"},{"location":"tasks/cnv_common_tasks/#inputs_1","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_1","text":"gatk_docker (String, required ) intervals (File, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_1","text":"cpu (Int?) disk_space_gb (Int?) feature_query_lookahead (Int?) gatk4_jar_override (File?) mappability_track_bed (File?) mappability_track_bed_idx (File?) mem_gb (Int?) preemptible_attempts (Int?) segmental_duplication_track_bed (File?) segmental_duplication_track_bed_idx (File?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_1","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_1","text":"annotated_intervals (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#filterintervals","text":"","title":"FilterIntervals"},{"location":"tasks/cnv_common_tasks/#inputs_2","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_2","text":"gatk_docker (String, required ) intervals (File, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_2","text":"annotated_intervals (File?) blacklist_intervals (File?) cpu (Int?) disk_space_gb (Int?) extreme_count_filter_maximum_percentile (Float?) extreme_count_filter_minimum_percentile (Float?) extreme_count_filter_percentage_of_samples (Float?) gatk4_jar_override (File?) low_count_filter_count_threshold (Int?) low_count_filter_percentage_of_samples (Float?) maximum_gc_content (Float?) maximum_mappability (Float?) maximum_segmental_duplication_content (Float?) mem_gb (Int?) minimum_gc_content (Float?) minimum_mappability (Float?) minimum_segmental_duplication_content (Float?) preemptible_attempts (Int?) read_count_files (Array[File]?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_2","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_2","text":"filtered_intervals (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#collectcounts","text":"","title":"CollectCounts"},{"location":"tasks/cnv_common_tasks/#inputs_3","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_3","text":"bam (File, required ) bam_idx (File, required ) gatk_docker (String, required ) intervals (File, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_3","text":"cpu (Int?) disk_space_gb (Int?) enable_indexing (Boolean?) format (String?) gatk4_jar_override (File?) mem_gb (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_3","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_3","text":"entity_id (String) counts (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#collectalleliccounts","text":"","title":"CollectAllelicCounts"},{"location":"tasks/cnv_common_tasks/#inputs_4","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_4","text":"bam (File, required ) bam_idx (File, required ) common_sites (File, required ) gatk_docker (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_4","text":"cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) minimum_base_quality (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_4","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_4","text":"entity_id (String) allelic_counts (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#scatterintervals","text":"","title":"ScatterIntervals"},{"location":"tasks/cnv_common_tasks/#inputs_5","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_5","text":"gatk_docker (String, required ) interval_list (File, required ) num_intervals_per_scatter (Int, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_5","text":"cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) output_dir (String?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_5","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_5","text":"scattered_interval_lists (Array[File])","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#postprocessgermlinecnvcalls","text":"","title":"PostprocessGermlineCNVCalls"},{"location":"tasks/cnv_common_tasks/#inputs_6","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_6","text":"calling_configs (Array[File], required ) contig_ploidy_calls_tar (File, required ) denoising_configs (Array[File], required ) entity_id (String, required ) gatk_docker (String, required ) gcnv_calls_tars (Array[File], required ) gcnv_model_tars (Array[File], required ) gcnvkernel_version (Array[File], required ) ref_copy_number_autosomal_contigs (Int, required ) sample_index (Int, required ) sharded_interval_lists (Array[File], required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_6","text":"allosomal_contigs (Array[String]?) cpu (Int?) disk_space_gb (Int?) gatk4_jar_override (File?) mem_gb (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_6","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_6","text":"genotyped_intervals_vcf (File) genotyped_segments_vcf (File) denoised_copy_ratios (File)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#collectsamplequalitymetrics","text":"","title":"CollectSampleQualityMetrics"},{"location":"tasks/cnv_common_tasks/#inputs_7","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_7","text":"entity_id (String, required ) gatk_docker (String, required ) genotyped_segments_vcf (File, required ) maximum_number_events (Int, required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_7","text":"cpu (Int?) disk_space_gb (Int?) mem_gb (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_7","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_7","text":"qc_status_file (File) qc_status_string (String)","title":"Outputs"},{"location":"tasks/cnv_common_tasks/#collectmodelqualitymetrics","text":"","title":"CollectModelQualityMetrics"},{"location":"tasks/cnv_common_tasks/#inputs_8","text":"","title":"Inputs"},{"location":"tasks/cnv_common_tasks/#required_8","text":"gatk_docker (String, required ) gcnv_model_tars (Array[File], required )","title":"Required"},{"location":"tasks/cnv_common_tasks/#optional_8","text":"cpu (Int?) disk_space_gb (Int?) mem_gb (Int?) preemptible_attempts (Int?)","title":"Optional"},{"location":"tasks/cnv_common_tasks/#defaults_8","text":"use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"tasks/cnv_common_tasks/#outputs_8","text":"qc_status_file (File) qc_status_string (String)","title":"Outputs"},{"location":"workflows/AlignAndCheckFingerprintCCS/","text":"AlignAndCheckFingerprintCCS AlignAndCheckFingerprintCCS desciption Given an unaligned CCS/HiFi BAM for a sample, align and verify fingerprint. Inputs Required bam_sample_name (String, required ) fp_store (String, required ): Bucket name and prefix (gs://...) storing the fingerprinting VCFs library (String, required ) ref_map_file (File, required ) sample_id_at_store (String, required ): Name of the sample at the fingerprint store. turn_off_fingperprint_check (Boolean, required ): Please turn of fingerprint check if the reference is not GRCh38. uBAM (File, required ) uPBI (File, required ) Optional AlignReads.runtime_attr_override (RuntimeAttr?) AlignReadsTogether.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) ShardLongReads.runtime_attr_override (RuntimeAttr?) ValidateShard.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedPBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?) FPCheckAoU.CheckFingerprint.runtime_attr_override (RuntimeAttr?) FPCheckAoU.ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) FPCheckAoU.GetVCFSampleName.runtime_attr_override (RuntimeAttr?) FPCheckAoU.ResolveFPVCFPath.runtime_attr_override (RuntimeAttr?) Defaults AlignReads.prefix (String, default=\"out\") AlignReadsTogether.prefix (String, default=\"out\") FPCheckAoU.lod_fail_threshold (Float, default=-3.0) FPCheckAoU.lod_pass_threshold (Float, default=6.0) ShardLongReads.drop_per_base_N_pulse_tags (Boolean, default=false) ShardLongReads.num_threads (Int, default=8) ShardLongReads.prefix (String, default=\"shard\") CollectPacBioAlignedMetrics.SummarizeAlignedPBI.qual_threshold (Int, default=0) FPCheckAoU.FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']) Outputs aligned_bam (File) aligned_bai (File) aligned_pbi (File) alignment_metrics_tar_gz (File) fp_lod_expected_sample (Float?) fp_status (String?) fingerprint_detail_tar_gz (File?) Dot Diagram","title":"AlignAndCheckFingerprintCCS"},{"location":"workflows/AlignAndCheckFingerprintCCS/#alignandcheckfingerprintccs","text":"","title":"AlignAndCheckFingerprintCCS"},{"location":"workflows/AlignAndCheckFingerprintCCS/#alignandcheckfingerprintccs_1","text":"desciption Given an unaligned CCS/HiFi BAM for a sample, align and verify fingerprint.","title":"AlignAndCheckFingerprintCCS"},{"location":"workflows/AlignAndCheckFingerprintCCS/#inputs","text":"","title":"Inputs"},{"location":"workflows/AlignAndCheckFingerprintCCS/#required","text":"bam_sample_name (String, required ) fp_store (String, required ): Bucket name and prefix (gs://...) storing the fingerprinting VCFs library (String, required ) ref_map_file (File, required ) sample_id_at_store (String, required ): Name of the sample at the fingerprint store. turn_off_fingperprint_check (Boolean, required ): Please turn of fingerprint check if the reference is not GRCh38. uBAM (File, required ) uPBI (File, required )","title":"Required"},{"location":"workflows/AlignAndCheckFingerprintCCS/#optional","text":"AlignReads.runtime_attr_override (RuntimeAttr?) AlignReadsTogether.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) ShardLongReads.runtime_attr_override (RuntimeAttr?) ValidateShard.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedPBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) CollectPacBioAlignedMetrics.SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?) FPCheckAoU.CheckFingerprint.runtime_attr_override (RuntimeAttr?) FPCheckAoU.ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) FPCheckAoU.GetVCFSampleName.runtime_attr_override (RuntimeAttr?) FPCheckAoU.ResolveFPVCFPath.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/AlignAndCheckFingerprintCCS/#defaults","text":"AlignReads.prefix (String, default=\"out\") AlignReadsTogether.prefix (String, default=\"out\") FPCheckAoU.lod_fail_threshold (Float, default=-3.0) FPCheckAoU.lod_pass_threshold (Float, default=6.0) ShardLongReads.drop_per_base_N_pulse_tags (Boolean, default=false) ShardLongReads.num_threads (Int, default=8) ShardLongReads.prefix (String, default=\"shard\") CollectPacBioAlignedMetrics.SummarizeAlignedPBI.qual_threshold (Int, default=0) FPCheckAoU.FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV'])","title":"Defaults"},{"location":"workflows/AlignAndCheckFingerprintCCS/#outputs","text":"aligned_bam (File) aligned_bai (File) aligned_pbi (File) alignment_metrics_tar_gz (File) fp_lod_expected_sample (Float?) fp_status (String?) fingerprint_detail_tar_gz (File?)","title":"Outputs"},{"location":"workflows/AlignAndCheckFingerprintCCS/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/AlignedMetrics/","text":"AlignedMetrics AlignedMetrics description Workflow to generate metrics for aligned BAMs Inputs Required aligned_bai (File, required ): Index for aligned BAM file aligned_bam (File, required ): Aligned BAM file ref_dict (File, required ): Reference dictionary file ref_fasta (File, required ): Reference FASTA file Optional gcs_output_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. AlignedFlagStats.runtime_attr_override (RuntimeAttr?) AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) FFCoverageFullDist.keyfile (File?) FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) FFCoverageGlobalDist.keyfile (File?) FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) FFCoverageQuantized.keyfile (File?) FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) FFCoverageQuantizedCsi.keyfile (File?) FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) FFCoverageQuantizedDist.keyfile (File?) FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) FFCoverageRegionDist.keyfile (File?) FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) FFCoverageRegions.keyfile (File?) FFCoverageRegions.runtime_attr_override (RuntimeAttr?) FFCoverageRegionsCsi.keyfile (File?) FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) FFDepthSummaries.keyfile (File?) FFDepthSummaries.runtime_attr_override (RuntimeAttr?) FFYieldAligned.keyfile (File?) FFYieldAligned.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MosDepth.runtime_attr_override (RuntimeAttr?) MosDepth.window_size (Int?) SummarizeDepth.runtime_attr_override (RuntimeAttr?) Outputs aligned_flag_stats (File) coverage_full_dist (Array[File]) coverage_global_dist (Array[File]) coverage_region_dist (Array[File]) coverage_regions (Array[File]) coverage_regions_csi (Array[File]) coverage_quantized_dist (Array[File]) coverage_quantized (Array[File]) coverage_quantized_csi (Array[File]) aligned_np_hist (File) aligned_range_gap_hist (File) aligned_zmw_hist (File) aligned_prl_counts (File) aligned_prl_hist (File) aligned_prl_nx (File) aligned_prl_yield_hist (File) aligned_rl_counts (File) aligned_rl_hist (File) aligned_rl_nx (File) aligned_rl_yield_hist (File) raw_chr_intervals (File) Dot Diagram","title":"AlignedMetrics"},{"location":"workflows/AlignedMetrics/#alignedmetrics","text":"","title":"AlignedMetrics"},{"location":"workflows/AlignedMetrics/#alignedmetrics_1","text":"description Workflow to generate metrics for aligned BAMs","title":"AlignedMetrics"},{"location":"workflows/AlignedMetrics/#inputs","text":"","title":"Inputs"},{"location":"workflows/AlignedMetrics/#required","text":"aligned_bai (File, required ): Index for aligned BAM file aligned_bam (File, required ): Aligned BAM file ref_dict (File, required ): Reference dictionary file ref_fasta (File, required ): Reference FASTA file","title":"Required"},{"location":"workflows/AlignedMetrics/#optional","text":"gcs_output_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. AlignedFlagStats.runtime_attr_override (RuntimeAttr?) AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) FFCoverageFullDist.keyfile (File?) FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) FFCoverageGlobalDist.keyfile (File?) FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) FFCoverageQuantized.keyfile (File?) FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) FFCoverageQuantizedCsi.keyfile (File?) FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) FFCoverageQuantizedDist.keyfile (File?) FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) FFCoverageRegionDist.keyfile (File?) FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) FFCoverageRegions.keyfile (File?) FFCoverageRegions.runtime_attr_override (RuntimeAttr?) FFCoverageRegionsCsi.keyfile (File?) FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) FFDepthSummaries.keyfile (File?) FFDepthSummaries.runtime_attr_override (RuntimeAttr?) FFYieldAligned.keyfile (File?) FFYieldAligned.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MosDepth.runtime_attr_override (RuntimeAttr?) MosDepth.window_size (Int?) SummarizeDepth.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/AlignedMetrics/#outputs","text":"aligned_flag_stats (File) coverage_full_dist (Array[File]) coverage_global_dist (Array[File]) coverage_region_dist (Array[File]) coverage_regions (Array[File]) coverage_regions_csi (Array[File]) coverage_quantized_dist (Array[File]) coverage_quantized (Array[File]) coverage_quantized_csi (Array[File]) aligned_np_hist (File) aligned_range_gap_hist (File) aligned_zmw_hist (File) aligned_prl_counts (File) aligned_prl_hist (File) aligned_prl_nx (File) aligned_prl_yield_hist (File) aligned_rl_counts (File) aligned_rl_hist (File) aligned_rl_nx (File) aligned_rl_yield_hist (File) raw_chr_intervals (File)","title":"Outputs"},{"location":"workflows/AlignedMetrics/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/AnnotateTranscriptomeWithGuide/","text":"AnnotateTranscriptomeWithGuide AnnotateTranscriptomeWithGuide description Annotate a transcriptome with a guide GTF Inputs Required aligned_bai (File, required ): GCS path to aligned BAM file index aligned_bam (File, required ): GCS path to aligned BAM file gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files gtf (File, required ): guide GTF (e.g. Gencode38) participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional CompareTranscriptomes.runtime_attr_override (RuntimeAttr?) ExtractTranscriptSequences.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedGTF.keyfile (File?) FinalizeAnnotatedGTF.name (String?) FinalizeAnnotatedGTF.runtime_attr_override (RuntimeAttr?) FinalizeDict.keyfile (File?) FinalizeDict.name (String?) FinalizeDict.runtime_attr_override (RuntimeAttr?) FinalizeFa.keyfile (File?) FinalizeFa.name (String?) FinalizeFa.runtime_attr_override (RuntimeAttr?) FinalizeFai.keyfile (File?) FinalizeFai.name (String?) FinalizeFai.runtime_attr_override (RuntimeAttr?) FinalizeGTF.keyfile (File?) FinalizeGTF.name (String?) FinalizeGTF.runtime_attr_override (RuntimeAttr?) FinalizeLoci.keyfile (File?) FinalizeLoci.name (String?) FinalizeLoci.runtime_attr_override (RuntimeAttr?) FinalizeRefMap.keyfile (File?) FinalizeRefMap.name (String?) FinalizeRefMap.runtime_attr_override (RuntimeAttr?) FinalizeStats.keyfile (File?) FinalizeStats.runtime_attr_override (RuntimeAttr?) FinalizeTMap.keyfile (File?) FinalizeTMap.name (String?) FinalizeTMap.runtime_attr_override (RuntimeAttr?) FinalizeTracking.keyfile (File?) FinalizeTracking.name (String?) FinalizeTracking.runtime_attr_override (RuntimeAttr?) Quantify.runtime_attr_override (RuntimeAttr?) Defaults keep_retained_introns (Boolean, default=false): keep apparently retained introns in new transcriptome annotation Outputs transcriptome_gtf (File) transcriptome_fa (File) transcriptome_fai (File) transcriptome_dict (File) comp_annotated_gtf (File) comp_loci (File) comp_stats (File) comp_tracking (File) comp_refmap (File) comp_tmap (File) Dot Diagram","title":"AnnotateTranscriptomeWithGuide"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#annotatetranscriptomewithguide","text":"","title":"AnnotateTranscriptomeWithGuide"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#annotatetranscriptomewithguide_1","text":"description Annotate a transcriptome with a guide GTF","title":"AnnotateTranscriptomeWithGuide"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#inputs","text":"","title":"Inputs"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#required","text":"aligned_bai (File, required ): GCS path to aligned BAM file index aligned_bam (File, required ): GCS path to aligned BAM file gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files gtf (File, required ): guide GTF (e.g. Gencode38) participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#optional","text":"CompareTranscriptomes.runtime_attr_override (RuntimeAttr?) ExtractTranscriptSequences.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedGTF.keyfile (File?) FinalizeAnnotatedGTF.name (String?) FinalizeAnnotatedGTF.runtime_attr_override (RuntimeAttr?) FinalizeDict.keyfile (File?) FinalizeDict.name (String?) FinalizeDict.runtime_attr_override (RuntimeAttr?) FinalizeFa.keyfile (File?) FinalizeFa.name (String?) FinalizeFa.runtime_attr_override (RuntimeAttr?) FinalizeFai.keyfile (File?) FinalizeFai.name (String?) FinalizeFai.runtime_attr_override (RuntimeAttr?) FinalizeGTF.keyfile (File?) FinalizeGTF.name (String?) FinalizeGTF.runtime_attr_override (RuntimeAttr?) FinalizeLoci.keyfile (File?) FinalizeLoci.name (String?) FinalizeLoci.runtime_attr_override (RuntimeAttr?) FinalizeRefMap.keyfile (File?) FinalizeRefMap.name (String?) FinalizeRefMap.runtime_attr_override (RuntimeAttr?) FinalizeStats.keyfile (File?) FinalizeStats.runtime_attr_override (RuntimeAttr?) FinalizeTMap.keyfile (File?) FinalizeTMap.name (String?) FinalizeTMap.runtime_attr_override (RuntimeAttr?) FinalizeTracking.keyfile (File?) FinalizeTracking.name (String?) FinalizeTracking.runtime_attr_override (RuntimeAttr?) Quantify.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#defaults","text":"keep_retained_introns (Boolean, default=false): keep apparently retained introns in new transcriptome annotation","title":"Defaults"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#outputs","text":"transcriptome_gtf (File) transcriptome_fa (File) transcriptome_fai (File) transcriptome_dict (File) comp_annotated_gtf (File) comp_loci (File) comp_stats (File) comp_tracking (File) comp_refmap (File) comp_tmap (File)","title":"Outputs"},{"location":"workflows/AnnotateTranscriptomeWithGuide/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/AssignChildLongReads/","text":"AssignChildLongReads AssignChildLongReadsGivenParentalKmerStats description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication 'De novo assembly of haplotype-resolved genomes with trio binning' https://www.nature.com/articles/nbt.4277 . This holds the sub-workflow for part two: given the k-mer stats database from part one, classify child long reads. We separate this out based on two concerns: 1. we can test out using different k-value when collecting parental k-mer states 2. we can collect parental k-mer stats once and classify all children reads (different sibblings, technologies) separately. Inputs Required child_long_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of child long reads long_read_platform (String, required ): platform of long read sequencing; currently only one of [pacbio-raw, nanopore-raw] is supported meryl_db_files_father (Array[File], required ): Meryl databases files on paternal (short) reads meryl_db_files_mother (Array[File], required ): Meryl databases files on maternal (short) reads meryl_stats_father (File, required ): Meryl statistics single file on paternal (short) reads meryl_stats_mother (File, required ): Meryl statistics single file on maternal (short) reads vm_local_monitoring_script (File, required ): GCS file holding a resouce monitoring script that runs locally and collects info for a very specific purpose workdir_name (String, required ): name of working directory Optional run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false AssignChildLongReads.runtime_attr_override (RuntimeAttr?) Defaults child_read_assign_memoryG_est (Int, default=32): [default-valued] estimate on how many GB memory to allocate to the child longread classification step child_read_assign_threads_est (Int, default=36): [default-valued] estimate on how many threads to allocate to the child longread classification step Outputs reads_assigned_to_father (File) reads_assigned_to_mother (File) unassigned_reads (File) Dot Diagram","title":"AssignChildLongReads"},{"location":"workflows/AssignChildLongReads/#assignchildlongreads","text":"","title":"AssignChildLongReads"},{"location":"workflows/AssignChildLongReads/#_1","text":"","title":""},{"location":"workflows/AssignChildLongReads/#assignchildlongreadsgivenparentalkmerstats","text":"description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication 'De novo assembly of haplotype-resolved genomes with trio binning' https://www.nature.com/articles/nbt.4277 . This holds the sub-workflow for part two: given the k-mer stats database from part one, classify child long reads. We separate this out based on two concerns: 1. we can test out using different k-value when collecting parental k-mer states 2. we can collect parental k-mer stats once and classify all children reads (different sibblings, technologies) separately.","title":"AssignChildLongReadsGivenParentalKmerStats"},{"location":"workflows/AssignChildLongReads/#inputs","text":"","title":"Inputs"},{"location":"workflows/AssignChildLongReads/#required","text":"child_long_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of child long reads long_read_platform (String, required ): platform of long read sequencing; currently only one of [pacbio-raw, nanopore-raw] is supported meryl_db_files_father (Array[File], required ): Meryl databases files on paternal (short) reads meryl_db_files_mother (Array[File], required ): Meryl databases files on maternal (short) reads meryl_stats_father (File, required ): Meryl statistics single file on paternal (short) reads meryl_stats_mother (File, required ): Meryl statistics single file on maternal (short) reads vm_local_monitoring_script (File, required ): GCS file holding a resouce monitoring script that runs locally and collects info for a very specific purpose workdir_name (String, required ): name of working directory","title":"Required"},{"location":"workflows/AssignChildLongReads/#optional","text":"run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false AssignChildLongReads.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/AssignChildLongReads/#defaults","text":"child_read_assign_memoryG_est (Int, default=32): [default-valued] estimate on how many GB memory to allocate to the child longread classification step child_read_assign_threads_est (Int, default=36): [default-valued] estimate on how many threads to allocate to the child longread classification step","title":"Defaults"},{"location":"workflows/AssignChildLongReads/#outputs","text":"reads_assigned_to_father (File) reads_assigned_to_mother (File) unassigned_reads (File)","title":"Outputs"},{"location":"workflows/AssignChildLongReads/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/BackupWorkspace/","text":"BackupWorkspace BackupWorkspace author Jonn Smith description Backup a Terra workspace, copying the backup to the workspace itself (in a backups folder), and optionally to another folder. Inputs Required default_bucket (String, required ) namespace (String, required ) workspace (String, required ) Optional additional_output_path (String?): GCP folder in which to place an additional copy of the backup. CopyPythonBackupToAlternateLocation.keyfile (File?) CopyPythonBackupToAlternateLocation.runtime_attr_override (RuntimeAttr?) t001_RunBackupPython.runtime_attr_override (RuntimeAttr?) Outputs t001_RunBackupPython.backup_path (String) CopyPythonBackupToAlternateLocation.gcs_dir (String?) Dot Diagram","title":"BackupWorkspace"},{"location":"workflows/BackupWorkspace/#backupworkspace","text":"","title":"BackupWorkspace"},{"location":"workflows/BackupWorkspace/#backupworkspace_1","text":"author Jonn Smith description Backup a Terra workspace, copying the backup to the workspace itself (in a backups folder), and optionally to another folder.","title":"BackupWorkspace"},{"location":"workflows/BackupWorkspace/#inputs","text":"","title":"Inputs"},{"location":"workflows/BackupWorkspace/#required","text":"default_bucket (String, required ) namespace (String, required ) workspace (String, required )","title":"Required"},{"location":"workflows/BackupWorkspace/#optional","text":"additional_output_path (String?): GCP folder in which to place an additional copy of the backup. CopyPythonBackupToAlternateLocation.keyfile (File?) CopyPythonBackupToAlternateLocation.runtime_attr_override (RuntimeAttr?) t001_RunBackupPython.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/BackupWorkspace/#outputs","text":"t001_RunBackupPython.backup_path (String) CopyPythonBackupToAlternateLocation.gcs_dir (String?)","title":"Outputs"},{"location":"workflows/BackupWorkspace/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/BenchmarkVCFs/","text":"BenchmarkVCFs Benchmark description A workflow to calculate sensitivity and precision of a germline variant calling pipeline by comparing a 'call' vcf produced by the pipeline to a gold standard 'truth' vcf. Allows for stratification based on interval lists, bed files, or variant types defined according to GATK SelectVariants. Borrowed and adapted from the Broad Institute's Hydrogen/Palantir repo, courtesy of Michael Gatzen (https://github.com/broadinstitute/palantir-workflows/tree/mg_benchmark_compare/BenchmarkVCFs ; permalink: https://github.com/broadinstitute/palantir-workflows/blob/0bf48efc6de818364993e46d89591a035cfd80c7/BenchmarkVCFs/BenchmarkVCFs.wdl). Inputs Required confidenceInterval (File, required ); description : confidence interval for truth set (can be bed or picard interval_list) evalLabel (String, required ); description : label to identify vcf to be evaluated evalVcf (File, required ); description : vcfs to be evaluated evalVcfIndex (File, required ); description : vcf index for evalVcf ref_map_file (File, required ); description : table indicating reference sequence and auxillary file locations truthLabel (String, required ); description : label by which to indentify truth set truthVcf (File, required ); description : truth vcf against which to evaluate truthVcfIndex (File, required ) Optional analysisRegion (String?); description : if provided (gatk format, single interval e.g., 'chr20', or 'chr20:1-10') all the analysis will be performed only within the region. annotationNames (Array[String]?); description : Annotation arguments to GATK (-A argument, multiple OK) dummyInputForTerraCallCaching (String?); description : When running on Terra, use workspace.name as this input to ensure that all tasks will only cache hit to runs in your own workspace. This will prevent call caching from failing with 'Cache Miss (10 failed copy attempts)'. Outside of Terra this can be left empty. This dummy input is only needed for tasks that have no inputs specific to the sample being run (such as CreateIntervalList which does not take in any sample data). evalBam (File?); description : bam file contaning the reads that generated the evalVcf evalBamLabel (String?); description : label to use for the evalBam in IGV gatkJarForAnnotation (File?); description : GATK jar that can calculate necessary annotations for jexl Selections when using VCFEval. hapMap (File?); description : reference haplotype map for CrosscheckFingerprints jexlVariantSelectors (Array[String]?); description : variant types to select over (defined by jexl fed to GATK SelectVariants) preemptible (Int?) threadsVcfEval (Int?) truthBam (File?); description : bam file contaning the reads that generated the truthVcf truthBamLabel (String?); description : label to use for the truthBam in IGV variantSelectorLabels (Array[String]?); description : labels by which to identify variant selectors (must be same length as jexlVariantSelectors) vcfScoreField (String?); description : Have vcfEval use this field for making the roc-plot. If this is an info field (like VSQLOD) it should be provided as INFO.VQSLOD, otherewise it is assumed to be a format field. CheckForVariantsEval.memoryMaybe (Int?) CheckForVariantsTruth.memoryMaybe (Int?) ConfidenceConvertIntervals.memoryMaybe (Int?) CountUNKVcfEval.memoryMaybe (Int?) EvalIndelLengthVcfEval.memoryMaybe (Int?) EvalSelectorVcfEval.memoryMaybe (Int?) Match.memoryMaybe (Int?) StandardVcfEval.memUser (String?) StratConvertIntervals.memoryMaybe (Int?) Defaults doIndelLengthStratification (Boolean, default=true); description : whether or not to perform stratification by indel length enableRefOverlap (Boolean, default=false) gatkTag (String, default=\"4.0.11.0\"); description : version of gatk docker to use. Defaults to 4.0.11.0 passingOnly (Boolean, default=true); description : Have vcfEval only consider the passing variants requireMatchingGenotypes (Boolean, default=true); description : whether to require genotypes to match in order to be a true positive stratIntervals (Array[File], default=[]); description : intervals for stratifiction (can be picard interval_list or bed format) stratLabels (Array[String], default=[]); description : labels by which to identify stratification intervals (must be same length as stratIntervals) truthIsSitesOnlyVcf (Boolean, default=false); description : whether the truth VCF is a sites-only VCF file without any sample information Outputs summary (File) snpPrecision (Float) indelPrecision (Float) snpRecall (Float) indelRecall (Float) snpF1Score (Float) indelF1Score (Float) snpRocs (Array[File?]) nonSnpRocs (Array[File?]) Dot Diagram","title":"BenchmarkVCFs"},{"location":"workflows/BenchmarkVCFs/#benchmarkvcfs","text":"","title":"BenchmarkVCFs"},{"location":"workflows/BenchmarkVCFs/#_1","text":"","title":""},{"location":"workflows/BenchmarkVCFs/#_2","text":"","title":""},{"location":"workflows/BenchmarkVCFs/#_3","text":"","title":""},{"location":"workflows/BenchmarkVCFs/#benchmark","text":"description A workflow to calculate sensitivity and precision of a germline variant calling pipeline by comparing a 'call' vcf produced by the pipeline to a gold standard 'truth' vcf. Allows for stratification based on interval lists, bed files, or variant types defined according to GATK SelectVariants. Borrowed and adapted from the Broad Institute's Hydrogen/Palantir repo, courtesy of Michael Gatzen (https://github.com/broadinstitute/palantir-workflows/tree/mg_benchmark_compare/BenchmarkVCFs ; permalink: https://github.com/broadinstitute/palantir-workflows/blob/0bf48efc6de818364993e46d89591a035cfd80c7/BenchmarkVCFs/BenchmarkVCFs.wdl).","title":"Benchmark"},{"location":"workflows/BenchmarkVCFs/#inputs","text":"","title":"Inputs"},{"location":"workflows/BenchmarkVCFs/#required","text":"confidenceInterval (File, required ); description : confidence interval for truth set (can be bed or picard interval_list) evalLabel (String, required ); description : label to identify vcf to be evaluated evalVcf (File, required ); description : vcfs to be evaluated evalVcfIndex (File, required ); description : vcf index for evalVcf ref_map_file (File, required ); description : table indicating reference sequence and auxillary file locations truthLabel (String, required ); description : label by which to indentify truth set truthVcf (File, required ); description : truth vcf against which to evaluate truthVcfIndex (File, required )","title":"Required"},{"location":"workflows/BenchmarkVCFs/#optional","text":"analysisRegion (String?); description : if provided (gatk format, single interval e.g., 'chr20', or 'chr20:1-10') all the analysis will be performed only within the region. annotationNames (Array[String]?); description : Annotation arguments to GATK (-A argument, multiple OK) dummyInputForTerraCallCaching (String?); description : When running on Terra, use workspace.name as this input to ensure that all tasks will only cache hit to runs in your own workspace. This will prevent call caching from failing with 'Cache Miss (10 failed copy attempts)'. Outside of Terra this can be left empty. This dummy input is only needed for tasks that have no inputs specific to the sample being run (such as CreateIntervalList which does not take in any sample data). evalBam (File?); description : bam file contaning the reads that generated the evalVcf evalBamLabel (String?); description : label to use for the evalBam in IGV gatkJarForAnnotation (File?); description : GATK jar that can calculate necessary annotations for jexl Selections when using VCFEval. hapMap (File?); description : reference haplotype map for CrosscheckFingerprints jexlVariantSelectors (Array[String]?); description : variant types to select over (defined by jexl fed to GATK SelectVariants) preemptible (Int?) threadsVcfEval (Int?) truthBam (File?); description : bam file contaning the reads that generated the truthVcf truthBamLabel (String?); description : label to use for the truthBam in IGV variantSelectorLabels (Array[String]?); description : labels by which to identify variant selectors (must be same length as jexlVariantSelectors) vcfScoreField (String?); description : Have vcfEval use this field for making the roc-plot. If this is an info field (like VSQLOD) it should be provided as INFO.VQSLOD, otherewise it is assumed to be a format field. CheckForVariantsEval.memoryMaybe (Int?) CheckForVariantsTruth.memoryMaybe (Int?) ConfidenceConvertIntervals.memoryMaybe (Int?) CountUNKVcfEval.memoryMaybe (Int?) EvalIndelLengthVcfEval.memoryMaybe (Int?) EvalSelectorVcfEval.memoryMaybe (Int?) Match.memoryMaybe (Int?) StandardVcfEval.memUser (String?) StratConvertIntervals.memoryMaybe (Int?)","title":"Optional"},{"location":"workflows/BenchmarkVCFs/#defaults","text":"doIndelLengthStratification (Boolean, default=true); description : whether or not to perform stratification by indel length enableRefOverlap (Boolean, default=false) gatkTag (String, default=\"4.0.11.0\"); description : version of gatk docker to use. Defaults to 4.0.11.0 passingOnly (Boolean, default=true); description : Have vcfEval only consider the passing variants requireMatchingGenotypes (Boolean, default=true); description : whether to require genotypes to match in order to be a true positive stratIntervals (Array[File], default=[]); description : intervals for stratifiction (can be picard interval_list or bed format) stratLabels (Array[String], default=[]); description : labels by which to identify stratification intervals (must be same length as stratIntervals) truthIsSitesOnlyVcf (Boolean, default=false); description : whether the truth VCF is a sites-only VCF file without any sample information","title":"Defaults"},{"location":"workflows/BenchmarkVCFs/#outputs","text":"summary (File) snpPrecision (Float) indelPrecision (Float) snpRecall (Float) indelRecall (Float) snpF1Score (Float) indelF1Score (Float) snpRocs (Array[File?]) nonSnpRocs (Array[File?])","title":"Outputs"},{"location":"workflows/BenchmarkVCFs/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/","text":"BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling BroadOnPremMalariaPipeline_1_Alignment desciption Recreation of the first and second steps of the Broad OnPrem Malaria Pipeline. Aligns reads and filters out human contamination, then calls variants and creates both a GVCF file and a recalibrated variants file. Inputs Required contaminant_ref_map_file (File, required ) contaminant_ref_name (String, required ) ref_map_file (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_3d7_hb3_index (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_7g8_gb4_index (File, required ) resource_vcf_hb3_dd2 (File, required ) resource_vcf_hb3_dd2_index (File, required ) sample_name (String, required ) Optional bai (File?) bam (File?) fq_end1 (File?) fq_end2 (File?) t_002_RevertSam.runtime_attr_override (RuntimeAttr?) t_003_Bam2Fastq.bam_index (File?) t_003_Bam2Fastq.reference_dict (File?) t_003_Bam2Fastq.reference_fasta (File?) t_003_Bam2Fastq.reference_fasta_index (File?) t_003_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_004_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_FilterOutHumanReads.runtime_attr_override (RuntimeAttr?) t_006_AlignReads.runtime_attr_override (RuntimeAttr?) t_008_SortAlignedBam.runtime_attr_override (RuntimeAttr?) t_009_MarkDuplicates.read_name_regex (String?) t_009_MarkDuplicates.runtime_attr_override (RuntimeAttr?) t_009_MarkDuplicates.sorting_collection_size_ratio (Float?) t_010_ReorderSam.runtime_attr_override (RuntimeAttr?) t_011_RealignIndels.runtime_attr_override (RuntimeAttr?) t_012_BQSR.runtime_attr_override (RuntimeAttr?) t_012_IndexRealignIndels.runtime_attr_override (RuntimeAttr?) t_013_HaplotypeCaller.runtime_attr_override (RuntimeAttr?) t_013_IndexBQSR.runtime_attr_override (RuntimeAttr?) t_014_HaplotypeCallerGvcfMode.runtime_attr_override (RuntimeAttr?) t_015_VariantRecalibrator.runtime_attr_override (RuntimeAttr?) t_016_SortCompressIndexRawVCF.runtime_attr_override (RuntimeAttr?) t_017_SortCompressIndexVCF.runtime_attr_override (RuntimeAttr?) t_018_SortCompressIndexGVCF.runtime_attr_override (RuntimeAttr?) Defaults t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_013_HaplotypeCaller.gvcf_mode (Boolean, default=false) Outputs raw_vcf (File) raw_vcf_index (File) recalibrated_vcf (File) recalibrated_vcf_index (File) gvcf (File) gvcf_index (File) Dot Diagram","title":"BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#broadonpremmalariapipeline_1_alignment_and_variant_calling","text":"","title":"BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#broadonpremmalariapipeline_1_alignment","text":"desciption Recreation of the first and second steps of the Broad OnPrem Malaria Pipeline. Aligns reads and filters out human contamination, then calls variants and creates both a GVCF file and a recalibrated variants file.","title":"BroadOnPremMalariaPipeline_1_Alignment"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#inputs","text":"","title":"Inputs"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#required","text":"contaminant_ref_map_file (File, required ) contaminant_ref_name (String, required ) ref_map_file (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_3d7_hb3_index (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_7g8_gb4_index (File, required ) resource_vcf_hb3_dd2 (File, required ) resource_vcf_hb3_dd2_index (File, required ) sample_name (String, required )","title":"Required"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#optional","text":"bai (File?) bam (File?) fq_end1 (File?) fq_end2 (File?) t_002_RevertSam.runtime_attr_override (RuntimeAttr?) t_003_Bam2Fastq.bam_index (File?) t_003_Bam2Fastq.reference_dict (File?) t_003_Bam2Fastq.reference_fasta (File?) t_003_Bam2Fastq.reference_fasta_index (File?) t_003_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_004_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_FilterOutHumanReads.runtime_attr_override (RuntimeAttr?) t_006_AlignReads.runtime_attr_override (RuntimeAttr?) t_008_SortAlignedBam.runtime_attr_override (RuntimeAttr?) t_009_MarkDuplicates.read_name_regex (String?) t_009_MarkDuplicates.runtime_attr_override (RuntimeAttr?) t_009_MarkDuplicates.sorting_collection_size_ratio (Float?) t_010_ReorderSam.runtime_attr_override (RuntimeAttr?) t_011_RealignIndels.runtime_attr_override (RuntimeAttr?) t_012_BQSR.runtime_attr_override (RuntimeAttr?) t_012_IndexRealignIndels.runtime_attr_override (RuntimeAttr?) t_013_HaplotypeCaller.runtime_attr_override (RuntimeAttr?) t_013_IndexBQSR.runtime_attr_override (RuntimeAttr?) t_014_HaplotypeCallerGvcfMode.runtime_attr_override (RuntimeAttr?) t_015_VariantRecalibrator.runtime_attr_override (RuntimeAttr?) t_016_SortCompressIndexRawVCF.runtime_attr_override (RuntimeAttr?) t_017_SortCompressIndexVCF.runtime_attr_override (RuntimeAttr?) t_018_SortCompressIndexGVCF.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#defaults","text":"t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_013_HaplotypeCaller.gvcf_mode (Boolean, default=false)","title":"Defaults"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#outputs","text":"raw_vcf (File) raw_vcf_index (File) recalibrated_vcf (File) recalibrated_vcf_index (File) gvcf (File) gvcf_index (File)","title":"Outputs"},{"location":"workflows/BroadOnPremMalariaPipeline_1_Alignment_and_Variant_Calling/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/","text":"BroadOnPremMalariaPipeline_2_JointVariantCalling BroadOnPremMalariaPipeline_2_JointVariantCalling desciption Recreation of the second step of the Broad OnPrem Malaria Pipeline. Joint calls and recalibrates/filters variants. Inputs Required ref_map_file (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_hb3_dd2 (File, required ) sample_name (String, required ) vcf_files (Array[File], required ) vcf_index_files (Array[File], required ) t_002_VariantRecalibrator.resource_vcf_3d7_hb3_index (File, required ) t_002_VariantRecalibrator.resource_vcf_7g8_gb4_index (File, required ) t_002_VariantRecalibrator.resource_vcf_hb3_dd2_index (File, required ) Optional t_001_GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) t_002_VariantRecalibrator.runtime_attr_override (RuntimeAttr?) t_003_SortCompressIndexVcf.runtime_attr_override (RuntimeAttr?) Outputs joint_vcf (File) joint_vcf_index (File) Dot Diagram","title":"BroadOnPremMalariaPipeline_2_JointVariantCalling"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#broadonpremmalariapipeline_2_jointvariantcalling","text":"","title":"BroadOnPremMalariaPipeline_2_JointVariantCalling"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#broadonpremmalariapipeline_2_jointvariantcalling_1","text":"desciption Recreation of the second step of the Broad OnPrem Malaria Pipeline. Joint calls and recalibrates/filters variants.","title":"BroadOnPremMalariaPipeline_2_JointVariantCalling"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#inputs","text":"","title":"Inputs"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#required","text":"ref_map_file (File, required ) resource_vcf_3d7_hb3 (File, required ) resource_vcf_7g8_gb4 (File, required ) resource_vcf_hb3_dd2 (File, required ) sample_name (String, required ) vcf_files (Array[File], required ) vcf_index_files (Array[File], required ) t_002_VariantRecalibrator.resource_vcf_3d7_hb3_index (File, required ) t_002_VariantRecalibrator.resource_vcf_7g8_gb4_index (File, required ) t_002_VariantRecalibrator.resource_vcf_hb3_dd2_index (File, required )","title":"Required"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#optional","text":"t_001_GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) t_002_VariantRecalibrator.runtime_attr_override (RuntimeAttr?) t_003_SortCompressIndexVcf.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#outputs","text":"joint_vcf (File) joint_vcf_index (File)","title":"Outputs"},{"location":"workflows/BroadOnPremMalariaPipeline_2_JointVariantCalling/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CCSPepper/","text":"CCSPepper CCSPepper description Workflow for getting haplotagged BAM, VCF and gVCF from DV-pepper. Note VCF is un-phased. Inputs Required bai (File, required ): Input BAM index file bam (File, required ): Input BAM file dv_memory (Int, required ): Memory for DeepVariant dv_threads (Int, required ): Number of threads for DeepVariant pepper_memory (Int, required ): Memory for Pepper pepper_threads (Int, required ): Number of threads for Pepper ref_fasta (File, required ): Reference fasta file ref_fasta_fai (File, required ): Reference fasta index file Optional deep_variant.runtime_attr_override (RuntimeAttr?) get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?) Defaults zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task Outputs VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File) hap_tagged_bam (File) hap_tagged_bai (File) Dot Diagram","title":"CCSPepper"},{"location":"workflows/CCSPepper/#ccspepper","text":"","title":"CCSPepper"},{"location":"workflows/CCSPepper/#ccspepper_1","text":"description Workflow for getting haplotagged BAM, VCF and gVCF from DV-pepper. Note VCF is un-phased.","title":"CCSPepper"},{"location":"workflows/CCSPepper/#inputs","text":"","title":"Inputs"},{"location":"workflows/CCSPepper/#required","text":"bai (File, required ): Input BAM index file bam (File, required ): Input BAM file dv_memory (Int, required ): Memory for DeepVariant dv_threads (Int, required ): Number of threads for DeepVariant pepper_memory (Int, required ): Memory for Pepper pepper_threads (Int, required ): Number of threads for Pepper ref_fasta (File, required ): Reference fasta file ref_fasta_fai (File, required ): Reference fasta index file","title":"Required"},{"location":"workflows/CCSPepper/#optional","text":"deep_variant.runtime_attr_override (RuntimeAttr?) get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CCSPepper/#defaults","text":"zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task","title":"Defaults"},{"location":"workflows/CCSPepper/#outputs","text":"VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File) hap_tagged_bam (File) hap_tagged_bai (File)","title":"Outputs"},{"location":"workflows/CCSPepper/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CallAssemblyVariants/","text":"CallAssemblyVariants CallAssemblyVariants description Call variants from an assembly using paftools.js Inputs Required asm_fasta (File, required ): haploid assembly participant_name (String, required ): participant name prefix (String, required ): prefix for output files ref_fasta (File, required ): reference to which assembly should be aligned Optional AlignAsPAF.runtime_attr_override (RuntimeAttr?) Paftools.runtime_attr_override (RuntimeAttr?) Outputs paf (File) paftools_vcf (File) Dot Diagram","title":"CallAssemblyVariants"},{"location":"workflows/CallAssemblyVariants/#callassemblyvariants","text":"","title":"CallAssemblyVariants"},{"location":"workflows/CallAssemblyVariants/#callassemblyvariants_1","text":"description Call variants from an assembly using paftools.js","title":"CallAssemblyVariants"},{"location":"workflows/CallAssemblyVariants/#inputs","text":"","title":"Inputs"},{"location":"workflows/CallAssemblyVariants/#required","text":"asm_fasta (File, required ): haploid assembly participant_name (String, required ): participant name prefix (String, required ): prefix for output files ref_fasta (File, required ): reference to which assembly should be aligned","title":"Required"},{"location":"workflows/CallAssemblyVariants/#optional","text":"AlignAsPAF.runtime_attr_override (RuntimeAttr?) Paftools.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CallAssemblyVariants/#outputs","text":"paf (File) paftools_vcf (File)","title":"Outputs"},{"location":"workflows/CallAssemblyVariants/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CallVariantsIllumina/","text":"CallVariantsIllumina CallVariants description A workflow for calling small variants from an Illumina BAM file. Inputs Required bai (File, required ) bam (File, required ) call_small_variants (Boolean, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) run_dv_pepper_analysis (Boolean, required ) sample_id (String, required ) Optional dvp_memory (Int?) dvp_threads (Int?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) DeepVariant.deep_variant.runtime_attr_override (RuntimeAttr?) Defaults call_small_vars_on_mitochondria (Boolean, default=true) contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]) mito_contig (String, default=\"chrM\") Outputs dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?) Dot Diagram","title":"CallVariantsIllumina"},{"location":"workflows/CallVariantsIllumina/#callvariantsillumina","text":"","title":"CallVariantsIllumina"},{"location":"workflows/CallVariantsIllumina/#callvariants","text":"description A workflow for calling small variants from an Illumina BAM file.","title":"CallVariants"},{"location":"workflows/CallVariantsIllumina/#inputs","text":"","title":"Inputs"},{"location":"workflows/CallVariantsIllumina/#required","text":"bai (File, required ) bam (File, required ) call_small_variants (Boolean, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) run_dv_pepper_analysis (Boolean, required ) sample_id (String, required )","title":"Required"},{"location":"workflows/CallVariantsIllumina/#optional","text":"dvp_memory (Int?) dvp_threads (Int?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) DeepVariant.deep_variant.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CallVariantsIllumina/#defaults","text":"call_small_vars_on_mitochondria (Boolean, default=true) contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]) mito_contig (String, default=\"chrM\")","title":"Defaults"},{"location":"workflows/CallVariantsIllumina/#outputs","text":"dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?)","title":"Outputs"},{"location":"workflows/CallVariantsIllumina/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CallVariantsONT/","text":"CallVariantsONT CallVariants descrition A workflow for calling small and/or structural variants from an aligned ONT BAM file. Inputs Required bai (File, required ): ONT BAM index file bam (File, required ): ONT BAM file call_small_variants (Boolean, required ): Call small variants call_small_vars_on_mitochondria (Boolean, required ): if false, will not attempt to call variants on mitochondria call_svs (Boolean, required ): Call structural variants fast_less_sensitive_sv (Boolean, required ): to trade less sensitive SV calling for faster speed prefix (String, required ): Prefix for output files ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. run_dv_pepper_analysis (Boolean, required ): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sample_id (String, required ): Sample ID Optional dvp_memory (Int?): memory for DV-Pepper dvp_threads (Int?): number of threads for DV-Pepper ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair tandem_repeat_bed (File?): BED file containing TRF finder for better PBSV calls (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Clair.chr (String?) Clair.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MergeAndSortClairVCFs.header_definitions_file (File?) MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) MergeAndSortClair_gVCFs.header_definitions_file (File?) MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) MergeBams.runtime_attr_override (RuntimeAttr?) MergeDeepVariantGVCFs.header_definitions_file (File?) MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantPhasedVCFs.header_definitions_file (File?) MergeDeepVariantPhasedVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantVCFs.header_definitions_file (File?) MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) Pepper.runtime_attr_override (RuntimeAttr?) SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) Sniffles2SV.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) size_balanced_scatter.runtime_attr_override (RuntimeAttr?) PBSVslow.Call.runtime_attr_override (RuntimeAttr?) PBSVslow.Discover.chr (String?) PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) RunPBSV.Call.runtime_attr_override (RuntimeAttr?) RunPBSV.Discover.chr (String?) RunPBSV.Discover.runtime_attr_override (RuntimeAttr?) Defaults minsvlen (Int, default=50): Minimum SV length in bp (default: 50) SmallVariantsScatter.prefix (String, default=\"subset\"): Prefix for output files SubsetBam.prefix (String, default=\"subset\"): Prefix for output files Outputs sniffles_vcf (File?) sniffles_tbi (File?) pbsv_vcf (File?) pbsv_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?) Dot Diagram","title":"CallVariantsONT"},{"location":"workflows/CallVariantsONT/#callvariantsont","text":"","title":"CallVariantsONT"},{"location":"workflows/CallVariantsONT/#callvariants","text":"descrition A workflow for calling small and/or structural variants from an aligned ONT BAM file.","title":"CallVariants"},{"location":"workflows/CallVariantsONT/#inputs","text":"","title":"Inputs"},{"location":"workflows/CallVariantsONT/#required","text":"bai (File, required ): ONT BAM index file bam (File, required ): ONT BAM file call_small_variants (Boolean, required ): Call small variants call_small_vars_on_mitochondria (Boolean, required ): if false, will not attempt to call variants on mitochondria call_svs (Boolean, required ): Call structural variants fast_less_sensitive_sv (Boolean, required ): to trade less sensitive SV calling for faster speed prefix (String, required ): Prefix for output files ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. run_dv_pepper_analysis (Boolean, required ): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sample_id (String, required ): Sample ID","title":"Required"},{"location":"workflows/CallVariantsONT/#optional","text":"dvp_memory (Int?): memory for DV-Pepper dvp_threads (Int?): number of threads for DV-Pepper ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair tandem_repeat_bed (File?): BED file containing TRF finder for better PBSV calls (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Clair.chr (String?) Clair.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MergeAndSortClairVCFs.header_definitions_file (File?) MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) MergeAndSortClair_gVCFs.header_definitions_file (File?) MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) MergeBams.runtime_attr_override (RuntimeAttr?) MergeDeepVariantGVCFs.header_definitions_file (File?) MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantPhasedVCFs.header_definitions_file (File?) MergeDeepVariantPhasedVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantVCFs.header_definitions_file (File?) MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) Pepper.runtime_attr_override (RuntimeAttr?) SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) Sniffles2SV.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) size_balanced_scatter.runtime_attr_override (RuntimeAttr?) PBSVslow.Call.runtime_attr_override (RuntimeAttr?) PBSVslow.Discover.chr (String?) PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) RunPBSV.Call.runtime_attr_override (RuntimeAttr?) RunPBSV.Discover.chr (String?) RunPBSV.Discover.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CallVariantsONT/#defaults","text":"minsvlen (Int, default=50): Minimum SV length in bp (default: 50) SmallVariantsScatter.prefix (String, default=\"subset\"): Prefix for output files SubsetBam.prefix (String, default=\"subset\"): Prefix for output files","title":"Defaults"},{"location":"workflows/CallVariantsONT/#outputs","text":"sniffles_vcf (File?) sniffles_tbi (File?) pbsv_vcf (File?) pbsv_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?)","title":"Outputs"},{"location":"workflows/CallVariantsONT/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CallVariantsPBCCS/","text":"CallVariantsPBCCS CallVariants description A workflow for calling small and/or structural variants from an aligned CCS BAM file. Inputs Required bai (File, required ): Index for the aligned CCS BAM file bam (File, required ): Aligned CCS BAM file call_small_variants (Boolean, required ): Call small variants or not call_small_vars_on_mitochondria (Boolean, required ): if false, will not attempt to call variants on mitochondria call_svs (Boolean, required ): Call structural variants or not fast_less_sensitive_sv (Boolean, required ): to trade less sensitive SV calling for faster speed prefix (String, required ): Prefix for output files ref_dict (File, required ): Dictionary for the reference FASTA file ref_fasta (File, required ): Reference FASTA file ref_fasta_fai (File, required ): Index for the reference FASTA file run_dv_pepper_analysis (Boolean, required ): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sample_id (String, required ): Sample ID Optional dvp_memory (Int?): memory for DV-Pepper dvp_threads (Int?): number of threads for DV-Pepper ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair tandem_repeat_bed (File?): BED file containing TRF finder for better PBSV calls (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Clair.chr (String?) Clair.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MarginPhase.runtime_attr_override (RuntimeAttr?) MergeAndSortClairVCFs.header_definitions_file (File?) MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) MergeAndSortClair_gVCFs.header_definitions_file (File?) MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) MergeBams.runtime_attr_override (RuntimeAttr?) MergeDeepVariantGVCFs.header_definitions_file (File?) MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantVCFs.header_definitions_file (File?) MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) Sniffles2SV.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) size_balanced_scatter.runtime_attr_override (RuntimeAttr?) CCSPepper.deep_variant.runtime_attr_override (RuntimeAttr?) CCSPepper.get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?) PBSVslow.Call.runtime_attr_override (RuntimeAttr?) PBSVslow.Discover.chr (String?) PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) RunPBSV.Call.runtime_attr_override (RuntimeAttr?) RunPBSV.Discover.chr (String?) RunPBSV.Discover.runtime_attr_override (RuntimeAttr?) Defaults minsvlen (Int, default=50): Minimum SV length in bp (default: 50) SmallVariantsScatter.prefix (String, default=\"subset\"): Prefix for output files SubsetBam.prefix (String, default=\"subset\"): Prefix for output files Outputs sniffles_vcf (File?) sniffles_tbi (File?) sniffles_snf (File?) pbsv_vcf (File?) pbsv_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?) Dot Diagram","title":"CallVariantsPBCCS"},{"location":"workflows/CallVariantsPBCCS/#callvariantspbccs","text":"","title":"CallVariantsPBCCS"},{"location":"workflows/CallVariantsPBCCS/#callvariants","text":"description A workflow for calling small and/or structural variants from an aligned CCS BAM file.","title":"CallVariants"},{"location":"workflows/CallVariantsPBCCS/#inputs","text":"","title":"Inputs"},{"location":"workflows/CallVariantsPBCCS/#required","text":"bai (File, required ): Index for the aligned CCS BAM file bam (File, required ): Aligned CCS BAM file call_small_variants (Boolean, required ): Call small variants or not call_small_vars_on_mitochondria (Boolean, required ): if false, will not attempt to call variants on mitochondria call_svs (Boolean, required ): Call structural variants or not fast_less_sensitive_sv (Boolean, required ): to trade less sensitive SV calling for faster speed prefix (String, required ): Prefix for output files ref_dict (File, required ): Dictionary for the reference FASTA file ref_fasta (File, required ): Reference FASTA file ref_fasta_fai (File, required ): Index for the reference FASTA file run_dv_pepper_analysis (Boolean, required ): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sample_id (String, required ): Sample ID","title":"Required"},{"location":"workflows/CallVariantsPBCCS/#optional","text":"dvp_memory (Int?): memory for DV-Pepper dvp_threads (Int?): number of threads for DV-Pepper ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair tandem_repeat_bed (File?): BED file containing TRF finder for better PBSV calls (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Clair.chr (String?) Clair.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MarginPhase.runtime_attr_override (RuntimeAttr?) MergeAndSortClairVCFs.header_definitions_file (File?) MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) MergeAndSortClair_gVCFs.header_definitions_file (File?) MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) MergeBams.runtime_attr_override (RuntimeAttr?) MergeDeepVariantGVCFs.header_definitions_file (File?) MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) MergeDeepVariantVCFs.header_definitions_file (File?) MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) Sniffles2SV.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) size_balanced_scatter.runtime_attr_override (RuntimeAttr?) CCSPepper.deep_variant.runtime_attr_override (RuntimeAttr?) CCSPepper.get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?) PBSVslow.Call.runtime_attr_override (RuntimeAttr?) PBSVslow.Discover.chr (String?) PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) RunPBSV.Call.runtime_attr_override (RuntimeAttr?) RunPBSV.Discover.chr (String?) RunPBSV.Discover.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CallVariantsPBCCS/#defaults","text":"minsvlen (Int, default=50): Minimum SV length in bp (default: 50) SmallVariantsScatter.prefix (String, default=\"subset\"): Prefix for output files SubsetBam.prefix (String, default=\"subset\"): Prefix for output files","title":"Defaults"},{"location":"workflows/CallVariantsPBCCS/#outputs","text":"sniffles_vcf (File?) sniffles_tbi (File?) sniffles_snf (File?) pbsv_vcf (File?) pbsv_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?)","title":"Outputs"},{"location":"workflows/CallVariantsPBCCS/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Canu/","text":"Canu Canu description A workflow that runs the Canu 3-step assembly (correct, trim, assemble). Tested on a small genome (malaria ~23mb), larger genomes may require some changes including tweaks to the default resource allocation. Currently assumes nanopore reads Inputs Required assemble_error_rate (Float, required ): parameter to canu's 'correctedErrorRate' correct_error_rate (Float, required ): parameter to canu's 'correctedErrorRate' genome_size (Int, required ): estimate on genome size (parameter to canu's 'genomeSize') prefix (String, required ): prefix to output files reads (File, required ): reads to be canu-corrected trim_error_rate (Float, required ): parameter to canu's 'correctedErrorRate' Optional Assemble.runtime_attr_override (RuntimeAttr?) Correct.runtime_attr_override (RuntimeAttr?) Trim.runtime_attr_override (RuntimeAttr?) Outputs fa (File) Dot Diagram","title":"Canu"},{"location":"workflows/Canu/#canu","text":"","title":"Canu"},{"location":"workflows/Canu/#canu_1","text":"description A workflow that runs the Canu 3-step assembly (correct, trim, assemble). Tested on a small genome (malaria ~23mb), larger genomes may require some changes including tweaks to the default resource allocation. Currently assumes nanopore reads","title":"Canu"},{"location":"workflows/Canu/#inputs","text":"","title":"Inputs"},{"location":"workflows/Canu/#required","text":"assemble_error_rate (Float, required ): parameter to canu's 'correctedErrorRate' correct_error_rate (Float, required ): parameter to canu's 'correctedErrorRate' genome_size (Int, required ): estimate on genome size (parameter to canu's 'genomeSize') prefix (String, required ): prefix to output files reads (File, required ): reads to be canu-corrected trim_error_rate (Float, required ): parameter to canu's 'correctedErrorRate'","title":"Required"},{"location":"workflows/Canu/#optional","text":"Assemble.runtime_attr_override (RuntimeAttr?) Correct.runtime_attr_override (RuntimeAttr?) Trim.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Canu/#outputs","text":"fa (File)","title":"Outputs"},{"location":"workflows/Canu/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CleanupIntermediate/","text":"CleanupIntermediate CleanupIntermediate description A workflow to clean up intermediate files from running workflows on Terra. Use at your own risk. warn This workflow will delete the whole 'folder's corresponding to each of the specified submissions. So make sure nothing in those are useful anymore. Inputs Required submissionIDs (Array[String], required ): List of submissions whose intermediate files are to be deleted workspace_bucket (String, required ) Defaults keep_logs (Boolean, default=false): Whether to keep cromwell log files or not; if true, the process is significantly slower. Default is false. Outputs None Dot Diagram","title":"CleanupIntermediate"},{"location":"workflows/CleanupIntermediate/#cleanupintermediate","text":"","title":"CleanupIntermediate"},{"location":"workflows/CleanupIntermediate/#cleanupintermediate_1","text":"description A workflow to clean up intermediate files from running workflows on Terra. Use at your own risk. warn This workflow will delete the whole 'folder's corresponding to each of the specified submissions. So make sure nothing in those are useful anymore.","title":"CleanupIntermediate"},{"location":"workflows/CleanupIntermediate/#inputs","text":"","title":"Inputs"},{"location":"workflows/CleanupIntermediate/#required","text":"submissionIDs (Array[String], required ): List of submissions whose intermediate files are to be deleted workspace_bucket (String, required )","title":"Required"},{"location":"workflows/CleanupIntermediate/#defaults","text":"keep_logs (Boolean, default=false): Whether to keep cromwell log files or not; if true, the process is significantly slower. Default is false.","title":"Defaults"},{"location":"workflows/CleanupIntermediate/#outputs","text":"None","title":"Outputs"},{"location":"workflows/CleanupIntermediate/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CollectPacBioAlignedMetrics/","text":"CollectPacBioAlignedMetrics CollectPacBioAlignedMetrics desciption Collect a few custom metrics on the alignments. Inputs Required aligned_bai (File, required ) aligned_bam (File, required ) aligned_pbi (File, required ) Optional NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) SummarizeAlignedPBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?) Defaults SummarizeAlignedPBI.qual_threshold (Int, default=0) Outputs custom_aln_metrics_summary (File) nanoplot_stats (File) nanoplot_pngs (Array[File]) Dot Diagram","title":"CollectPacBioAlignedMetrics"},{"location":"workflows/CollectPacBioAlignedMetrics/#collectpacbioalignedmetrics","text":"","title":"CollectPacBioAlignedMetrics"},{"location":"workflows/CollectPacBioAlignedMetrics/#collectpacbioalignedmetrics_1","text":"desciption Collect a few custom metrics on the alignments.","title":"CollectPacBioAlignedMetrics"},{"location":"workflows/CollectPacBioAlignedMetrics/#inputs","text":"","title":"Inputs"},{"location":"workflows/CollectPacBioAlignedMetrics/#required","text":"aligned_bai (File, required ) aligned_bam (File, required ) aligned_pbi (File, required )","title":"Required"},{"location":"workflows/CollectPacBioAlignedMetrics/#optional","text":"NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) SummarizeAlignedPBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CollectPacBioAlignedMetrics/#defaults","text":"SummarizeAlignedPBI.qual_threshold (Int, default=0)","title":"Defaults"},{"location":"workflows/CollectPacBioAlignedMetrics/#outputs","text":"custom_aln_metrics_summary (File) nanoplot_stats (File) nanoplot_pngs (Array[File])","title":"Outputs"},{"location":"workflows/CollectPacBioAlignedMetrics/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CollectParentsKmerStats/","text":"CollectParentsKmerStats CollectParentsKmerStats description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication https://www.nature.com/articles/nbt.4277. This holds the sub-workflow for part one: collect k-mer stats given parental (short) reads Inputs Required father_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of paternal origin genome_size (String, required ): an esimate on genome size of the specicies (affects k-value picking) mother_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of maternal origin workdir_name (String, required ): name of working directory Optional kmerSize (Int?): [optional] force specifying k-value in collecting k-mer stats on parents run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false MerylCount.runtime_attr_override (RuntimeAttr?) MerylMergeAndSubtract.runtime_attr_override (RuntimeAttr?) ParentalReadsRepartitionAndMerylConfigure.runtime_attr_override (RuntimeAttr?) Defaults meryl_operations_threads_est (Int, default=8): [default-valued] estimate on how many threads to allocate to k-mer stats collection step Outputs Father_haplotype_merylDB (Array[File]) Mother_haplotype_merylDB (Array[File]) Father_reads_statistics (File) Mother_reads_statistics (File) Dot Diagram","title":"CollectParentsKmerStats"},{"location":"workflows/CollectParentsKmerStats/#collectparentskmerstats","text":"","title":"CollectParentsKmerStats"},{"location":"workflows/CollectParentsKmerStats/#_1","text":"","title":""},{"location":"workflows/CollectParentsKmerStats/#collectparentskmerstats_1","text":"description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication https://www.nature.com/articles/nbt.4277. This holds the sub-workflow for part one: collect k-mer stats given parental (short) reads","title":"CollectParentsKmerStats"},{"location":"workflows/CollectParentsKmerStats/#inputs","text":"","title":"Inputs"},{"location":"workflows/CollectParentsKmerStats/#required","text":"father_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of paternal origin genome_size (String, required ): an esimate on genome size of the specicies (affects k-value picking) mother_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of maternal origin workdir_name (String, required ): name of working directory","title":"Required"},{"location":"workflows/CollectParentsKmerStats/#optional","text":"kmerSize (Int?): [optional] force specifying k-value in collecting k-mer stats on parents run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false MerylCount.runtime_attr_override (RuntimeAttr?) MerylMergeAndSubtract.runtime_attr_override (RuntimeAttr?) ParentalReadsRepartitionAndMerylConfigure.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/CollectParentsKmerStats/#defaults","text":"meryl_operations_threads_est (Int, default=8): [default-valued] estimate on how many threads to allocate to k-mer stats collection step","title":"Defaults"},{"location":"workflows/CollectParentsKmerStats/#outputs","text":"Father_haplotype_merylDB (Array[File]) Mother_haplotype_merylDB (Array[File]) Father_reads_statistics (File) Mother_reads_statistics (File)","title":"Outputs"},{"location":"workflows/CollectParentsKmerStats/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/","text":"CollectSMRTCellUnalignedMetrics CollectSMRTCellUnalignedMetrics description Collects metrics from a SMRT Cell unaligned BAM file Inputs Required smrtcell_pbi (File, required ): SMRT Cell PBI file Defaults SummarizePBI.qual_threshold (Int, default=0) Outputs pbi_summary (File) polymerase_read_length_mean (Float) polymerase_read_length_N50 (Float) subread_read_length_mean (Float) subread_read_length_N50 (Float) num_reads (Float) num_bases (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float) Dot Diagram","title":"CollectSMRTCellUnalignedMetrics"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#collectsmrtcellunalignedmetrics","text":"","title":"CollectSMRTCellUnalignedMetrics"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#collectsmrtcellunalignedmetrics_1","text":"description Collects metrics from a SMRT Cell unaligned BAM file","title":"CollectSMRTCellUnalignedMetrics"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#inputs","text":"","title":"Inputs"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#required","text":"smrtcell_pbi (File, required ): SMRT Cell PBI file","title":"Required"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#defaults","text":"SummarizePBI.qual_threshold (Int, default=0)","title":"Defaults"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#outputs","text":"pbi_summary (File) polymerase_read_length_mean (Float) polymerase_read_length_N50 (Float) subread_read_length_mean (Float) subread_read_length_N50 (Float) num_reads (Float) num_bases (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float)","title":"Outputs"},{"location":"workflows/CollectSMRTCellUnalignedMetrics/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/CompareVcfBenchmarks/","text":"CompareVcfBenchmarks CompareVcfBenchmarks description The purpose of this workflow is to create a table to facilitate a comparison of precision and sensitivity between different configurations (e.g. pipeline versions, chemistry changes) of samples vs. truth that have been obtained with the BenchmarkVCFs workflow. After the CompareBenchmarks workflow is run, you can export the generated CSV table into a Google Sheets spreadsheet with automatic formatting using the ExportToGoogleSheets Colab Notebook (https://github.com/broadinstitute/palantir-workflows/blob/mg_benchmark_compare/BenchmarkVCFs/README_CompareBenchmarks.md). Inputs Required benchmark_summaries (Array[File], required ): The output summary.tsv files from the BenchmarkVCFs workflow. configurations (Array[String], required ): The labels for the different configurations that should be compared to each other. sample_ids (Array[String], required ): The names of one or more different samples. The comparisons will be made between configurations for each sample individually. Optional deltas (Array[Int]?): If specified, the output table will contain columns that compares the results of different configurations to each other. Each delta column is defined by two entries in the array (referenced by zero-based index). If, for example there are three configurations A, B and C and you want to compare configurations B to A and C to A, provide the following data: [1, 0, 2, 0]. Note that you will want to define the order_of_configurations in this case to make sure that the indices refer to the correct configurations. mem_gb (Int?): Optional input overriding the default memory. order_of_configurations (Array[String]?): This input determines the order of the configurations in the resulting table. Just as above, each configuration only has to be specified once, not once for each input VCF. If not specified, the order will be determined by the input files. order_of_samples (Array[String]?): If multiple different sample names are provided you can specify the order of those samples in the resulting table. Here, each sample name only has to be specified once, not once for each input VCF. If not specified, the order will be determined by the input files. preemptible (Int?): Optional input overriding the default number of preemptible attempts. stratifiers (Array[String]?): This input requires the same labels as the stratLabels input that has been passed to BenchmarkVCFs. Defaults generate_gc_plots (Boolean, default=false): If set to true, will generate plots of GC. include_counts (Boolean, default=true): If set to false, the resulting metrics will be Sensitivity, Precision and F-Measure. If set to true, the output table will also include the number of TP, FP and FN variants for each stratifier. Outputs comparison_csv (File) raw_data (File) gc_plots (Array[File]?) Dot Diagram","title":"CompareVcfBenchmarks"},{"location":"workflows/CompareVcfBenchmarks/#comparevcfbenchmarks","text":"","title":"CompareVcfBenchmarks"},{"location":"workflows/CompareVcfBenchmarks/#comparevcfbenchmarks_1","text":"description The purpose of this workflow is to create a table to facilitate a comparison of precision and sensitivity between different configurations (e.g. pipeline versions, chemistry changes) of samples vs. truth that have been obtained with the BenchmarkVCFs workflow. After the CompareBenchmarks workflow is run, you can export the generated CSV table into a Google Sheets spreadsheet with automatic formatting using the ExportToGoogleSheets Colab Notebook (https://github.com/broadinstitute/palantir-workflows/blob/mg_benchmark_compare/BenchmarkVCFs/README_CompareBenchmarks.md).","title":"CompareVcfBenchmarks"},{"location":"workflows/CompareVcfBenchmarks/#inputs","text":"","title":"Inputs"},{"location":"workflows/CompareVcfBenchmarks/#required","text":"benchmark_summaries (Array[File], required ): The output summary.tsv files from the BenchmarkVCFs workflow. configurations (Array[String], required ): The labels for the different configurations that should be compared to each other. sample_ids (Array[String], required ): The names of one or more different samples. The comparisons will be made between configurations for each sample individually.","title":"Required"},{"location":"workflows/CompareVcfBenchmarks/#optional","text":"deltas (Array[Int]?): If specified, the output table will contain columns that compares the results of different configurations to each other. Each delta column is defined by two entries in the array (referenced by zero-based index). If, for example there are three configurations A, B and C and you want to compare configurations B to A and C to A, provide the following data: [1, 0, 2, 0]. Note that you will want to define the order_of_configurations in this case to make sure that the indices refer to the correct configurations. mem_gb (Int?): Optional input overriding the default memory. order_of_configurations (Array[String]?): This input determines the order of the configurations in the resulting table. Just as above, each configuration only has to be specified once, not once for each input VCF. If not specified, the order will be determined by the input files. order_of_samples (Array[String]?): If multiple different sample names are provided you can specify the order of those samples in the resulting table. Here, each sample name only has to be specified once, not once for each input VCF. If not specified, the order will be determined by the input files. preemptible (Int?): Optional input overriding the default number of preemptible attempts. stratifiers (Array[String]?): This input requires the same labels as the stratLabels input that has been passed to BenchmarkVCFs.","title":"Optional"},{"location":"workflows/CompareVcfBenchmarks/#defaults","text":"generate_gc_plots (Boolean, default=false): If set to true, will generate plots of GC. include_counts (Boolean, default=true): If set to false, the resulting metrics will be Sensitivity, Precision and F-Measure. If set to true, the output table will also include the number of TP, FP and FN variants for each stratifier.","title":"Defaults"},{"location":"workflows/CompareVcfBenchmarks/#outputs","text":"comparison_csv (File) raw_data (File) gc_plots (Array[File]?)","title":"Outputs"},{"location":"workflows/CompareVcfBenchmarks/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ConvertToHailMT/","text":"ConvertToHailMT ConvertToHailMT description Convert a gVCF to a Hail MatrixTable Inputs Required gcs_out_root_dir (String, required ): GCS bucket in which to store the Hail MatrixTable joint_gvcf (File, required ): joint-called gVCF file joint_gvcf_tbi (File, required ): .tbi index for joint-called gVCF file prefix (String, required ): prefix for output Hail MatrixTable Optional FinalizeMT.keyfile (File?) FinalizeMT.name (String?) FinalizeMT.runtime_attr_override (RuntimeAttr?) RunConvertToHailMT.ref_fai (String?) RunConvertToHailMT.ref_fasta (String?) RunConvertToHailMT.runtime_attr_override (RuntimeAttr?) Defaults RunConvertToHailMT.reference (String, default=\"GRCh38\") Outputs joint_mt (String) Dot Diagram","title":"ConvertToHailMT"},{"location":"workflows/ConvertToHailMT/#converttohailmt","text":"","title":"ConvertToHailMT"},{"location":"workflows/ConvertToHailMT/#converttohailmt_1","text":"description Convert a gVCF to a Hail MatrixTable","title":"ConvertToHailMT"},{"location":"workflows/ConvertToHailMT/#inputs","text":"","title":"Inputs"},{"location":"workflows/ConvertToHailMT/#required","text":"gcs_out_root_dir (String, required ): GCS bucket in which to store the Hail MatrixTable joint_gvcf (File, required ): joint-called gVCF file joint_gvcf_tbi (File, required ): .tbi index for joint-called gVCF file prefix (String, required ): prefix for output Hail MatrixTable","title":"Required"},{"location":"workflows/ConvertToHailMT/#optional","text":"FinalizeMT.keyfile (File?) FinalizeMT.name (String?) FinalizeMT.runtime_attr_override (RuntimeAttr?) RunConvertToHailMT.ref_fai (String?) RunConvertToHailMT.ref_fasta (String?) RunConvertToHailMT.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ConvertToHailMT/#defaults","text":"RunConvertToHailMT.reference (String, default=\"GRCh38\")","title":"Defaults"},{"location":"workflows/ConvertToHailMT/#outputs","text":"joint_mt (String)","title":"Outputs"},{"location":"workflows/ConvertToHailMT/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ConvertToZarrStore/","text":"ConvertToZarrStore ConvertToZarrStore description A workflow that converts a joint-called VCF to a Zarr store. Inputs Required joint_vcf (File, required ) joint_vcf_tbi (File, required ): VCF Index for vcf . prefix (String, required ): prefix for output Zarr store Optional gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. FinalizeOutputs.keyfile (File?) FinalizeOutputs.name (String?) FinalizeOutputs.runtime_attr_override (RuntimeAttr?) PerformZarrStoreConversion.ref_fai (String?) PerformZarrStoreConversion.ref_fasta (String?) PerformZarrStoreConversion.runtime_attr_override (RuntimeAttr?) Defaults PerformZarrStoreConversion.num_cpus (Int, default=4) PerformZarrStoreConversion.reference (String, default=\"GRCh38\") Outputs joint_zarr (File) Dot Diagram","title":"ConvertToZarrStore"},{"location":"workflows/ConvertToZarrStore/#converttozarrstore","text":"","title":"ConvertToZarrStore"},{"location":"workflows/ConvertToZarrStore/#converttozarrstore_1","text":"description A workflow that converts a joint-called VCF to a Zarr store.","title":"ConvertToZarrStore"},{"location":"workflows/ConvertToZarrStore/#inputs","text":"","title":"Inputs"},{"location":"workflows/ConvertToZarrStore/#required","text":"joint_vcf (File, required ) joint_vcf_tbi (File, required ): VCF Index for vcf . prefix (String, required ): prefix for output Zarr store","title":"Required"},{"location":"workflows/ConvertToZarrStore/#optional","text":"gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. FinalizeOutputs.keyfile (File?) FinalizeOutputs.name (String?) FinalizeOutputs.runtime_attr_override (RuntimeAttr?) PerformZarrStoreConversion.ref_fai (String?) PerformZarrStoreConversion.ref_fasta (String?) PerformZarrStoreConversion.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ConvertToZarrStore/#defaults","text":"PerformZarrStoreConversion.num_cpus (Int, default=4) PerformZarrStoreConversion.reference (String, default=\"GRCh38\")","title":"Defaults"},{"location":"workflows/ConvertToZarrStore/#outputs","text":"joint_zarr (File)","title":"Outputs"},{"location":"workflows/ConvertToZarrStore/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/DeepTrio/","text":"DeepTrio DeepTrio Inputs Required parent1_bai (File, required ) parent1_bam (File, required ) parent1_sample_id (String, required ) parent2_bai (File, required ) parent2_bam (File, required ) parent2_sample_id (String, required ) proband_bai (File, required ) proband_bam (File, required ) proband_sample_id (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required ) Optional t_001_DeepTrio.runtime_attr_override (RuntimeAttr?) Defaults model_type (String, default=\"WGS\") Outputs parent1_vcf (File) parent1_vcf_index (File) parent1_gvcf (File) parent1_gvcf_index (File) parent2_vcf (File) parent2_vcf_index (File) parent2_gvcf (File) parent2_gvcf_index (File) proband_vcf (File) proband_vcf_index (File) proband_gvcf (File) proband_gvcf_index (File) logs (File) Dot Diagram","title":"DeepTrio"},{"location":"workflows/DeepTrio/#deeptrio","text":"","title":"DeepTrio"},{"location":"workflows/DeepTrio/#deeptrio_1","text":"","title":"DeepTrio"},{"location":"workflows/DeepTrio/#inputs","text":"","title":"Inputs"},{"location":"workflows/DeepTrio/#required","text":"parent1_bai (File, required ) parent1_bam (File, required ) parent1_sample_id (String, required ) parent2_bai (File, required ) parent2_bam (File, required ) parent2_sample_id (String, required ) proband_bai (File, required ) proband_bam (File, required ) proband_sample_id (String, required ) ref_fasta (File, required ) ref_fasta_dict (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"workflows/DeepTrio/#optional","text":"t_001_DeepTrio.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/DeepTrio/#defaults","text":"model_type (String, default=\"WGS\")","title":"Defaults"},{"location":"workflows/DeepTrio/#outputs","text":"parent1_vcf (File) parent1_vcf_index (File) parent1_gvcf (File) parent1_gvcf_index (File) parent2_vcf (File) parent2_vcf_index (File) parent2_gvcf (File) parent2_gvcf_index (File) proband_vcf (File) proband_vcf_index (File) proband_gvcf (File) proband_gvcf_index (File) logs (File)","title":"Outputs"},{"location":"workflows/DeepTrio/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/DeepVariant/","text":"DeepVariant DeepVariant description Workflow for getting VCF and gVCF from DeepVariant. Note VCF is un-phased. Inputs Required bai (File, required ) bam (File, required ) dv_memory (Int, required ) dv_threads (Int, required ) pepper_memory (Int, required ) pepper_threads (Int, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) Optional deep_variant.runtime_attr_override (RuntimeAttr?) Defaults zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task Outputs VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File) Dot Diagram","title":"DeepVariant"},{"location":"workflows/DeepVariant/#deepvariant","text":"","title":"DeepVariant"},{"location":"workflows/DeepVariant/#deepvariant_1","text":"description Workflow for getting VCF and gVCF from DeepVariant. Note VCF is un-phased.","title":"DeepVariant"},{"location":"workflows/DeepVariant/#inputs","text":"","title":"Inputs"},{"location":"workflows/DeepVariant/#required","text":"bai (File, required ) bam (File, required ) dv_memory (Int, required ) dv_threads (Int, required ) pepper_memory (Int, required ) pepper_threads (Int, required ) ref_fasta (File, required ) ref_fasta_fai (File, required )","title":"Required"},{"location":"workflows/DeepVariant/#optional","text":"deep_variant.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/DeepVariant/#defaults","text":"zones (String, default=\"us-central1-b us-central1-c\"): select which zone (GCP) to run this task","title":"Defaults"},{"location":"workflows/DeepVariant/#outputs","text":"VCF (File) VCF_tbi (File) gVCF (File) gVCF_tbi (File)","title":"Outputs"},{"location":"workflows/DeepVariant/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/DownloadFromFTP/","text":"DownloadFromFTP DownloadFromFTP description Download files from FTP in parallel and store the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl). Inputs Required ftp_dirs (Array[String], required ): The FTP directories to download gcs_out_root_dir (String, required ) Optional ComputeDiskSize.runtime_attr_override (RuntimeAttr?) DownloadFTPFile.runtime_attr_override (RuntimeAttr?) GetFileManifest.runtime_attr_override (RuntimeAttr?) Defaults exclude (Array[String], default=[]): [default-valued] Simple substring patterns to exclude from the download. num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir. Outputs GetFileManifest.manifest (File) DownloadFTPFile.out (Array[String?]) ComputeDiskSize.max_size_bytes (Array[Float]) Dot Diagram","title":"DownloadFromFTP"},{"location":"workflows/DownloadFromFTP/#downloadfromftp","text":"","title":"DownloadFromFTP"},{"location":"workflows/DownloadFromFTP/#downloadfromftp_1","text":"description Download files from FTP in parallel and store the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl).","title":"DownloadFromFTP"},{"location":"workflows/DownloadFromFTP/#inputs","text":"","title":"Inputs"},{"location":"workflows/DownloadFromFTP/#required","text":"ftp_dirs (Array[String], required ): The FTP directories to download gcs_out_root_dir (String, required )","title":"Required"},{"location":"workflows/DownloadFromFTP/#optional","text":"ComputeDiskSize.runtime_attr_override (RuntimeAttr?) DownloadFTPFile.runtime_attr_override (RuntimeAttr?) GetFileManifest.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/DownloadFromFTP/#defaults","text":"exclude (Array[String], default=[]): [default-valued] Simple substring patterns to exclude from the download. num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir.","title":"Defaults"},{"location":"workflows/DownloadFromFTP/#outputs","text":"GetFileManifest.manifest (File) DownloadFTPFile.out (Array[String?]) ComputeDiskSize.max_size_bytes (Array[Float])","title":"Outputs"},{"location":"workflows/DownloadFromFTP/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/DownloadFromSRA/","text":"DownloadFromSRA DownloadFromSRA description This WDL pipeline downloads data from SRA in parallel and stores the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl). Inputs Required gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files manifest (File, required ): A file with a list of SRA ID(s) to download on each line Optional DownloadFiles.runtime_attr_override (RuntimeAttr?) Defaults num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir. DownloadFiles.disk_size_gb (Int, default=50) DownloadFiles.num_cpus (Int, default=4) Outputs DownloadFiles.out (Array[String]) Dot Diagram","title":"DownloadFromSRA"},{"location":"workflows/DownloadFromSRA/#downloadfromsra","text":"","title":"DownloadFromSRA"},{"location":"workflows/DownloadFromSRA/#downloadfromsra_1","text":"description This WDL pipeline downloads data from SRA in parallel and stores the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl).","title":"DownloadFromSRA"},{"location":"workflows/DownloadFromSRA/#inputs","text":"","title":"Inputs"},{"location":"workflows/DownloadFromSRA/#required","text":"gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files manifest (File, required ): A file with a list of SRA ID(s) to download on each line","title":"Required"},{"location":"workflows/DownloadFromSRA/#optional","text":"DownloadFiles.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/DownloadFromSRA/#defaults","text":"num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir. DownloadFiles.disk_size_gb (Int, default=50) DownloadFiles.num_cpus (Int, default=4)","title":"Defaults"},{"location":"workflows/DownloadFromSRA/#outputs","text":"DownloadFiles.out (Array[String])","title":"Outputs"},{"location":"workflows/DownloadFromSRA/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/DownloadFromWeb/","text":"DownloadFromWeb DownloadFromWeb description This WDL pipeline downloads directories from HTTP/FTP/SFTP servers in parallel and stores the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl). Inputs Required gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files manifest (File, required ): A file with a list of SRA ID(s) to download on each line Optional DownloadFiles.runtime_attr_override (RuntimeAttr?) Defaults num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir. DownloadFiles.disk_size_gb (Int, default=100) DownloadFiles.num_cpus (Int, default=4) Outputs DownloadFiles.out (Array[String]) Dot Diagram","title":"DownloadFromWeb"},{"location":"workflows/DownloadFromWeb/#downloadfromweb","text":"","title":"DownloadFromWeb"},{"location":"workflows/DownloadFromWeb/#downloadfromweb_1","text":"description This WDL pipeline downloads directories from HTTP/FTP/SFTP servers in parallel and stores the results in the specified GCS dir. This pipeline is essentially a Cromwell/GCP reimagining of the Nextflow/AWS downloading pipeline from @alaincoletta (see: http://broad.io/aws_dl).","title":"DownloadFromWeb"},{"location":"workflows/DownloadFromWeb/#inputs","text":"","title":"Inputs"},{"location":"workflows/DownloadFromWeb/#required","text":"gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files manifest (File, required ): A file with a list of SRA ID(s) to download on each line","title":"Required"},{"location":"workflows/DownloadFromWeb/#optional","text":"DownloadFiles.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/DownloadFromWeb/#defaults","text":"num_simultaneous_downloads (Int, default=10): [default-valued] The number of files to fetch simultaneously. prepend_dir_name (Boolean, default=true): If true, place the files in a subdirectory based on the basename of the FTP dir. DownloadFiles.disk_size_gb (Int, default=100) DownloadFiles.num_cpus (Int, default=4)","title":"Defaults"},{"location":"workflows/DownloadFromWeb/#outputs","text":"DownloadFiles.out (Array[String])","title":"Outputs"},{"location":"workflows/DownloadFromWeb/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/","text":"ExpandedDrugResistanceMarkerAggregation ExpandedDrugResistanceMarkerAggregation author Jonn Smith description Combine multiple expanded drug resistance marker reports together for a set of samples. Inputs Required dir_prefix (String, required ): Directory prefix to use for finalized location. expanded_drug_res_markers (Array[File], required ): Array of per-sample drug resistance marker reports to aggregate. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. out_file_prefix (String, required ): Prefix to use for output files. sample_names (Array[String], required ): Array of sample names corresponding to each file in expanded_drug_res_markers . Optional CombineExpandedDrugResistanceMarkers.runtime_attr_override (RuntimeAttr?) FinalizeDRReportAllMarkers.keyfile (File?) FinalizeDRReportAllMarkers.name (String?) FinalizeDRReportAllMarkers.runtime_attr_override (RuntimeAttr?) Outputs combined_expanded_markers (File) Dot Diagram","title":"ExpandedDrugResistanceMarkerAggregation"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#expandeddrugresistancemarkeraggregation","text":"","title":"ExpandedDrugResistanceMarkerAggregation"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#expandeddrugresistancemarkeraggregation_1","text":"author Jonn Smith description Combine multiple expanded drug resistance marker reports together for a set of samples.","title":"ExpandedDrugResistanceMarkerAggregation"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#inputs","text":"","title":"Inputs"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#required","text":"dir_prefix (String, required ): Directory prefix to use for finalized location. expanded_drug_res_markers (Array[File], required ): Array of per-sample drug resistance marker reports to aggregate. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. out_file_prefix (String, required ): Prefix to use for output files. sample_names (Array[String], required ): Array of sample names corresponding to each file in expanded_drug_res_markers .","title":"Required"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#optional","text":"CombineExpandedDrugResistanceMarkers.runtime_attr_override (RuntimeAttr?) FinalizeDRReportAllMarkers.keyfile (File?) FinalizeDRReportAllMarkers.name (String?) FinalizeDRReportAllMarkers.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#outputs","text":"combined_expanded_markers (File)","title":"Outputs"},{"location":"workflows/ExpandedDrugResistanceMarkerAggregation/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/","text":"ExpandedDrugResistanceMarkerExtraction ExpandedDrugResistanceMarkerExtraction author Jonn Smith description Extract drug resistance marker information from a single-sample VCF. Inputs Required dir_prefix (String, required ): Directory prefix to use for finalized location. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gene_drug_resistance_list (File, required ): List of genes over which to include any variants in the expanded drug resistance report. protein_drug_resistance_list (File, required ): List of specific protein changes to include in the expanded drug resistance report. sample_name (String, required ): Name of the sample in the given single-sample VCF file. snpeff_db (File, required ): SNPEff database file to use for functional annotations (if necessary). vcf (File, required ): Input VCF.gz file containing variant calls from which to create an expanded drug resistance marker report. FunctionallyAnnotateVariants.snpeff_db_identifier (String, required ) Optional CallDrugResistanceMutations.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedVCF.keyfile (File?) FinalizeAnnotatedVCF.name (String?) FinalizeAnnotatedVCF.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedVCFIndex.keyfile (File?) FinalizeAnnotatedVCFIndex.name (String?) FinalizeAnnotatedVCFIndex.runtime_attr_override (RuntimeAttr?) FinalizeDRReportAllMarkers.keyfile (File?) FinalizeDRReportAllMarkers.name (String?) FinalizeDRReportAllMarkers.runtime_attr_override (RuntimeAttr?) FinalizeDRReportProteinMarkers.keyfile (File?) FinalizeDRReportProteinMarkers.name (String?) FinalizeDRReportProteinMarkers.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffGenes.keyfile (File?) FinalizeSnpEffGenes.name (String?) FinalizeSnpEffGenes.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffSummary.keyfile (File?) FinalizeSnpEffSummary.name (String?) FinalizeSnpEffSummary.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotateVariants.runtime_attr_override (RuntimeAttr?) Defaults do_functional_annotation (Boolean, default=true): If true, will perform functional annotation on the input VCF file prior to extracting drug resistance marker information. Outputs drug_res_report_all (File) drug_res_report_prot_only (File) annotated_vcf (File?) annotated_vcf_index (File?) snpEff_summary (File?) snpEff_genes (File?) Dot Diagram","title":"ExpandedDrugResistanceMarkerExtraction"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#expandeddrugresistancemarkerextraction","text":"","title":"ExpandedDrugResistanceMarkerExtraction"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#expandeddrugresistancemarkerextraction_1","text":"author Jonn Smith description Extract drug resistance marker information from a single-sample VCF.","title":"ExpandedDrugResistanceMarkerExtraction"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#inputs","text":"","title":"Inputs"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#required","text":"dir_prefix (String, required ): Directory prefix to use for finalized location. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gene_drug_resistance_list (File, required ): List of genes over which to include any variants in the expanded drug resistance report. protein_drug_resistance_list (File, required ): List of specific protein changes to include in the expanded drug resistance report. sample_name (String, required ): Name of the sample in the given single-sample VCF file. snpeff_db (File, required ): SNPEff database file to use for functional annotations (if necessary). vcf (File, required ): Input VCF.gz file containing variant calls from which to create an expanded drug resistance marker report. FunctionallyAnnotateVariants.snpeff_db_identifier (String, required )","title":"Required"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#optional","text":"CallDrugResistanceMutations.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedVCF.keyfile (File?) FinalizeAnnotatedVCF.name (String?) FinalizeAnnotatedVCF.runtime_attr_override (RuntimeAttr?) FinalizeAnnotatedVCFIndex.keyfile (File?) FinalizeAnnotatedVCFIndex.name (String?) FinalizeAnnotatedVCFIndex.runtime_attr_override (RuntimeAttr?) FinalizeDRReportAllMarkers.keyfile (File?) FinalizeDRReportAllMarkers.name (String?) FinalizeDRReportAllMarkers.runtime_attr_override (RuntimeAttr?) FinalizeDRReportProteinMarkers.keyfile (File?) FinalizeDRReportProteinMarkers.name (String?) FinalizeDRReportProteinMarkers.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffGenes.keyfile (File?) FinalizeSnpEffGenes.name (String?) FinalizeSnpEffGenes.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffSummary.keyfile (File?) FinalizeSnpEffSummary.name (String?) FinalizeSnpEffSummary.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotateVariants.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#defaults","text":"do_functional_annotation (Boolean, default=true): If true, will perform functional annotation on the input VCF file prior to extracting drug resistance marker information.","title":"Defaults"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#outputs","text":"drug_res_report_all (File) drug_res_report_prot_only (File) annotated_vcf (File?) annotated_vcf_index (File?) snpEff_summary (File?) snpEff_genes (File?)","title":"Outputs"},{"location":"workflows/ExpandedDrugResistanceMarkerExtraction/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ExtractRegionsFromBam/","text":"ExtractRegionsFromBam ExtractRegionsFromBam desciption Extract reads from the given bam file which overlap the regions in the given bed file. Inputs Required extraction_comment (String, required ): Comment to add to the end of the output filename. gcs_bam_path (String, required ): GCS URL to bam file from which to extract reads. gcs_out_root_dir (String, required ): Output folder into which to place the results of this workflow. participant_name (String, required ): Participant (or sample) name for the given bam file. regions_bed (File, required ): Bed file containing regions for which to extract reads. Optional Bam2Fastq.bam_index (File?) Bam2Fastq.reference_dict (File?) Bam2Fastq.reference_fasta (File?) Bam2Fastq.reference_fasta_index (File?) Bam2Fastq.runtime_attr_override (RuntimeAttr?) FinalizeBai.keyfile (File?) FinalizeBai.name (String?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.name (String?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd1.keyfile (File?) FinalizeFqEnd1.name (String?) FinalizeFqEnd1.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd2.keyfile (File?) FinalizeFqEnd2.name (String?) FinalizeFqEnd2.runtime_attr_override (RuntimeAttr?) FinalizeFqUnpaired.keyfile (File?) FinalizeFqUnpaired.name (String?) FinalizeFqUnpaired.runtime_attr_override (RuntimeAttr?) GetReadsInBedFileRegions.runtime_attr_override (RuntimeAttr?) Outputs bam (File) bai (File) fq_end1 (File) fq_end2 (File) fq_unpaired (File) Dot Diagram","title":"ExtractRegionsFromBam"},{"location":"workflows/ExtractRegionsFromBam/#extractregionsfrombam","text":"","title":"ExtractRegionsFromBam"},{"location":"workflows/ExtractRegionsFromBam/#extractregionsfrombam_1","text":"desciption Extract reads from the given bam file which overlap the regions in the given bed file.","title":"ExtractRegionsFromBam"},{"location":"workflows/ExtractRegionsFromBam/#inputs","text":"","title":"Inputs"},{"location":"workflows/ExtractRegionsFromBam/#required","text":"extraction_comment (String, required ): Comment to add to the end of the output filename. gcs_bam_path (String, required ): GCS URL to bam file from which to extract reads. gcs_out_root_dir (String, required ): Output folder into which to place the results of this workflow. participant_name (String, required ): Participant (or sample) name for the given bam file. regions_bed (File, required ): Bed file containing regions for which to extract reads.","title":"Required"},{"location":"workflows/ExtractRegionsFromBam/#optional","text":"Bam2Fastq.bam_index (File?) Bam2Fastq.reference_dict (File?) Bam2Fastq.reference_fasta (File?) Bam2Fastq.reference_fasta_index (File?) Bam2Fastq.runtime_attr_override (RuntimeAttr?) FinalizeBai.keyfile (File?) FinalizeBai.name (String?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.name (String?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd1.keyfile (File?) FinalizeFqEnd1.name (String?) FinalizeFqEnd1.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd2.keyfile (File?) FinalizeFqEnd2.name (String?) FinalizeFqEnd2.runtime_attr_override (RuntimeAttr?) FinalizeFqUnpaired.keyfile (File?) FinalizeFqUnpaired.name (String?) FinalizeFqUnpaired.runtime_attr_override (RuntimeAttr?) GetReadsInBedFileRegions.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ExtractRegionsFromBam/#outputs","text":"bam (File) bai (File) fq_end1 (File) fq_end2 (File) fq_unpaired (File)","title":"Outputs"},{"location":"workflows/ExtractRegionsFromBam/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/","text":"ExtractSnpBarcodeFromVcfFile ExtractSnpBarcodeFromVcfFile author Jonn Smith description A workflow that extracts a barcode from a VCF file using a haplotype database file. Inputs Required haplotype_database_file (File, required ): The haplotype database file. ref_dict (File, required ): The dictionary file for the reference fasta file. ref_fasta (File, required ): The reference fasta file. ref_fasta_fai (File, required ): The index file for the reference fasta file. vcf (File, required ): The VCF file to extract the barcode from. vcf_index (File, required ): The index file for the VCF file. Optional runtime_attr_override (RuntimeAttr?): The runtime attributes to override. Defaults prefix (String, default=\"barcode\"): The prefix for the output files. Outputs output_vcf (File) barcode (String) barcode_file (File) Dot Diagram","title":"ExtractSnpBarcodeFromVcfFile"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#extractsnpbarcodefromvcffile","text":"","title":"ExtractSnpBarcodeFromVcfFile"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#extractsnpbarcodefromvcffile_1","text":"author Jonn Smith description A workflow that extracts a barcode from a VCF file using a haplotype database file.","title":"ExtractSnpBarcodeFromVcfFile"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#inputs","text":"","title":"Inputs"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#required","text":"haplotype_database_file (File, required ): The haplotype database file. ref_dict (File, required ): The dictionary file for the reference fasta file. ref_fasta (File, required ): The reference fasta file. ref_fasta_fai (File, required ): The index file for the reference fasta file. vcf (File, required ): The VCF file to extract the barcode from. vcf_index (File, required ): The index file for the VCF file.","title":"Required"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#optional","text":"runtime_attr_override (RuntimeAttr?): The runtime attributes to override.","title":"Optional"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#defaults","text":"prefix (String, default=\"barcode\"): The prefix for the output files.","title":"Defaults"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#outputs","text":"output_vcf (File) barcode (String) barcode_file (File)","title":"Outputs"},{"location":"workflows/ExtractSnpBarcodeFromVcfFile/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/FPCheckAoU/","text":"FPCheckAoU FPCheckAoU description Check correctness of metadata on a (demultiplexed) alignmed BAM, by genotyping it's BAM generated with its metadata, against a fingerprint VCF. Practically assumes human GRCh38 reference. Inputs Required aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting (FP) VCF fp_store (String, required ): Name of the bucket and prefix holding the fingerprint VCFs. ref_specific_haplotype_map (File, required ): Happlotype map file for the reference build used. See https://bit.ly/3QyZbwt sample_id_at_store (String, required ): UUID of the sample at the fingerprint store, used to fetch the fingerprinting VCF Optional CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResolveFPVCFPath.runtime_attr_override (RuntimeAttr?) Defaults lod_fail_threshold (Float, default=-3.0): A numeric threshold for LOD below which the sample will be considered failing the FP check. lod_pass_threshold (Float, default=6.0): A numeric threshold for LOD above which the sample will be considered passing the FP check. FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']) Outputs lod_expected_sample (Float) FP_status (String) fingerprint_summary (File) fingerprint_details (File) Dot Diagram","title":"FPCheckAoU"},{"location":"workflows/FPCheckAoU/#fpcheckaou","text":"","title":"FPCheckAoU"},{"location":"workflows/FPCheckAoU/#fpcheckaou_1","text":"description Check correctness of metadata on a (demultiplexed) alignmed BAM, by genotyping it's BAM generated with its metadata, against a fingerprint VCF. Practically assumes human GRCh38 reference.","title":"FPCheckAoU"},{"location":"workflows/FPCheckAoU/#inputs","text":"","title":"Inputs"},{"location":"workflows/FPCheckAoU/#required","text":"aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting (FP) VCF fp_store (String, required ): Name of the bucket and prefix holding the fingerprint VCFs. ref_specific_haplotype_map (File, required ): Happlotype map file for the reference build used. See https://bit.ly/3QyZbwt sample_id_at_store (String, required ): UUID of the sample at the fingerprint store, used to fetch the fingerprinting VCF","title":"Required"},{"location":"workflows/FPCheckAoU/#optional","text":"CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResolveFPVCFPath.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/FPCheckAoU/#defaults","text":"lod_fail_threshold (Float, default=-3.0): A numeric threshold for LOD below which the sample will be considered failing the FP check. lod_pass_threshold (Float, default=6.0): A numeric threshold for LOD above which the sample will be considered passing the FP check. FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV'])","title":"Defaults"},{"location":"workflows/FPCheckAoU/#outputs","text":"lod_expected_sample (Float) FP_status (String) fingerprint_summary (File) fingerprint_details (File)","title":"Outputs"},{"location":"workflows/FPCheckAoU/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/FindBamIdentity/","text":"FindBamIdentity FindBamIdentity description A workflow to identify a flowcell's the true identity, by genotyping it's BAM, against an array of 'truth' genotyped VCF. Inputs Required aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file of the flowcell expt_type (String, required ): There will be special treatment for 'CLR' data (minimum base quality for bases used when computing a fingerprint) fingerprint_store (String, required ): GS path to where all known fingerprinting GT'ed VCFS are stored ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional vcf_filter_expression (String?): an expression used for picking up VCFs, the filter will be applied to VCF names, any match will lead to the VCF to be included CheckCLRFingerprint.runtime_attr_override (RuntimeAttr?) CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResetCLRBaseQual.runtime_attr_override (RuntimeAttr?) Defaults artificial_baseQ_for_CLR (Int, default=10): An artificial value for CLR reads used for fingerprint verification (CLR reads come with all 0 base qual) FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']) Outputs lod (Float) true_smid (String) true_collab_sample_id (String) true_collab_partic_id (String) Dot Diagram","title":"FindBamIdentity"},{"location":"workflows/FindBamIdentity/#findbamidentity","text":"","title":"FindBamIdentity"},{"location":"workflows/FindBamIdentity/#findbamidentity_1","text":"description A workflow to identify a flowcell's the true identity, by genotyping it's BAM, against an array of 'truth' genotyped VCF.","title":"FindBamIdentity"},{"location":"workflows/FindBamIdentity/#inputs","text":"","title":"Inputs"},{"location":"workflows/FindBamIdentity/#required","text":"aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file of the flowcell expt_type (String, required ): There will be special treatment for 'CLR' data (minimum base quality for bases used when computing a fingerprint) fingerprint_store (String, required ): GS path to where all known fingerprinting GT'ed VCFS are stored ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/FindBamIdentity/#optional","text":"vcf_filter_expression (String?): an expression used for picking up VCFs, the filter will be applied to VCF names, any match will lead to the VCF to be included CheckCLRFingerprint.runtime_attr_override (RuntimeAttr?) CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResetCLRBaseQual.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/FindBamIdentity/#defaults","text":"artificial_baseQ_for_CLR (Int, default=10): An artificial value for CLR reads used for fingerprint verification (CLR reads come with all 0 base qual) FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV'])","title":"Defaults"},{"location":"workflows/FindBamIdentity/#outputs","text":"lod (Float) true_smid (String) true_collab_sample_id (String) true_collab_partic_id (String)","title":"Outputs"},{"location":"workflows/FindBamIdentity/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Flye/","text":"Flye Flye description Assemble a genome using Flye Inputs Required genome_size (Float, required ): Estimated genome size in base pairs prefix (String, required ): Prefix to apply to assembly output filenames reads (File, required ): Input reads (in fasta or fastq format, compressed or uncompressed) Outputs gfa (File) fa (File) Dot Diagram","title":"Flye"},{"location":"workflows/Flye/#flye","text":"","title":"Flye"},{"location":"workflows/Flye/#flye_1","text":"description Assemble a genome using Flye","title":"Flye"},{"location":"workflows/Flye/#inputs","text":"","title":"Inputs"},{"location":"workflows/Flye/#required","text":"genome_size (Float, required ): Estimated genome size in base pairs prefix (String, required ): Prefix to apply to assembly output filenames reads (File, required ): Input reads (in fasta or fastq format, compressed or uncompressed)","title":"Required"},{"location":"workflows/Flye/#outputs","text":"gfa (File) fa (File)","title":"Outputs"},{"location":"workflows/Flye/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/GLNexus/","text":"GLNexus JointCall description This pipeline joint-calls GVCFs with GLNexus (https://github.com/dnanexus-rnd/GLnexus). It also permits intervals to be specified so that joint calling only takes place on a subset of intervals (this can be useful for finding duplicate samples). Inputs Required dict (File, required ): reference sequence dictionary gvcfs (Array[File], required ): gVCF files to perform joint calling upon tbis (Array[File], required ): gVCF index files Optional bed (File?): intervals to which joint calling should be restricted num_cpus (Int?): number of CPUs to use runtime_attr_override (RuntimeAttr?): override default runtime attributes Call.runtime_attr_override (RuntimeAttr?): override default runtime attributes ConcatBCFs.runtime_attr_override (RuntimeAttr?): override default runtime attributes GetRanges.runtime_attr_override (RuntimeAttr?): override default runtime attributes ShardVCFByRanges.runtime_attr_override (RuntimeAttr?): override default runtime attributes Defaults config (String, default=\"DeepVariantWGS\"): configuration preset name or .yml filename max_cpus (Int, default=64): maximum number of CPUs to allow more_PL (Boolean, default=false): include PL from reference bands and other cases omitted by default prefix (String, default=\"out\"): output prefix for joined-called BCF and GVCF files squeeze (Boolean, default=false): reduce pVCF size by suppressing detail in cells derived from reference bands trim_uncalled_alleles (Boolean, default=false): remove alleles with no output GT calls in postprocessing ConcatBCFs.num_cpus (Int, default=4): number of CPUs to use Outputs joint_gvcf (File) joint_gvcf_tbi (File) Dot Diagram","title":"GLNexus"},{"location":"workflows/GLNexus/#glnexus","text":"","title":"GLNexus"},{"location":"workflows/GLNexus/#jointcall","text":"description This pipeline joint-calls GVCFs with GLNexus (https://github.com/dnanexus-rnd/GLnexus). It also permits intervals to be specified so that joint calling only takes place on a subset of intervals (this can be useful for finding duplicate samples).","title":"JointCall"},{"location":"workflows/GLNexus/#inputs","text":"","title":"Inputs"},{"location":"workflows/GLNexus/#required","text":"dict (File, required ): reference sequence dictionary gvcfs (Array[File], required ): gVCF files to perform joint calling upon tbis (Array[File], required ): gVCF index files","title":"Required"},{"location":"workflows/GLNexus/#optional","text":"bed (File?): intervals to which joint calling should be restricted num_cpus (Int?): number of CPUs to use runtime_attr_override (RuntimeAttr?): override default runtime attributes Call.runtime_attr_override (RuntimeAttr?): override default runtime attributes ConcatBCFs.runtime_attr_override (RuntimeAttr?): override default runtime attributes GetRanges.runtime_attr_override (RuntimeAttr?): override default runtime attributes ShardVCFByRanges.runtime_attr_override (RuntimeAttr?): override default runtime attributes","title":"Optional"},{"location":"workflows/GLNexus/#defaults","text":"config (String, default=\"DeepVariantWGS\"): configuration preset name or .yml filename max_cpus (Int, default=64): maximum number of CPUs to allow more_PL (Boolean, default=false): include PL from reference bands and other cases omitted by default prefix (String, default=\"out\"): output prefix for joined-called BCF and GVCF files squeeze (Boolean, default=false): reduce pVCF size by suppressing detail in cells derived from reference bands trim_uncalled_alleles (Boolean, default=false): remove alleles with no output GT calls in postprocessing ConcatBCFs.num_cpus (Int, default=4): number of CPUs to use","title":"Defaults"},{"location":"workflows/GLNexus/#outputs","text":"joint_gvcf (File) joint_gvcf_tbi (File)","title":"Outputs"},{"location":"workflows/GLNexus/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Guppy/","text":"Guppy Guppy description Run Guppy basecaller on ONT FAST5 files. The docker tag number will match the version of Guppy that is being run. You can change this value to run a different version of Guppy. Currently supports... [3.5.2, 3.6.0, 4.0.14]. All fast5 files within the given GCS dir, gcs_fast5_dir, will be processed. Takes a few hours to process 130GB. Best guess is that the processing time scales linearly but untested. Inputs Required config (String, required ): Guppy config file. gcs_fast5_dir (String, required ): GCS path to a directory containing ONT FAST5 files. gcs_out_root_dir (String, required ): GCS path to a directory where the output will be written. Optional barcode_kit (String?): Optional. Barcode kit used for sequencing. num_shards (Int?): Optional. Number of shards to use for parallelization. Default is 1 + ceil(length(read_lines(ListFast5s.manifest))/100). protocol_run_id (String?): Optional. Protocol run ID used for sequencing. Default is 'unknown'. sample_name (String?): Optional. Sample name used for sequencing. Default is 'unknown'. Basecall.runtime_attr_override (RuntimeAttr?) FinalizeBasecalls.runtime_attr_override (RuntimeAttr?) ListFast5s.runtime_attr_override (RuntimeAttr?) MakeFinalSummary.runtime_attr_override (RuntimeAttr?) MakeSequencingSummary.runtime_attr_override (RuntimeAttr?) PartitionFast5Manifest.runtime_attr_override (RuntimeAttr?) SumFailingFastqs.runtime_attr_override (RuntimeAttr?) SumPassingFastqs.runtime_attr_override (RuntimeAttr?) TimestampStopped.runtime_attr_override (RuntimeAttr?) UniqueBarcodes.runtime_attr_override (RuntimeAttr?) Defaults flow_cell_id (String, default=\"unknown\"): Optional. Flow cell ID used for sequencing. Default is 'unknown'. instrument (String, default=\"unknown\"): Optional. Instrument used for sequencing. Default is 'unknown'. SumFailingFastqs.prefix (String, default=\"sum\") SumPassingFastqs.prefix (String, default=\"sum\") Outputs gcs_dir (String) barcodes (Array[String]) num_fast5s (Int) num_pass_fastqs (Int) num_fail_fastqs (Int) Dot Diagram","title":"Guppy"},{"location":"workflows/Guppy/#guppy","text":"","title":"Guppy"},{"location":"workflows/Guppy/#guppy_1","text":"description Run Guppy basecaller on ONT FAST5 files. The docker tag number will match the version of Guppy that is being run. You can change this value to run a different version of Guppy. Currently supports... [3.5.2, 3.6.0, 4.0.14]. All fast5 files within the given GCS dir, gcs_fast5_dir, will be processed. Takes a few hours to process 130GB. Best guess is that the processing time scales linearly but untested.","title":"Guppy"},{"location":"workflows/Guppy/#inputs","text":"","title":"Inputs"},{"location":"workflows/Guppy/#required","text":"config (String, required ): Guppy config file. gcs_fast5_dir (String, required ): GCS path to a directory containing ONT FAST5 files. gcs_out_root_dir (String, required ): GCS path to a directory where the output will be written.","title":"Required"},{"location":"workflows/Guppy/#optional","text":"barcode_kit (String?): Optional. Barcode kit used for sequencing. num_shards (Int?): Optional. Number of shards to use for parallelization. Default is 1 + ceil(length(read_lines(ListFast5s.manifest))/100). protocol_run_id (String?): Optional. Protocol run ID used for sequencing. Default is 'unknown'. sample_name (String?): Optional. Sample name used for sequencing. Default is 'unknown'. Basecall.runtime_attr_override (RuntimeAttr?) FinalizeBasecalls.runtime_attr_override (RuntimeAttr?) ListFast5s.runtime_attr_override (RuntimeAttr?) MakeFinalSummary.runtime_attr_override (RuntimeAttr?) MakeSequencingSummary.runtime_attr_override (RuntimeAttr?) PartitionFast5Manifest.runtime_attr_override (RuntimeAttr?) SumFailingFastqs.runtime_attr_override (RuntimeAttr?) SumPassingFastqs.runtime_attr_override (RuntimeAttr?) TimestampStopped.runtime_attr_override (RuntimeAttr?) UniqueBarcodes.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Guppy/#defaults","text":"flow_cell_id (String, default=\"unknown\"): Optional. Flow cell ID used for sequencing. Default is 'unknown'. instrument (String, default=\"unknown\"): Optional. Instrument used for sequencing. Default is 'unknown'. SumFailingFastqs.prefix (String, default=\"sum\") SumPassingFastqs.prefix (String, default=\"sum\")","title":"Defaults"},{"location":"workflows/Guppy/#outputs","text":"gcs_dir (String) barcodes (Array[String]) num_fast5s (Int) num_pass_fastqs (Int) num_fail_fastqs (Int)","title":"Outputs"},{"location":"workflows/Guppy/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/HaplotypeCaller/","text":"HaplotypeCaller CallVariantsWithHaplotypeCaller author Jonn Smith description A workflow for calling small variants with GATK HaplotypeCaller from an Illumina BAM file. Inputs Required bai (File, required ) bam (File, required ) dbsnp_vcf (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_id (String, required ) Optional haplotype_caller_runtime_attr_override (RuntimeAttr?) interval_list (File?) CallVariantsWithHC.single_interval (String?) CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) IndexBamout.runtime_attr_override (RuntimeAttr?) MergeGVCFs.runtime_attr_override (RuntimeAttr?) MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) ReblockHcGVCF.annotations_to_keep (Array[String]?) ReblockHcGVCF.runtime_attr_override (RuntimeAttr?) ReblockHcGVCF.tree_score_cutoff (Float?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) Defaults call_vars_on_mitochondria (Boolean, default=true) contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]) enable_pileup_mode (Boolean, default=false) heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) mito_contig (String, default=\"chrM\") ploidy (Int, default=2) CallVariantsWithHC.enable_dangling_branch_recovery (Boolean, default=false) CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) ReblockHcGVCF.gq_blocks (Array[Int], default=[20, 30, 40]) Outputs output_gvcf (File) output_gvcf_index (File) output_vcf (File) output_vcf_index (File) bamout (File) bamout_index (File) Dot Diagram","title":"HaplotypeCaller"},{"location":"workflows/HaplotypeCaller/#haplotypecaller","text":"","title":"HaplotypeCaller"},{"location":"workflows/HaplotypeCaller/#callvariantswithhaplotypecaller","text":"author Jonn Smith description A workflow for calling small variants with GATK HaplotypeCaller from an Illumina BAM file.","title":"CallVariantsWithHaplotypeCaller"},{"location":"workflows/HaplotypeCaller/#inputs","text":"","title":"Inputs"},{"location":"workflows/HaplotypeCaller/#required","text":"bai (File, required ) bam (File, required ) dbsnp_vcf (File, required ) prefix (String, required ) ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_id (String, required )","title":"Required"},{"location":"workflows/HaplotypeCaller/#optional","text":"haplotype_caller_runtime_attr_override (RuntimeAttr?) interval_list (File?) CallVariantsWithHC.single_interval (String?) CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) IndexBamout.runtime_attr_override (RuntimeAttr?) MergeGVCFs.runtime_attr_override (RuntimeAttr?) MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) ReblockHcGVCF.annotations_to_keep (Array[String]?) ReblockHcGVCF.runtime_attr_override (RuntimeAttr?) ReblockHcGVCF.tree_score_cutoff (Float?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/HaplotypeCaller/#defaults","text":"call_vars_on_mitochondria (Boolean, default=true) contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]) enable_pileup_mode (Boolean, default=false) heterozygosity (Float, default=0.001) heterozygosity_stdev (Float, default=0.01) indel_heterozygosity (Float, default=0.000125) mito_contig (String, default=\"chrM\") ploidy (Int, default=2) CallVariantsWithHC.enable_dangling_branch_recovery (Boolean, default=false) CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) ReblockHcGVCF.gq_blocks (Array[Int], default=[20, 30, 40])","title":"Defaults"},{"location":"workflows/HaplotypeCaller/#outputs","text":"output_gvcf (File) output_gvcf_index (File) output_vcf (File) output_vcf_index (File) bamout (File) bamout_index (File)","title":"Outputs"},{"location":"workflows/HaplotypeCaller/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Hifiasm/","text":"Hifiasm Hifiasm description We run two HiFiasm jobs, one for getting alternative contigs and one for getting the haplotigs. And we take the primary assembly from the first job. Inputs Required prefix (String, required ): prefix to apply to assembly output filenames reads (File, required ): reads (in fasta or fastq format, compressed or uncompressed) Optional AssembleForAltContigs.runtime_attr_override (RuntimeAttr?) AssembleForHaplotigs.runtime_attr_override (RuntimeAttr?) Defaults zones (String, default=\"us-central1-a us-central1-b us-central1-c\") Outputs primary_gfa (File) primary_tigs (File) alternate_gfa (File) alternate_tigs (File) log_in_pVSa_mode (File) phased_gfas (Array[File]) phased_tigs (Array[File]) log_in_hap_mode (File) primary_gfa_in_hap_mode (File) primary_tigs_in_hap_mode (File) Dot Diagram","title":"Hifiasm"},{"location":"workflows/Hifiasm/#hifiasm","text":"","title":"Hifiasm"},{"location":"workflows/Hifiasm/#hifiasm_1","text":"description We run two HiFiasm jobs, one for getting alternative contigs and one for getting the haplotigs. And we take the primary assembly from the first job.","title":"Hifiasm"},{"location":"workflows/Hifiasm/#inputs","text":"","title":"Inputs"},{"location":"workflows/Hifiasm/#required","text":"prefix (String, required ): prefix to apply to assembly output filenames reads (File, required ): reads (in fasta or fastq format, compressed or uncompressed)","title":"Required"},{"location":"workflows/Hifiasm/#optional","text":"AssembleForAltContigs.runtime_attr_override (RuntimeAttr?) AssembleForHaplotigs.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Hifiasm/#defaults","text":"zones (String, default=\"us-central1-a us-central1-b us-central1-c\")","title":"Defaults"},{"location":"workflows/Hifiasm/#outputs","text":"primary_gfa (File) primary_tigs (File) alternate_gfa (File) alternate_tigs (File) log_in_pVSa_mode (File) phased_gfas (Array[File]) phased_tigs (Array[File]) log_in_hap_mode (File) primary_gfa_in_hap_mode (File) primary_tigs_in_hap_mode (File)","title":"Outputs"},{"location":"workflows/Hifiasm/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/LRCNVs/","text":"LRCNVs LRCNVs description Workflow for creating a GATK GermlineCNVCaller denoising model and generating calls given a list of normal samples. Supports both WGS and WES. The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). These intervals will be padded on both sides by the amount specified by padding (default 250) and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning, e.g., for WES). For WGS, the intervals should simply cover the chromosomes of interest. notes - The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). These intervals will be padded on both sides by the amount specified by padding (default 250) and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning, e.g., for WES). For WGS, the intervals should simply cover the chromosomes of interest. - Intervals can be blacklisted from coverage collection and all downstream steps by using the blacklist_intervals argument, which accepts formats compatible with the GATK -XL argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). This may be useful for excluding centromeric regions, etc. from analysis. Alternatively, these regions may be manually filtered from the final callset. Inputs Required cohort_entity_id (String, required ): Required. String identifier for the cohort used for denoising model generation. contig_ploidy_priors (File, required ): Required. File containing contig ploidy priors. intervals (File, required ): Required. Intervals file (in .bed format) containing the regions to be analyzed. For WGS, this should simply cover the chromosomes of interest. For WES, this should cover the target regions to be analyzed. normal_bais (Array[String]+, required ): Required. Array of BAI index files for the normal samples to be used for denoising model generation. normal_bams (Array[String]+, required ): Required. Array of BAM files for the normal samples to be used for denoising model generation. ref_map_file (File, required ): Required. File containing the reference copy-number map. Optional allosomal_contigs (Array[String]?) bin_length (Int?) blacklist_intervals (File?): Optional. Intervals file (in .bed format) containing the regions to be excluded from analysis. For WGS, this may be useful for excluding centromeric regions, etc. from analysis. For WES, this may be useful for excluding regions that are not covered by the target capture kit. blacklist_intervals_for_filter_intervals (File?) collect_counts_enable_indexing (Boolean?) collect_counts_format (String?) cpu_for_determine_germline_contig_ploidy (Int?) cpu_for_germline_cnv_caller (Int?) do_explicit_gc_correction (Boolean?) extreme_count_filter_maximum_percentile (Float?) extreme_count_filter_minimum_percentile (Float?) extreme_count_filter_percentage_of_samples (Float?) feature_query_lookahead (Int?) gatk4_jar_override (File?) gcnv_active_class_padding_hybrid_mode (Int?) gcnv_adamax_beta_1 (Float?) gcnv_adamax_beta_2 (Float?) gcnv_caller_external_admixing_rate (Float?) gcnv_caller_internal_admixing_rate (Float?) gcnv_caller_update_convergence_threshold (Float?) gcnv_class_coherence_length (Float?) gcnv_cnv_coherence_length (Float?) gcnv_convergence_snr_averaging_window (Int?) gcnv_convergence_snr_countdown_window (Int?) gcnv_convergence_snr_trigger_threshold (Float?) gcnv_copy_number_posterior_expectation_mode (String?) gcnv_depth_correction_tau (Float?) gcnv_disable_annealing (Boolean?) gcnv_enable_bias_factors (Boolean?) gcnv_gc_curve_standard_deviation (Float?) gcnv_init_ard_rel_unexplained_variance (Float?) gcnv_initial_temperature (Float?) gcnv_interval_psi_scale (Float?) gcnv_learning_rate (Float?) gcnv_log_emission_samples_per_round (Int?) gcnv_log_emission_sampling_median_rel_error (Float?) gcnv_log_emission_sampling_rounds (Int?) gcnv_log_mean_bias_standard_deviation (Float?) gcnv_mapping_error_rate (Float?) gcnv_max_advi_iter_first_epoch (Int?) gcnv_max_advi_iter_subsequent_epochs (Int?) gcnv_max_bias_factors (Int?) gcnv_max_calling_iters (Int?) gcnv_max_copy_number (Int?) gcnv_max_training_epochs (Int?) gcnv_min_training_epochs (Int?) gcnv_num_gc_bins (Int?) gcnv_num_thermal_advi_iters (Int?) gcnv_p_active (Float?) gcnv_p_alt (Float?) gcnv_sample_psi_scale (Float?) low_count_filter_count_threshold (Int?) low_count_filter_percentage_of_samples (Float?) mappability_track_bed (File?) mappability_track_bed_idx (File?) maximum_gc_content (Float?) maximum_mappability (Float?) maximum_segmental_duplication_content (Float?) mem_gb_for_annotate_intervals (Int?) mem_gb_for_collect_counts (Int?) mem_gb_for_determine_germline_contig_ploidy (Int?) mem_gb_for_filter_intervals (Int?) mem_gb_for_germline_cnv_caller (Int?) minimum_gc_content (Float?) minimum_mappability (Float?) minimum_segmental_duplication_content (Float?) padding (Int?) ploidy_global_psi_scale (Float?) ploidy_mapping_error_rate (Float?) ploidy_mean_bias_standard_deviation (Float?) ploidy_sample_psi_scale (Float?) preemptible_attempts (Int?) segmental_duplication_track_bed (File?) segmental_duplication_track_bed_idx (File?) AnnotateIntervals.cpu (Int?) AnnotateIntervals.disk_space_gb (Int?) CollectCounts.cpu (Int?) CollectCounts.disk_space_gb (Int?) CollectModelQualityMetrics.cpu (Int?) CollectModelQualityMetrics.disk_space_gb (Int?) CollectModelQualityMetrics.mem_gb (Int?) CollectSampleQualityMetrics.cpu (Int?) CollectSampleQualityMetrics.disk_space_gb (Int?) CollectSampleQualityMetrics.mem_gb (Int?) DetermineGermlineContigPloidyCohortMode.disk_space_gb (Int?) DetermineGermlineContigPloidyCohortMode.output_dir (String?) FilterIntervals.cpu (Int?) FilterIntervals.disk_space_gb (Int?) GermlineCNVCallerCohortMode.disk_space_gb (Int?) GermlineCNVCallerCohortMode.output_dir (String?) PostprocessGermlineCNVCalls.cpu (Int?) PostprocessGermlineCNVCalls.disk_space_gb (Int?) PostprocessGermlineCNVCalls.mem_gb (Int?) PreprocessIntervals.cpu (Int?) PreprocessIntervals.disk_space_gb (Int?) PreprocessIntervals.mem_gb (Int?) ScatterIntervals.cpu (Int?) ScatterIntervals.disk_space_gb (Int?) ScatterIntervals.gatk4_jar_override (File?) ScatterIntervals.mem_gb (Int?) ScatterIntervals.output_dir (String?) Defaults gatk_docker (String, default=\"broadinstitute/gatk:4.1.7.0\"): Optional. Docker image for the GATK tool. Default is broadinstitute/gatk:broadinstitute/gatk:4.1.7.0. maximum_number_events_per_sample (Int, default=1000) num_intervals_per_scatter (Int, default=10000): Optional. Number of intervals to process in each scatter. Default is 10000. ref_copy_number_autosomal_contigs (Int, default=2) AnnotateIntervals.use_ssd (Boolean, default=false) CollectCounts.use_ssd (Boolean, default=false) CollectModelQualityMetrics.use_ssd (Boolean, default=false) CollectSampleQualityMetrics.use_ssd (Boolean, default=false) DetermineGermlineContigPloidyCohortMode.use_ssd (Boolean, default=false) FilterIntervals.use_ssd (Boolean, default=false) GermlineCNVCallerCohortMode.use_ssd (Boolean, default=false) PostprocessGermlineCNVCalls.use_ssd (Boolean, default=false) PreprocessIntervals.use_ssd (Boolean, default=false) ScatterIntervals.use_ssd (Boolean, default=false) Outputs preprocessed_intervals (File) read_counts_entity_ids (Array[File]) read_counts (Array[File]) annotated_intervals (File?) filtered_intervals (File) contig_ploidy_model_tar (File) contig_ploidy_calls_tar (File) gcnv_model_tars (Array[File]) gcnv_calls_tars (Array[Array[File]]) gcnv_tracking_tars (Array[File]) genotyped_intervals_vcfs (Array[File]) genotyped_segments_vcfs (Array[File]) sample_qc_status_files (Array[File]) sample_qc_status_strings (Array[String]) model_qc_status_file (File) model_qc_string (String) denoised_copy_ratios (Array[File]) Dot Diagram","title":"LRCNVs"},{"location":"workflows/LRCNVs/#lrcnvs","text":"","title":"LRCNVs"},{"location":"workflows/LRCNVs/#lrcnvs_1","text":"description Workflow for creating a GATK GermlineCNVCaller denoising model and generating calls given a list of normal samples. Supports both WGS and WES. The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). These intervals will be padded on both sides by the amount specified by padding (default 250) and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning, e.g., for WES). For WGS, the intervals should simply cover the chromosomes of interest. notes - The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). These intervals will be padded on both sides by the amount specified by padding (default 250) and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning, e.g., for WES). For WGS, the intervals should simply cover the chromosomes of interest. - Intervals can be blacklisted from coverage collection and all downstream steps by using the blacklist_intervals argument, which accepts formats compatible with the GATK -XL argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). This may be useful for excluding centromeric regions, etc. from analysis. Alternatively, these regions may be manually filtered from the final callset.","title":"LRCNVs"},{"location":"workflows/LRCNVs/#inputs","text":"","title":"Inputs"},{"location":"workflows/LRCNVs/#required","text":"cohort_entity_id (String, required ): Required. String identifier for the cohort used for denoising model generation. contig_ploidy_priors (File, required ): Required. File containing contig ploidy priors. intervals (File, required ): Required. Intervals file (in .bed format) containing the regions to be analyzed. For WGS, this should simply cover the chromosomes of interest. For WES, this should cover the target regions to be analyzed. normal_bais (Array[String]+, required ): Required. Array of BAI index files for the normal samples to be used for denoising model generation. normal_bams (Array[String]+, required ): Required. Array of BAM files for the normal samples to be used for denoising model generation. ref_map_file (File, required ): Required. File containing the reference copy-number map.","title":"Required"},{"location":"workflows/LRCNVs/#optional","text":"allosomal_contigs (Array[String]?) bin_length (Int?) blacklist_intervals (File?): Optional. Intervals file (in .bed format) containing the regions to be excluded from analysis. For WGS, this may be useful for excluding centromeric regions, etc. from analysis. For WES, this may be useful for excluding regions that are not covered by the target capture kit. blacklist_intervals_for_filter_intervals (File?) collect_counts_enable_indexing (Boolean?) collect_counts_format (String?) cpu_for_determine_germline_contig_ploidy (Int?) cpu_for_germline_cnv_caller (Int?) do_explicit_gc_correction (Boolean?) extreme_count_filter_maximum_percentile (Float?) extreme_count_filter_minimum_percentile (Float?) extreme_count_filter_percentage_of_samples (Float?) feature_query_lookahead (Int?) gatk4_jar_override (File?) gcnv_active_class_padding_hybrid_mode (Int?) gcnv_adamax_beta_1 (Float?) gcnv_adamax_beta_2 (Float?) gcnv_caller_external_admixing_rate (Float?) gcnv_caller_internal_admixing_rate (Float?) gcnv_caller_update_convergence_threshold (Float?) gcnv_class_coherence_length (Float?) gcnv_cnv_coherence_length (Float?) gcnv_convergence_snr_averaging_window (Int?) gcnv_convergence_snr_countdown_window (Int?) gcnv_convergence_snr_trigger_threshold (Float?) gcnv_copy_number_posterior_expectation_mode (String?) gcnv_depth_correction_tau (Float?) gcnv_disable_annealing (Boolean?) gcnv_enable_bias_factors (Boolean?) gcnv_gc_curve_standard_deviation (Float?) gcnv_init_ard_rel_unexplained_variance (Float?) gcnv_initial_temperature (Float?) gcnv_interval_psi_scale (Float?) gcnv_learning_rate (Float?) gcnv_log_emission_samples_per_round (Int?) gcnv_log_emission_sampling_median_rel_error (Float?) gcnv_log_emission_sampling_rounds (Int?) gcnv_log_mean_bias_standard_deviation (Float?) gcnv_mapping_error_rate (Float?) gcnv_max_advi_iter_first_epoch (Int?) gcnv_max_advi_iter_subsequent_epochs (Int?) gcnv_max_bias_factors (Int?) gcnv_max_calling_iters (Int?) gcnv_max_copy_number (Int?) gcnv_max_training_epochs (Int?) gcnv_min_training_epochs (Int?) gcnv_num_gc_bins (Int?) gcnv_num_thermal_advi_iters (Int?) gcnv_p_active (Float?) gcnv_p_alt (Float?) gcnv_sample_psi_scale (Float?) low_count_filter_count_threshold (Int?) low_count_filter_percentage_of_samples (Float?) mappability_track_bed (File?) mappability_track_bed_idx (File?) maximum_gc_content (Float?) maximum_mappability (Float?) maximum_segmental_duplication_content (Float?) mem_gb_for_annotate_intervals (Int?) mem_gb_for_collect_counts (Int?) mem_gb_for_determine_germline_contig_ploidy (Int?) mem_gb_for_filter_intervals (Int?) mem_gb_for_germline_cnv_caller (Int?) minimum_gc_content (Float?) minimum_mappability (Float?) minimum_segmental_duplication_content (Float?) padding (Int?) ploidy_global_psi_scale (Float?) ploidy_mapping_error_rate (Float?) ploidy_mean_bias_standard_deviation (Float?) ploidy_sample_psi_scale (Float?) preemptible_attempts (Int?) segmental_duplication_track_bed (File?) segmental_duplication_track_bed_idx (File?) AnnotateIntervals.cpu (Int?) AnnotateIntervals.disk_space_gb (Int?) CollectCounts.cpu (Int?) CollectCounts.disk_space_gb (Int?) CollectModelQualityMetrics.cpu (Int?) CollectModelQualityMetrics.disk_space_gb (Int?) CollectModelQualityMetrics.mem_gb (Int?) CollectSampleQualityMetrics.cpu (Int?) CollectSampleQualityMetrics.disk_space_gb (Int?) CollectSampleQualityMetrics.mem_gb (Int?) DetermineGermlineContigPloidyCohortMode.disk_space_gb (Int?) DetermineGermlineContigPloidyCohortMode.output_dir (String?) FilterIntervals.cpu (Int?) FilterIntervals.disk_space_gb (Int?) GermlineCNVCallerCohortMode.disk_space_gb (Int?) GermlineCNVCallerCohortMode.output_dir (String?) PostprocessGermlineCNVCalls.cpu (Int?) PostprocessGermlineCNVCalls.disk_space_gb (Int?) PostprocessGermlineCNVCalls.mem_gb (Int?) PreprocessIntervals.cpu (Int?) PreprocessIntervals.disk_space_gb (Int?) PreprocessIntervals.mem_gb (Int?) ScatterIntervals.cpu (Int?) ScatterIntervals.disk_space_gb (Int?) ScatterIntervals.gatk4_jar_override (File?) ScatterIntervals.mem_gb (Int?) ScatterIntervals.output_dir (String?)","title":"Optional"},{"location":"workflows/LRCNVs/#defaults","text":"gatk_docker (String, default=\"broadinstitute/gatk:4.1.7.0\"): Optional. Docker image for the GATK tool. Default is broadinstitute/gatk:broadinstitute/gatk:4.1.7.0. maximum_number_events_per_sample (Int, default=1000) num_intervals_per_scatter (Int, default=10000): Optional. Number of intervals to process in each scatter. Default is 10000. ref_copy_number_autosomal_contigs (Int, default=2) AnnotateIntervals.use_ssd (Boolean, default=false) CollectCounts.use_ssd (Boolean, default=false) CollectModelQualityMetrics.use_ssd (Boolean, default=false) CollectSampleQualityMetrics.use_ssd (Boolean, default=false) DetermineGermlineContigPloidyCohortMode.use_ssd (Boolean, default=false) FilterIntervals.use_ssd (Boolean, default=false) GermlineCNVCallerCohortMode.use_ssd (Boolean, default=false) PostprocessGermlineCNVCalls.use_ssd (Boolean, default=false) PreprocessIntervals.use_ssd (Boolean, default=false) ScatterIntervals.use_ssd (Boolean, default=false)","title":"Defaults"},{"location":"workflows/LRCNVs/#outputs","text":"preprocessed_intervals (File) read_counts_entity_ids (Array[File]) read_counts (Array[File]) annotated_intervals (File?) filtered_intervals (File) contig_ploidy_model_tar (File) contig_ploidy_calls_tar (File) gcnv_model_tars (Array[File]) gcnv_calls_tars (Array[Array[File]]) gcnv_tracking_tars (Array[File]) genotyped_intervals_vcfs (Array[File]) genotyped_segments_vcfs (Array[File]) sample_qc_status_files (Array[File]) sample_qc_status_strings (Array[String]) model_qc_status_file (File) model_qc_string (String) denoised_copy_ratios (Array[File])","title":"Outputs"},{"location":"workflows/LRCNVs/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/LRConvertBCF/","text":"LRConvertBCF LRConvertBCF description Convert a BCF file into a .vcf.gz file. Meant to temporarily handle some transient issues stemming from the LRJointCallGVCFs workflow. Should be removed eventually. Inputs Required gcs_out_root_dir (String, required ): The root directory in GCS to store the output files joint_bcf (File, required ): The BCF file to convert prefix (String, required ): The prefix to use for the output files Optional ConcatBCFs.runtime_attr_override (RuntimeAttr?) ConvertToHailMT.ref_fai (String?) ConvertToHailMT.ref_fasta (String?) ConvertToHailMT.runtime_attr_override (RuntimeAttr?) FinalizeGVCF.keyfile (File?) FinalizeGVCF.name (String?) FinalizeGVCF.runtime_attr_override (RuntimeAttr?) FinalizeHailMT.keyfile (File?) FinalizeHailMT.name (String?) FinalizeHailMT.runtime_attr_override (RuntimeAttr?) FinalizeTBI.keyfile (File?) FinalizeTBI.name (String?) FinalizeTBI.runtime_attr_override (RuntimeAttr?) Defaults ConcatBCFs.num_cpus (Int, default=4) ConvertToHailMT.reference (String, default=\"GRCh38\") Outputs joint_gvcf (File) joint_gvcf_tbi (File) joint_mt (String) Dot Diagram","title":"LRConvertBCF"},{"location":"workflows/LRConvertBCF/#lrconvertbcf","text":"","title":"LRConvertBCF"},{"location":"workflows/LRConvertBCF/#lrconvertbcf_1","text":"description Convert a BCF file into a .vcf.gz file. Meant to temporarily handle some transient issues stemming from the LRJointCallGVCFs workflow. Should be removed eventually.","title":"LRConvertBCF"},{"location":"workflows/LRConvertBCF/#inputs","text":"","title":"Inputs"},{"location":"workflows/LRConvertBCF/#required","text":"gcs_out_root_dir (String, required ): The root directory in GCS to store the output files joint_bcf (File, required ): The BCF file to convert prefix (String, required ): The prefix to use for the output files","title":"Required"},{"location":"workflows/LRConvertBCF/#optional","text":"ConcatBCFs.runtime_attr_override (RuntimeAttr?) ConvertToHailMT.ref_fai (String?) ConvertToHailMT.ref_fasta (String?) ConvertToHailMT.runtime_attr_override (RuntimeAttr?) FinalizeGVCF.keyfile (File?) FinalizeGVCF.name (String?) FinalizeGVCF.runtime_attr_override (RuntimeAttr?) FinalizeHailMT.keyfile (File?) FinalizeHailMT.name (String?) FinalizeHailMT.runtime_attr_override (RuntimeAttr?) FinalizeTBI.keyfile (File?) FinalizeTBI.name (String?) FinalizeTBI.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/LRConvertBCF/#defaults","text":"ConcatBCFs.num_cpus (Int, default=4) ConvertToHailMT.reference (String, default=\"GRCh38\")","title":"Defaults"},{"location":"workflows/LRConvertBCF/#outputs","text":"joint_gvcf (File) joint_gvcf_tbi (File) joint_mt (String)","title":"Outputs"},{"location":"workflows/LRConvertBCF/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/LRJointCallGVCFs/","text":"LRJointCallGVCFs LRJointCallGVCFs description A workflow that performs joint calling on gVCFs (usually from DeepVariant) using GLNexus. Inputs Required gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files gvcfs (Array[File], required ): GCS paths to gVCF files prefix (String, required ): prefix for output joint-called gVCF and tabix index ref_map_file (File, required ): table indicating reference sequence and auxillary file locations tbis (Array[File], required ): GCS paths to gVCF tbi files Optional ConvertToHailMT.ref_fai (String?) ConvertToHailMT.ref_fasta (String?) ConvertToHailMT.runtime_attr_override (RuntimeAttr?) FinalizeGVCF.keyfile (File?) FinalizeGVCF.name (String?) FinalizeGVCF.runtime_attr_override (RuntimeAttr?) FinalizeMT.keyfile (File?) FinalizeMT.name (String?) FinalizeMT.runtime_attr_override (RuntimeAttr?) FinalizeTBI.keyfile (File?) FinalizeTBI.name (String?) FinalizeTBI.runtime_attr_override (RuntimeAttr?) JointCall.bed (File?) JointCall.num_cpus (Int?) JointCall.runtime_attr_override (RuntimeAttr?) JointCall.Call.runtime_attr_override (RuntimeAttr?) JointCall.ConcatBCFs.runtime_attr_override (RuntimeAttr?) JointCall.GetRanges.runtime_attr_override (RuntimeAttr?) JointCall.ShardVCFByRanges.runtime_attr_override (RuntimeAttr?) Defaults ConvertToHailMT.reference (String, default=\"GRCh38\") JointCall.config (String, default=\"DeepVariantWGS\") JointCall.max_cpus (Int, default=64) JointCall.more_PL (Boolean, default=false) JointCall.squeeze (Boolean, default=false) JointCall.trim_uncalled_alleles (Boolean, default=false) JointCall.ConcatBCFs.num_cpus (Int, default=4) Outputs joint_gvcf (File) joint_gvcf_tbi (File) joint_mt (String) Dot Diagram","title":"LRJointCallGVCFs"},{"location":"workflows/LRJointCallGVCFs/#lrjointcallgvcfs","text":"","title":"LRJointCallGVCFs"},{"location":"workflows/LRJointCallGVCFs/#lrjointcallgvcfs_1","text":"description A workflow that performs joint calling on gVCFs (usually from DeepVariant) using GLNexus.","title":"LRJointCallGVCFs"},{"location":"workflows/LRJointCallGVCFs/#inputs","text":"","title":"Inputs"},{"location":"workflows/LRJointCallGVCFs/#required","text":"gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files gvcfs (Array[File], required ): GCS paths to gVCF files prefix (String, required ): prefix for output joint-called gVCF and tabix index ref_map_file (File, required ): table indicating reference sequence and auxillary file locations tbis (Array[File], required ): GCS paths to gVCF tbi files","title":"Required"},{"location":"workflows/LRJointCallGVCFs/#optional","text":"ConvertToHailMT.ref_fai (String?) ConvertToHailMT.ref_fasta (String?) ConvertToHailMT.runtime_attr_override (RuntimeAttr?) FinalizeGVCF.keyfile (File?) FinalizeGVCF.name (String?) FinalizeGVCF.runtime_attr_override (RuntimeAttr?) FinalizeMT.keyfile (File?) FinalizeMT.name (String?) FinalizeMT.runtime_attr_override (RuntimeAttr?) FinalizeTBI.keyfile (File?) FinalizeTBI.name (String?) FinalizeTBI.runtime_attr_override (RuntimeAttr?) JointCall.bed (File?) JointCall.num_cpus (Int?) JointCall.runtime_attr_override (RuntimeAttr?) JointCall.Call.runtime_attr_override (RuntimeAttr?) JointCall.ConcatBCFs.runtime_attr_override (RuntimeAttr?) JointCall.GetRanges.runtime_attr_override (RuntimeAttr?) JointCall.ShardVCFByRanges.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/LRJointCallGVCFs/#defaults","text":"ConvertToHailMT.reference (String, default=\"GRCh38\") JointCall.config (String, default=\"DeepVariantWGS\") JointCall.max_cpus (Int, default=64) JointCall.more_PL (Boolean, default=false) JointCall.squeeze (Boolean, default=false) JointCall.trim_uncalled_alleles (Boolean, default=false) JointCall.ConcatBCFs.num_cpus (Int, default=4)","title":"Defaults"},{"location":"workflows/LRJointCallGVCFs/#outputs","text":"joint_gvcf (File) joint_gvcf_tbi (File) joint_mt (String)","title":"Outputs"},{"location":"workflows/LRJointCallGVCFs/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Longbow/","text":"Longbow Process description Process a BAM file using Longbow Inputs Required bam (File, required ): BAM file to process Optional barcode_allow_list (File?): File containing a list of barcodes to allow barcode_tag (String?): Tag containing the barcode corrected_tag (String?): Tag to use for corrected barcode model (String?): Longbow model to use for processing AggregateCorrectLogStats.runtime_attr_override (RuntimeAttr?) Extract.bam_pbi (File?) Extract.leading_adapter (String?) Extract.runtime_attr_override (RuntimeAttr?) Extract.start_offset (Int?) Extract.trailing_adapter (String?) t_01_Peek.runtime_attr_override (RuntimeAttr?) t_02_Annotate.runtime_attr_override (RuntimeAttr?) t_03_Filter.bam_pbi (File?) t_03_Filter.model (String?): Longbow model to use for processing t_03_Filter.runtime_attr_override (RuntimeAttr?) t_04_Segment.model (String?): Longbow model to use for processing t_04_Segment.runtime_attr_override (RuntimeAttr?) t_05_RemoveMasSeqTruncatedReads.runtime_attr_override (RuntimeAttr?) t_07_PadUMI.runtime_attr_override (RuntimeAttr?) t_08_PadCBC.runtime_attr_override (RuntimeAttr?) t_09_Correct.barcode_freq_list (File?) t_09_Correct.runtime_attr_override (RuntimeAttr?) t_10_AdjustUmiSequenceWithAdapterAlignment.runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\"): Prefix for output files same_barcode_per_read (Boolean, default=false): Whether to assume that all reads in a pair have the same barcode shard_width (Int, default=25): Width of shards to use for processing Extract.base_padding (Int, default=2) Extract.num_cpus (Int, default=2) t_01_Peek.n (Int, default=100) t_02_Annotate.num_cpus (Int, default=8) t_03_Filter.num_cpus (Int, default=2) t_04_Segment.num_cpus (Int, default=2) t_07_PadUMI.padding (Int, default=2) t_08_PadCBC.padding (Int, default=2) t_09_Correct.ccs_lev_dist_threshold (Int, default=2) t_09_Correct.clr_lev_dist_threshold (Int, default=2) t_10_AdjustUmiSequenceWithAdapterAlignment.existing_umi_tag (String, default=\"ZU\") t_10_AdjustUmiSequenceWithAdapterAlignment.new_umi_tag (String, default=\"JX\") Outputs annotated_bam (File) segmented_bam (File) filtered_bam (File) filter_failed_bam (File) corrected_bam (File?) uncorrectable_bam (File?) extracted_bam (File) correct_stats (File?) correct_log (File?) umi_adjustment_log (File) Dot Diagram","title":"Longbow"},{"location":"workflows/Longbow/#longbow","text":"","title":"Longbow"},{"location":"workflows/Longbow/#process","text":"description Process a BAM file using Longbow","title":"Process"},{"location":"workflows/Longbow/#inputs","text":"","title":"Inputs"},{"location":"workflows/Longbow/#required","text":"bam (File, required ): BAM file to process","title":"Required"},{"location":"workflows/Longbow/#optional","text":"barcode_allow_list (File?): File containing a list of barcodes to allow barcode_tag (String?): Tag containing the barcode corrected_tag (String?): Tag to use for corrected barcode model (String?): Longbow model to use for processing AggregateCorrectLogStats.runtime_attr_override (RuntimeAttr?) Extract.bam_pbi (File?) Extract.leading_adapter (String?) Extract.runtime_attr_override (RuntimeAttr?) Extract.start_offset (Int?) Extract.trailing_adapter (String?) t_01_Peek.runtime_attr_override (RuntimeAttr?) t_02_Annotate.runtime_attr_override (RuntimeAttr?) t_03_Filter.bam_pbi (File?) t_03_Filter.model (String?): Longbow model to use for processing t_03_Filter.runtime_attr_override (RuntimeAttr?) t_04_Segment.model (String?): Longbow model to use for processing t_04_Segment.runtime_attr_override (RuntimeAttr?) t_05_RemoveMasSeqTruncatedReads.runtime_attr_override (RuntimeAttr?) t_07_PadUMI.runtime_attr_override (RuntimeAttr?) t_08_PadCBC.runtime_attr_override (RuntimeAttr?) t_09_Correct.barcode_freq_list (File?) t_09_Correct.runtime_attr_override (RuntimeAttr?) t_10_AdjustUmiSequenceWithAdapterAlignment.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Longbow/#defaults","text":"prefix (String, default=\"out\"): Prefix for output files same_barcode_per_read (Boolean, default=false): Whether to assume that all reads in a pair have the same barcode shard_width (Int, default=25): Width of shards to use for processing Extract.base_padding (Int, default=2) Extract.num_cpus (Int, default=2) t_01_Peek.n (Int, default=100) t_02_Annotate.num_cpus (Int, default=8) t_03_Filter.num_cpus (Int, default=2) t_04_Segment.num_cpus (Int, default=2) t_07_PadUMI.padding (Int, default=2) t_08_PadCBC.padding (Int, default=2) t_09_Correct.ccs_lev_dist_threshold (Int, default=2) t_09_Correct.clr_lev_dist_threshold (Int, default=2) t_10_AdjustUmiSequenceWithAdapterAlignment.existing_umi_tag (String, default=\"ZU\") t_10_AdjustUmiSequenceWithAdapterAlignment.new_umi_tag (String, default=\"JX\")","title":"Defaults"},{"location":"workflows/Longbow/#outputs","text":"annotated_bam (File) segmented_bam (File) filtered_bam (File) filter_failed_bam (File) corrected_bam (File?) uncorrectable_bam (File?) extracted_bam (File) correct_stats (File?) correct_log (File?) umi_adjustment_log (File)","title":"Outputs"},{"location":"workflows/Longbow/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/MalariaReportsWorkflow/","text":"MalariaReportsWorkflow GenerateMalariaReports author Bridget Knight description Report Generation This workflow calls the Python script that generates a sequencing report. Inputs Required aligned_bai (File, required ): GCS path to aligned bai aligned_bam (File, required ): GCS path to aligned bam aligned_bases (Float, required ): total number of bases aligned to the reference genome aligned_coverage (Float, required ): number of reads uniquely mapped to a reference aligned_reads (Int, required ): total number of reads aligned to the reference genome average_identity (Float, required ) fraction_aligned_bases (Float, required ): number of bases aligned out of all bases in the sequence location_table (File, required ): table containing the region, district, site, and facility type for this sample's location num_reads_q10 (Int, required ): the number of reads where the probability of a given base call being wrong is 1 in 10 num_reads_q12 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 16 num_reads_q15 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 31 num_reads_q5 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 3 num_reads_q7 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 5 qc_pass (String, required ): status to determine whether or not the sequencing run passes quality control standards ref_map_file (File, required ): table indicating reference sequence and auxillary file locations regions_bed (File, required ): GCS path to bed file containing drug resistance loci sample_name (String, required ): name of sequenced sample tech_flag (String, required ): string denoting if the sample was sequenced using long read or short read techniques upload_date (String, required ): date sample was uploaded Optional HRP2 (String?): value denoting whether the HRP2 marker is present or not -- true or false HRP3 (String?): value denoting whether the HRP3 marker is present or not -- true or false aligned_read_length (Float?): number at which 50% of the read lengths are longer than this value barcode (String?): the barcode of the sample code (String?): the three letter code denoting the corresponding health facility/site collection_date (String?): date sample was collected coverage_bin_size (Int?): number to use as size of bins for coverage plot generation; default is 1500 drug_resistance_text (File?): text file used for determining and displaying drug resistances fastqc_path (File?): directory of fastqc_report used for finding BAM files latitude (Float?): latitude value of where the sample was taken location (String?): location where the sample was taken longitude (Float?): longitude value of where the sample was taken ont_qc_report (File?): ONT QC report file pct_properly_paired_reads (Float?): percent of reads that are properly paired/aligned predicted_drug_status_artemisinin (String?): value denoting the sensitivity of this sample to artemisinin predicted_drug_status_chloroquine (String?): value denoting the sensitivity of this sample to chloroquine predicted_drug_status_mefloquine (String?): value denoting the sensitivity of this sample to mefloquine predicted_drug_status_piperaquine (String?): value denoting the sensitivity of this sample to piperaquine predicted_drug_status_pyrimethamine (String?): value denoting the sensitivity of this sample to pyrimethamine predicted_drug_status_sulfadoxine (String?): value denoting the sensitivity of this sample to sulfadoxine read_qual_mean (Float?): mean measure of the uncertainty of base calls sequencing_date (String?): date sample was sequenced species (String?): species of sample GenerateSnapshots.runtime_attr_override (RuntimeAttr?) RunReportScript.runtime_attr_override (RuntimeAttr?) Outputs report (File) Dot Diagram","title":"MalariaReportsWorkflow"},{"location":"workflows/MalariaReportsWorkflow/#malariareportsworkflow","text":"","title":"MalariaReportsWorkflow"},{"location":"workflows/MalariaReportsWorkflow/#generatemalariareports","text":"author Bridget Knight description","title":"GenerateMalariaReports"},{"location":"workflows/MalariaReportsWorkflow/#report-generation","text":"This workflow calls the Python script that generates a sequencing report.","title":"Report Generation"},{"location":"workflows/MalariaReportsWorkflow/#inputs","text":"","title":"Inputs"},{"location":"workflows/MalariaReportsWorkflow/#required","text":"aligned_bai (File, required ): GCS path to aligned bai aligned_bam (File, required ): GCS path to aligned bam aligned_bases (Float, required ): total number of bases aligned to the reference genome aligned_coverage (Float, required ): number of reads uniquely mapped to a reference aligned_reads (Int, required ): total number of reads aligned to the reference genome average_identity (Float, required ) fraction_aligned_bases (Float, required ): number of bases aligned out of all bases in the sequence location_table (File, required ): table containing the region, district, site, and facility type for this sample's location num_reads_q10 (Int, required ): the number of reads where the probability of a given base call being wrong is 1 in 10 num_reads_q12 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 16 num_reads_q15 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 31 num_reads_q5 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 3 num_reads_q7 (Int, required ): the number of reads where the probability of a given base call being wrong is approximately 1 in 5 qc_pass (String, required ): status to determine whether or not the sequencing run passes quality control standards ref_map_file (File, required ): table indicating reference sequence and auxillary file locations regions_bed (File, required ): GCS path to bed file containing drug resistance loci sample_name (String, required ): name of sequenced sample tech_flag (String, required ): string denoting if the sample was sequenced using long read or short read techniques upload_date (String, required ): date sample was uploaded","title":"Required"},{"location":"workflows/MalariaReportsWorkflow/#optional","text":"HRP2 (String?): value denoting whether the HRP2 marker is present or not -- true or false HRP3 (String?): value denoting whether the HRP3 marker is present or not -- true or false aligned_read_length (Float?): number at which 50% of the read lengths are longer than this value barcode (String?): the barcode of the sample code (String?): the three letter code denoting the corresponding health facility/site collection_date (String?): date sample was collected coverage_bin_size (Int?): number to use as size of bins for coverage plot generation; default is 1500 drug_resistance_text (File?): text file used for determining and displaying drug resistances fastqc_path (File?): directory of fastqc_report used for finding BAM files latitude (Float?): latitude value of where the sample was taken location (String?): location where the sample was taken longitude (Float?): longitude value of where the sample was taken ont_qc_report (File?): ONT QC report file pct_properly_paired_reads (Float?): percent of reads that are properly paired/aligned predicted_drug_status_artemisinin (String?): value denoting the sensitivity of this sample to artemisinin predicted_drug_status_chloroquine (String?): value denoting the sensitivity of this sample to chloroquine predicted_drug_status_mefloquine (String?): value denoting the sensitivity of this sample to mefloquine predicted_drug_status_piperaquine (String?): value denoting the sensitivity of this sample to piperaquine predicted_drug_status_pyrimethamine (String?): value denoting the sensitivity of this sample to pyrimethamine predicted_drug_status_sulfadoxine (String?): value denoting the sensitivity of this sample to sulfadoxine read_qual_mean (Float?): mean measure of the uncertainty of base calls sequencing_date (String?): date sample was sequenced species (String?): species of sample GenerateSnapshots.runtime_attr_override (RuntimeAttr?) RunReportScript.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/MalariaReportsWorkflow/#outputs","text":"report (File)","title":"Outputs"},{"location":"workflows/MalariaReportsWorkflow/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTAssembleWithCanu/","text":"ONTAssembleWithCanu ONTAssembleWithCanu description A workflow that performs single sample genome assembly on ONT reads from one or more flow cells. The workflow merges multiple samples into a single BAM prior to genome assembly and variant calling. Inputs Required gcs_fastq_dir (String, required ): GCS path to unaligned CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAsmPolished.keyfile (File?) FinalizeAsmPolished.name (String?) FinalizeAsmPolished.runtime_attr_override (RuntimeAttr?) FinalizeAsmUnpolished.keyfile (File?) FinalizeAsmUnpolished.name (String?) FinalizeAsmUnpolished.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportTxt.keyfile (File?) FinalizeQuastReportTxt.name (String?) FinalizeQuastReportTxt.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MedakaPolish.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) Quast.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.AlignAsPAF.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.Paftools.runtime_attr_override (RuntimeAttr?) Canu.Assemble.runtime_attr_override (RuntimeAttr?) Canu.Correct.runtime_attr_override (RuntimeAttr?) Canu.Trim.runtime_attr_override (RuntimeAttr?) Defaults assemble_error_rate (Float, default=0.15): stringency for overlaps in Canu's assemble step correct_error_rate (Float, default=0.15): stringency for overlaps in Canu's correction step medaka_model (String, default=\"r941_prom_high_g360\"): Medaka polishing model name trim_error_rate (Float, default=0.15): stringency for overlaps in Canu's trim step ListFilesOfType.recurse (Boolean, default=false) MergeFastqs.prefix (String, default=\"merged\"): prefix for output files Quast.is_large (Boolean, default=false) Outputs asm_unpolished (File) asm_polished (File) paf (File) paftools_vcf (File) quast_report_html (File) quast_report_txt (File) quast_summary (Map[String,String]) Dot Diagram","title":"ONTAssembleWithCanu"},{"location":"workflows/ONTAssembleWithCanu/#ontassemblewithcanu","text":"","title":"ONTAssembleWithCanu"},{"location":"workflows/ONTAssembleWithCanu/#ontassemblewithcanu_1","text":"description A workflow that performs single sample genome assembly on ONT reads from one or more flow cells. The workflow merges multiple samples into a single BAM prior to genome assembly and variant calling.","title":"ONTAssembleWithCanu"},{"location":"workflows/ONTAssembleWithCanu/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTAssembleWithCanu/#required","text":"gcs_fastq_dir (String, required ): GCS path to unaligned CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/ONTAssembleWithCanu/#optional","text":"ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAsmPolished.keyfile (File?) FinalizeAsmPolished.name (String?) FinalizeAsmPolished.runtime_attr_override (RuntimeAttr?) FinalizeAsmUnpolished.keyfile (File?) FinalizeAsmUnpolished.name (String?) FinalizeAsmUnpolished.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportTxt.keyfile (File?) FinalizeQuastReportTxt.name (String?) FinalizeQuastReportTxt.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MedakaPolish.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) Quast.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.AlignAsPAF.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.Paftools.runtime_attr_override (RuntimeAttr?) Canu.Assemble.runtime_attr_override (RuntimeAttr?) Canu.Correct.runtime_attr_override (RuntimeAttr?) Canu.Trim.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTAssembleWithCanu/#defaults","text":"assemble_error_rate (Float, default=0.15): stringency for overlaps in Canu's assemble step correct_error_rate (Float, default=0.15): stringency for overlaps in Canu's correction step medaka_model (String, default=\"r941_prom_high_g360\"): Medaka polishing model name trim_error_rate (Float, default=0.15): stringency for overlaps in Canu's trim step ListFilesOfType.recurse (Boolean, default=false) MergeFastqs.prefix (String, default=\"merged\"): prefix for output files Quast.is_large (Boolean, default=false)","title":"Defaults"},{"location":"workflows/ONTAssembleWithCanu/#outputs","text":"asm_unpolished (File) asm_polished (File) paf (File) paftools_vcf (File) quast_report_html (File) quast_report_txt (File) quast_summary (Map[String,String])","title":"Outputs"},{"location":"workflows/ONTAssembleWithCanu/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTAssembleWithFlye/","text":"ONTAssembleWithFlye ONTAssembleWithFlye description Perform single sample genome assembly on ONT reads from one or more flow cells. The workflow merges multiple samples into a single BAM prior to genome assembly and variant calling. Inputs Required gcs_fastq_dir (String, required ): GCS path to unaligned CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAsmPolished.keyfile (File?) FinalizeAsmPolished.name (String?) FinalizeAsmPolished.runtime_attr_override (RuntimeAttr?) FinalizeAsmUnpolished.keyfile (File?) FinalizeAsmUnpolished.name (String?) FinalizeAsmUnpolished.runtime_attr_override (RuntimeAttr?) FinalizePaf.keyfile (File?) FinalizePaf.name (String?) FinalizePaf.runtime_attr_override (RuntimeAttr?) FinalizePafToolsVcf.keyfile (File?) FinalizePafToolsVcf.name (String?) FinalizePafToolsVcf.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportTxt.keyfile (File?) FinalizeQuastReportTxt.name (String?) FinalizeQuastReportTxt.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MedakaPolish.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) Quast.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.AlignAsPAF.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.Paftools.runtime_attr_override (RuntimeAttr?) Defaults medaka_model (String, default=\"r941_prom_high_g360\"): Medaka polishing model name ListFilesOfType.recurse (Boolean, default=false) MergeFastqs.prefix (String, default=\"merged\"): prefix for output files Quast.is_large (Boolean, default=false) Outputs asm_unpolished (File) asm_polished (File) paf (File) paftools_vcf (File) quast_report_html (File) quast_report_txt (File) quast_summary (Map[String,String]) Dot Diagram","title":"ONTAssembleWithFlye"},{"location":"workflows/ONTAssembleWithFlye/#ontassemblewithflye","text":"","title":"ONTAssembleWithFlye"},{"location":"workflows/ONTAssembleWithFlye/#ontassemblewithflye_1","text":"description Perform single sample genome assembly on ONT reads from one or more flow cells. The workflow merges multiple samples into a single BAM prior to genome assembly and variant calling.","title":"ONTAssembleWithFlye"},{"location":"workflows/ONTAssembleWithFlye/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTAssembleWithFlye/#required","text":"gcs_fastq_dir (String, required ): GCS path to unaligned CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/ONTAssembleWithFlye/#optional","text":"ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAsmPolished.keyfile (File?) FinalizeAsmPolished.name (String?) FinalizeAsmPolished.runtime_attr_override (RuntimeAttr?) FinalizeAsmUnpolished.keyfile (File?) FinalizeAsmUnpolished.name (String?) FinalizeAsmUnpolished.runtime_attr_override (RuntimeAttr?) FinalizePaf.keyfile (File?) FinalizePaf.name (String?) FinalizePaf.runtime_attr_override (RuntimeAttr?) FinalizePafToolsVcf.keyfile (File?) FinalizePafToolsVcf.name (String?) FinalizePafToolsVcf.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportTxt.keyfile (File?) FinalizeQuastReportTxt.name (String?) FinalizeQuastReportTxt.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MedakaPolish.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) Quast.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.AlignAsPAF.runtime_attr_override (RuntimeAttr?) CallAssemblyVariants.Paftools.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTAssembleWithFlye/#defaults","text":"medaka_model (String, default=\"r941_prom_high_g360\"): Medaka polishing model name ListFilesOfType.recurse (Boolean, default=false) MergeFastqs.prefix (String, default=\"merged\"): prefix for output files Quast.is_large (Boolean, default=false)","title":"Defaults"},{"location":"workflows/ONTAssembleWithFlye/#outputs","text":"asm_unpolished (File) asm_polished (File) paf (File) paftools_vcf (File) quast_report_html (File) quast_report_txt (File) quast_summary (Map[String,String])","title":"Outputs"},{"location":"workflows/ONTAssembleWithFlye/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTBasecall/","text":"ONTBasecall ONTBasecall description Basecall ONT reads Inputs Required gcs_fast5_dir (String, required ): GCS path to the directory containing fast5 files gcs_out_root_dir (String, required ): GCS path to the root directory for output prefix (String, required ): Prefix for output directory Optional barcode_kit (String?): Guppy barcode kit Guppy.num_shards (Int?) Guppy.protocol_run_id (String?) Guppy.sample_name (String?) Guppy.Basecall.runtime_attr_override (RuntimeAttr?) Guppy.FinalizeBasecalls.runtime_attr_override (RuntimeAttr?) Guppy.ListFast5s.runtime_attr_override (RuntimeAttr?) Guppy.MakeFinalSummary.runtime_attr_override (RuntimeAttr?) Guppy.MakeSequencingSummary.runtime_attr_override (RuntimeAttr?) Guppy.PartitionFast5Manifest.runtime_attr_override (RuntimeAttr?) Guppy.SumFailingFastqs.runtime_attr_override (RuntimeAttr?) Guppy.SumPassingFastqs.runtime_attr_override (RuntimeAttr?) Guppy.TimestampStopped.runtime_attr_override (RuntimeAttr?) Guppy.UniqueBarcodes.runtime_attr_override (RuntimeAttr?) Defaults config (String, default=\"dna_r10.4.1_e8.2_400bps_sup.cfg\"): Guppy config file Guppy.flow_cell_id (String, default=\"unknown\") Guppy.instrument (String, default=\"unknown\") Guppy.SumFailingFastqs.prefix (String, default=\"sum\"): Prefix for output directory Guppy.SumPassingFastqs.prefix (String, default=\"sum\"): Prefix for output directory Outputs gcs_basecall_dir (String) Dot Diagram","title":"ONTBasecall"},{"location":"workflows/ONTBasecall/#ontbasecall","text":"","title":"ONTBasecall"},{"location":"workflows/ONTBasecall/#ontbasecall_1","text":"description Basecall ONT reads","title":"ONTBasecall"},{"location":"workflows/ONTBasecall/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTBasecall/#required","text":"gcs_fast5_dir (String, required ): GCS path to the directory containing fast5 files gcs_out_root_dir (String, required ): GCS path to the root directory for output prefix (String, required ): Prefix for output directory","title":"Required"},{"location":"workflows/ONTBasecall/#optional","text":"barcode_kit (String?): Guppy barcode kit Guppy.num_shards (Int?) Guppy.protocol_run_id (String?) Guppy.sample_name (String?) Guppy.Basecall.runtime_attr_override (RuntimeAttr?) Guppy.FinalizeBasecalls.runtime_attr_override (RuntimeAttr?) Guppy.ListFast5s.runtime_attr_override (RuntimeAttr?) Guppy.MakeFinalSummary.runtime_attr_override (RuntimeAttr?) Guppy.MakeSequencingSummary.runtime_attr_override (RuntimeAttr?) Guppy.PartitionFast5Manifest.runtime_attr_override (RuntimeAttr?) Guppy.SumFailingFastqs.runtime_attr_override (RuntimeAttr?) Guppy.SumPassingFastqs.runtime_attr_override (RuntimeAttr?) Guppy.TimestampStopped.runtime_attr_override (RuntimeAttr?) Guppy.UniqueBarcodes.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTBasecall/#defaults","text":"config (String, default=\"dna_r10.4.1_e8.2_400bps_sup.cfg\"): Guppy config file Guppy.flow_cell_id (String, default=\"unknown\") Guppy.instrument (String, default=\"unknown\") Guppy.SumFailingFastqs.prefix (String, default=\"sum\"): Prefix for output directory Guppy.SumPassingFastqs.prefix (String, default=\"sum\"): Prefix for output directory","title":"Defaults"},{"location":"workflows/ONTBasecall/#outputs","text":"gcs_basecall_dir (String)","title":"Outputs"},{"location":"workflows/ONTBasecall/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTFlowcell/","text":"ONTFlowcell ONTFlowcell description Align ONT reads to a reference genome Inputs Required ID (String, required ): the value to place in the BAM read group's ID field SM (String, required ): the value to place in the BAM read group's SM field dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): [default-valued] type of experiment run (DNA, RNA, R2C2) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional fastq_dir (String?): GCS path to fastq directory final_summary (File?): GCS path to ' final_summary .txt*' file for basecalled fastq files sequencing_summary (File?): GCS path to ' sequencing_summary .txt*' file for basecalled fastq files AlignReads.library (String?) AlignReads.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) ListFastqs.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) NanoPlotFromRichFastqs.runtime_attr_override (RuntimeAttr?) NanoPlotFromSummary.runtime_attr_override (RuntimeAttr?) PartitionFastqManifest.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?) Defaults num_shards (Int, default=300): [default-valued] number of shards into which fastq files should be batched AlignReads.prefix (String, default=\"out\") AlignReads.tags_to_preserve (Array[String], default=[]) Outputs active_channels (Float) aligned_bam (File) aligned_bai (File) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q7 (Float) num_reads_Q10 (Float) num_reads_Q12 (Float) num_reads_Q15 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) Dot Diagram","title":"ONTFlowcell"},{"location":"workflows/ONTFlowcell/#ontflowcell","text":"","title":"ONTFlowcell"},{"location":"workflows/ONTFlowcell/#ontflowcell_1","text":"description Align ONT reads to a reference genome","title":"ONTFlowcell"},{"location":"workflows/ONTFlowcell/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTFlowcell/#required","text":"ID (String, required ): the value to place in the BAM read group's ID field SM (String, required ): the value to place in the BAM read group's SM field dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): [default-valued] type of experiment run (DNA, RNA, R2C2) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/ONTFlowcell/#optional","text":"fastq_dir (String?): GCS path to fastq directory final_summary (File?): GCS path to ' final_summary .txt*' file for basecalled fastq files sequencing_summary (File?): GCS path to ' sequencing_summary .txt*' file for basecalled fastq files AlignReads.library (String?) AlignReads.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) ListFastqs.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) NanoPlotFromRichFastqs.runtime_attr_override (RuntimeAttr?) NanoPlotFromSummary.runtime_attr_override (RuntimeAttr?) PartitionFastqManifest.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTFlowcell/#defaults","text":"num_shards (Int, default=300): [default-valued] number of shards into which fastq files should be batched AlignReads.prefix (String, default=\"out\") AlignReads.tags_to_preserve (Array[String], default=[])","title":"Defaults"},{"location":"workflows/ONTFlowcell/#outputs","text":"active_channels (Float) aligned_bam (File) aligned_bai (File) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q7 (Float) num_reads_Q10 (Float) num_reads_Q12 (Float) num_reads_Q15 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float)","title":"Outputs"},{"location":"workflows/ONTFlowcell/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/","text":"ONTFlowcellFromMultipleBasecalls ONTFlowcellFromMultipleBasecalls Inputs Required aligned_bais (Array[File], required ) aligned_bams (Array[File], required ) flowcell (String, required ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional bed_to_compute_coverage (File?): A BED listing regions where each will get a coverage summary FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveDuplicates.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?) Defaults bams_suspected_to_contain_dup_record (Boolean, default=true): if the multiple basecalls are suspected to have duplicates amongst them Outputs last_process_date (String) aligned_bam (File) aligned_bai (File) bed_cov_summary (File?) aligned_reads_stats (Map[String,Float]) Dot Diagram","title":"ONTFlowcellFromMultipleBasecalls"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#ontflowcellfrommultiplebasecalls","text":"","title":"ONTFlowcellFromMultipleBasecalls"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#ontflowcellfrommultiplebasecalls_1","text":"","title":"ONTFlowcellFromMultipleBasecalls"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#required","text":"aligned_bais (Array[File], required ) aligned_bams (Array[File], required ) flowcell (String, required ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#optional","text":"bed_to_compute_coverage (File?): A BED listing regions where each will get a coverage summary FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveDuplicates.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#defaults","text":"bams_suspected_to_contain_dup_record (Boolean, default=true): if the multiple basecalls are suspected to have duplicates amongst them","title":"Defaults"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#outputs","text":"last_process_date (String) aligned_bam (File) aligned_bai (File) bed_cov_summary (File?) aligned_reads_stats (Map[String,Float])","title":"Outputs"},{"location":"workflows/ONTFlowcellFromMultipleBasecalls/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTMethylation/","text":"ONTMethylation ONTMethylation description ONT Methylation pipeline Inputs Required gcs_fast5_dir (String, required ): GCS directory containing fast5 files gcs_out_root_dir (String, required ): GCS directory to write output files participant_name (String, required ): Participant name prefix (String, required ): Prefix for output files ref_map_file (File, required ): Reference map file variants (File, required ): VCF file containing variants variants_tbi (File, required ): Tabix index for VCF file Optional CallHaplotype1Variants.runtime_attr_override (RuntimeAttr?) CallHaplotype2Variants.runtime_attr_override (RuntimeAttr?) CatMappingSummaries.runtime_attr_override (RuntimeAttr?) CatModifiedBases5mC.runtime_attr_override (RuntimeAttr?) CatSequencingSummaries.runtime_attr_override (RuntimeAttr?) ChunkManifest.runtime_attr_override (RuntimeAttr?) ExtractHaplotypeReads.runtime_attr_override (RuntimeAttr?) FinalizeHaplotaggedBai.keyfile (File?) FinalizeHaplotaggedBai.runtime_attr_override (RuntimeAttr?) FinalizeHaplotaggedBam.keyfile (File?) FinalizeHaplotaggedBam.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype1Tbi.keyfile (File?) FinalizeHaplotype1Tbi.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype1Vcf.keyfile (File?) FinalizeHaplotype1Vcf.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype2Tbi.keyfile (File?) FinalizeHaplotype2Tbi.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype2Vcf.keyfile (File?) FinalizeHaplotype2Vcf.runtime_attr_override (RuntimeAttr?) FinalizeModMappedBai.keyfile (File?) FinalizeModMappedBai.runtime_attr_override (RuntimeAttr?) FinalizeModMappedBam.keyfile (File?) FinalizeModMappedBam.runtime_attr_override (RuntimeAttr?) FinalizePhasedTbi.keyfile (File?) FinalizePhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizePhasedVcf.keyfile (File?) FinalizePhasedVcf.runtime_attr_override (RuntimeAttr?) Haplotag.runtime_attr_override (RuntimeAttr?) IndexVariants.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) Megalodon.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) MergeHaplotagBams.runtime_attr_override (RuntimeAttr?) MergeMappings.runtime_attr_override (RuntimeAttr?) MergeModMappings.runtime_attr_override (RuntimeAttr?) MergeModifiedBaseCallDBs.runtime_attr_override (RuntimeAttr?) MergePerChrCalls.runtime_attr_override (RuntimeAttr?) MergeVarMappings.runtime_attr_override (RuntimeAttr?) MergeVariantDBs.runtime_attr_override (RuntimeAttr?) PhaseVariants.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) SubsetVCF.runtime_attr_override (RuntimeAttr?) WhatsHapFilter.runtime_attr_override (RuntimeAttr?) Defaults ListFilesOfType.recurse (Boolean, default=false) MergeHaplotagBams.prefix (String, default=\"out\"): Prefix for output files MergeMappings.prefix (String, default=\"out\"): Prefix for output files MergeModMappings.prefix (String, default=\"out\"): Prefix for output files MergeVarMappings.prefix (String, default=\"out\"): Prefix for output files Outputs phased_vcf (File) phased_tbi (File) mod_mapped_bam (File) mod_mapped_bai (File) haplotagged_bam (File) haplotagged_bai (File) haplotype1_vcf (File) haplotype1_tbi (File) haplotype2_vcf (File) haplotype2_tbi (File) Dot Diagram","title":"ONTMethylation"},{"location":"workflows/ONTMethylation/#ontmethylation","text":"","title":"ONTMethylation"},{"location":"workflows/ONTMethylation/#ontmethylation_1","text":"description ONT Methylation pipeline","title":"ONTMethylation"},{"location":"workflows/ONTMethylation/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTMethylation/#required","text":"gcs_fast5_dir (String, required ): GCS directory containing fast5 files gcs_out_root_dir (String, required ): GCS directory to write output files participant_name (String, required ): Participant name prefix (String, required ): Prefix for output files ref_map_file (File, required ): Reference map file variants (File, required ): VCF file containing variants variants_tbi (File, required ): Tabix index for VCF file","title":"Required"},{"location":"workflows/ONTMethylation/#optional","text":"CallHaplotype1Variants.runtime_attr_override (RuntimeAttr?) CallHaplotype2Variants.runtime_attr_override (RuntimeAttr?) CatMappingSummaries.runtime_attr_override (RuntimeAttr?) CatModifiedBases5mC.runtime_attr_override (RuntimeAttr?) CatSequencingSummaries.runtime_attr_override (RuntimeAttr?) ChunkManifest.runtime_attr_override (RuntimeAttr?) ExtractHaplotypeReads.runtime_attr_override (RuntimeAttr?) FinalizeHaplotaggedBai.keyfile (File?) FinalizeHaplotaggedBai.runtime_attr_override (RuntimeAttr?) FinalizeHaplotaggedBam.keyfile (File?) FinalizeHaplotaggedBam.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype1Tbi.keyfile (File?) FinalizeHaplotype1Tbi.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype1Vcf.keyfile (File?) FinalizeHaplotype1Vcf.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype2Tbi.keyfile (File?) FinalizeHaplotype2Tbi.runtime_attr_override (RuntimeAttr?) FinalizeHaplotype2Vcf.keyfile (File?) FinalizeHaplotype2Vcf.runtime_attr_override (RuntimeAttr?) FinalizeModMappedBai.keyfile (File?) FinalizeModMappedBai.runtime_attr_override (RuntimeAttr?) FinalizeModMappedBam.keyfile (File?) FinalizeModMappedBam.runtime_attr_override (RuntimeAttr?) FinalizePhasedTbi.keyfile (File?) FinalizePhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizePhasedVcf.keyfile (File?) FinalizePhasedVcf.runtime_attr_override (RuntimeAttr?) Haplotag.runtime_attr_override (RuntimeAttr?) IndexVariants.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) Megalodon.runtime_attr_override (RuntimeAttr?) MergeFastqs.runtime_attr_override (RuntimeAttr?) MergeHaplotagBams.runtime_attr_override (RuntimeAttr?) MergeMappings.runtime_attr_override (RuntimeAttr?) MergeModMappings.runtime_attr_override (RuntimeAttr?) MergeModifiedBaseCallDBs.runtime_attr_override (RuntimeAttr?) MergePerChrCalls.runtime_attr_override (RuntimeAttr?) MergeVarMappings.runtime_attr_override (RuntimeAttr?) MergeVariantDBs.runtime_attr_override (RuntimeAttr?) PhaseVariants.runtime_attr_override (RuntimeAttr?) SubsetBam.runtime_attr_override (RuntimeAttr?) SubsetVCF.runtime_attr_override (RuntimeAttr?) WhatsHapFilter.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTMethylation/#defaults","text":"ListFilesOfType.recurse (Boolean, default=false) MergeHaplotagBams.prefix (String, default=\"out\"): Prefix for output files MergeMappings.prefix (String, default=\"out\"): Prefix for output files MergeModMappings.prefix (String, default=\"out\"): Prefix for output files MergeVarMappings.prefix (String, default=\"out\"): Prefix for output files","title":"Defaults"},{"location":"workflows/ONTMethylation/#outputs","text":"phased_vcf (File) phased_tbi (File) mod_mapped_bam (File) mod_mapped_bai (File) haplotagged_bam (File) haplotagged_bai (File) haplotype1_vcf (File) haplotype1_tbi (File) haplotype2_vcf (File) haplotype2_tbi (File)","title":"Outputs"},{"location":"workflows/ONTMethylation/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTProcessBasecall/","text":"ONTProcessBasecall ONTProcessBasecall Inputs Required ID (String, required ): the value to place in the BAM read group's ID field SM (String, required ): the value to place in the BAM read group's SM field dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): [default-valued] type of experiment run (DNA, RNA, R2C2) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional fastq_dir (String?): GCS path to fastq directory final_summary (File?): GCS path to ' final_summary .txt*' file for basecalled fastq files sequencing_summary (File?): GCS path to ' sequencing_summary .txt*' file for basecalled fastq files AlignReads.library (String?) AlignReads.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) ListFastqs.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) NanoPlotFromRichFastqs.runtime_attr_override (RuntimeAttr?) NanoPlotFromSummary.runtime_attr_override (RuntimeAttr?) PartitionFastqManifest.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?) Defaults num_shards (Int, default=300): [default-valued] number of shards into which fastq files should be batched AlignReads.prefix (String, default=\"out\") AlignReads.tags_to_preserve (Array[String], default=[]) Outputs last_process_date (String) aligned_bam (File) aligned_bai (File) raw_reads_stats (Map[String,Float]) aligned_reads_stats (Map[String,Float]) Dot Diagram","title":"ONTProcessBasecall"},{"location":"workflows/ONTProcessBasecall/#ontprocessbasecall","text":"","title":"ONTProcessBasecall"},{"location":"workflows/ONTProcessBasecall/#ontprocessbasecall_1","text":"","title":"ONTProcessBasecall"},{"location":"workflows/ONTProcessBasecall/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTProcessBasecall/#required","text":"ID (String, required ): the value to place in the BAM read group's ID field SM (String, required ): the value to place in the BAM read group's SM field dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): [default-valued] type of experiment run (DNA, RNA, R2C2) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/ONTProcessBasecall/#optional","text":"fastq_dir (String?): GCS path to fastq directory final_summary (File?): GCS path to ' final_summary .txt*' file for basecalled fastq files sequencing_summary (File?): GCS path to ' sequencing_summary .txt*' file for basecalled fastq files AlignReads.library (String?) AlignReads.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) ListFastqs.runtime_attr_override (RuntimeAttr?) ListFilesOfType.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) NanoPlotFromRichFastqs.runtime_attr_override (RuntimeAttr?) NanoPlotFromSummary.runtime_attr_override (RuntimeAttr?) PartitionFastqManifest.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTProcessBasecall/#defaults","text":"num_shards (Int, default=300): [default-valued] number of shards into which fastq files should be batched AlignReads.prefix (String, default=\"out\") AlignReads.tags_to_preserve (Array[String], default=[])","title":"Defaults"},{"location":"workflows/ONTProcessBasecall/#outputs","text":"last_process_date (String) aligned_bam (File) aligned_bai (File) raw_reads_stats (Map[String,Float]) aligned_reads_stats (Map[String,Float])","title":"Outputs"},{"location":"workflows/ONTProcessBasecall/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ONTWholeGenome/","text":"ONTWholeGenome ONTWholeGenome description A workflow that performs single sample variant calling on Oxford Nanopore reads from one or more flow cells. The workflow merges multiple flowcells into a single BAM prior to variant calling. Inputs Required aligned_bais (Array[File], required ): GCS path to aligned BAM file indices aligned_bams (Array[File], required ): GCS path to aligned BAM files bams_suspected_to_contain_dup_record (Boolean, required ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. Optional bed_to_compute_coverage (File?) call_small_vars_on_mitochondria (Boolean?): if false, will not attempt to call variants on mitochondria; if true, some samples might fail (caller feature) due to lack of signal dvp_memory (Int?) dvp_threads (Int?) fast_less_sensitive_sv (Boolean?): to trade less sensitive SV calling for faster speed ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper run_dv_pepper_analysis (Boolean?): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeClairGTbi.keyfile (File?) FinalizeClairGTbi.name (String?) FinalizeClairGTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairGVcf.keyfile (File?) FinalizeClairGVcf.name (String?) FinalizeClairGVcf.runtime_attr_override (RuntimeAttr?) FinalizeClairTbi.keyfile (File?) FinalizeClairTbi.name (String?) FinalizeClairTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairVcf.keyfile (File?) FinalizeClairVcf.name (String?) FinalizeClairVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGTbi.keyfile (File?) FinalizeDVPepperGTbi.name (String?) FinalizeDVPepperGTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGVcf.keyfile (File?) FinalizeDVPepperGVcf.name (String?) FinalizeDVPepperGVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperPhasedTbi.keyfile (File?) FinalizeDVPepperPhasedTbi.name (String?) FinalizeDVPepperPhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperPhasedVcf.keyfile (File?) FinalizeDVPepperPhasedVcf.name (String?) FinalizeDVPepperPhasedVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperTbi.keyfile (File?) FinalizeDVPepperTbi.name (String?) FinalizeDVPepperTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperVcf.keyfile (File?) FinalizeDVPepperVcf.name (String?) FinalizeDVPepperVcf.runtime_attr_override (RuntimeAttr?) FinalizePBSV.keyfile (File?) FinalizePBSV.name (String?) FinalizePBSV.runtime_attr_override (RuntimeAttr?) FinalizePBSVtbi.keyfile (File?) FinalizePBSVtbi.name (String?) FinalizePBSVtbi.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeSniffles.keyfile (File?) FinalizeSniffles.name (String?) FinalizeSniffles.runtime_attr_override (RuntimeAttr?) FinalizeSnifflesTbi.keyfile (File?) FinalizeSnifflesTbi.name (String?) FinalizeSnifflesTbi.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveDuplicates.runtime_attr_override (RuntimeAttr?) CallVariants.Clair.chr (String?) CallVariants.Clair.runtime_attr_override (RuntimeAttr?) CallVariants.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClairVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClair_gVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeBams.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantGVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantPhasedVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantPhasedVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.Pepper.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) CallVariants.Sniffles2SV.runtime_attr_override (RuntimeAttr?) CallVariants.SubsetBam.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) CallVariants.size_balanced_scatter.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Call.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Discover.chr (String?) CallVariants.PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Call.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Discover.chr (String?) CallVariants.RunPBSV.Discover.runtime_attr_override (RuntimeAttr?) Defaults call_small_variants (Boolean, default=true): whether to call small variants call_svs (Boolean, default=true): whether to call SVs CallVariants.minsvlen (Int, default=50) RemoveDuplicates.same_name_as_input (Boolean, default=true) CallVariants.SmallVariantsScatter.prefix (String, default=\"subset\") CallVariants.SubsetBam.prefix (String, default=\"subset\") Outputs merged_bam (File) merged_bai (File) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) bed_cov_summary (File?) pbsv_vcf (File?) pbsv_tbi (File?) sniffles_vcf (File?) sniffles_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?) Dot Diagram","title":"ONTWholeGenome"},{"location":"workflows/ONTWholeGenome/#ontwholegenome","text":"","title":"ONTWholeGenome"},{"location":"workflows/ONTWholeGenome/#ontwholegenome_1","text":"description A workflow that performs single sample variant calling on Oxford Nanopore reads from one or more flow cells. The workflow merges multiple flowcells into a single BAM prior to variant calling.","title":"ONTWholeGenome"},{"location":"workflows/ONTWholeGenome/#inputs","text":"","title":"Inputs"},{"location":"workflows/ONTWholeGenome/#required","text":"aligned_bais (Array[File], required ): GCS path to aligned BAM file indices aligned_bams (Array[File], required ): GCS path to aligned BAM files bams_suspected_to_contain_dup_record (Boolean, required ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata.","title":"Required"},{"location":"workflows/ONTWholeGenome/#optional","text":"bed_to_compute_coverage (File?) call_small_vars_on_mitochondria (Boolean?): if false, will not attempt to call variants on mitochondria; if true, some samples might fail (caller feature) due to lack of signal dvp_memory (Int?) dvp_threads (Int?) fast_less_sensitive_sv (Boolean?): to trade less sensitive SV calling for faster speed ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper run_dv_pepper_analysis (Boolean?): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeClairGTbi.keyfile (File?) FinalizeClairGTbi.name (String?) FinalizeClairGTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairGVcf.keyfile (File?) FinalizeClairGVcf.name (String?) FinalizeClairGVcf.runtime_attr_override (RuntimeAttr?) FinalizeClairTbi.keyfile (File?) FinalizeClairTbi.name (String?) FinalizeClairTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairVcf.keyfile (File?) FinalizeClairVcf.name (String?) FinalizeClairVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGTbi.keyfile (File?) FinalizeDVPepperGTbi.name (String?) FinalizeDVPepperGTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGVcf.keyfile (File?) FinalizeDVPepperGVcf.name (String?) FinalizeDVPepperGVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperPhasedTbi.keyfile (File?) FinalizeDVPepperPhasedTbi.name (String?) FinalizeDVPepperPhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperPhasedVcf.keyfile (File?) FinalizeDVPepperPhasedVcf.name (String?) FinalizeDVPepperPhasedVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperTbi.keyfile (File?) FinalizeDVPepperTbi.name (String?) FinalizeDVPepperTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperVcf.keyfile (File?) FinalizeDVPepperVcf.name (String?) FinalizeDVPepperVcf.runtime_attr_override (RuntimeAttr?) FinalizePBSV.keyfile (File?) FinalizePBSV.name (String?) FinalizePBSV.runtime_attr_override (RuntimeAttr?) FinalizePBSVtbi.keyfile (File?) FinalizePBSVtbi.name (String?) FinalizePBSVtbi.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeSniffles.keyfile (File?) FinalizeSniffles.name (String?) FinalizeSniffles.runtime_attr_override (RuntimeAttr?) FinalizeSnifflesTbi.keyfile (File?) FinalizeSnifflesTbi.name (String?) FinalizeSnifflesTbi.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveDuplicates.runtime_attr_override (RuntimeAttr?) CallVariants.Clair.chr (String?) CallVariants.Clair.runtime_attr_override (RuntimeAttr?) CallVariants.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClairVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClair_gVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeBams.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantGVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantPhasedVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantPhasedVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.Pepper.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) CallVariants.Sniffles2SV.runtime_attr_override (RuntimeAttr?) CallVariants.SubsetBam.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) CallVariants.size_balanced_scatter.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Call.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Discover.chr (String?) CallVariants.PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Call.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Discover.chr (String?) CallVariants.RunPBSV.Discover.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ONTWholeGenome/#defaults","text":"call_small_variants (Boolean, default=true): whether to call small variants call_svs (Boolean, default=true): whether to call SVs CallVariants.minsvlen (Int, default=50) RemoveDuplicates.same_name_as_input (Boolean, default=true) CallVariants.SmallVariantsScatter.prefix (String, default=\"subset\") CallVariants.SubsetBam.prefix (String, default=\"subset\")","title":"Defaults"},{"location":"workflows/ONTWholeGenome/#outputs","text":"merged_bam (File) merged_bai (File) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) bed_cov_summary (File?) pbsv_vcf (File?) pbsv_tbi (File?) sniffles_vcf (File?) sniffles_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?)","title":"Outputs"},{"location":"workflows/ONTWholeGenome/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBAssembleWithHifiasm/","text":"PBAssembleWithHifiasm PBAssembleWithHifiasm description A workflow that performs single sample genome assembly on PacBio HiFi reads from one or more SMRT cells. The multiple SMRT cells data are merged prior to assembly. Inputs Required ccs_fqs (Array[File], required ): GCS path to CCS fastq files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files Optional ref_fasta_for_eval (File?): Reference Fasta used for evaluating CompressAndFinalizeMergedFQ.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmAlternateFA.name (String?) FinalizeHifiasmAlternateFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmAlternateGFA.name (String?) FinalizeHifiasmAlternateGFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmHapFAs.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmHapGFAs.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmPrimaryFA.name (String?) FinalizeHifiasmPrimaryFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmPrimaryGFA.name (String?) FinalizeHifiasmPrimaryGFA.runtime_attr_override (RuntimeAttr?) FinalizeMergedFQ.keyfile (File?) FinalizeMergedFQ.runtime_attr_override (RuntimeAttr?) FinalizeQuastIndividualSummary.keyfile (File?) FinalizeQuastIndividualSummary.name (String?) FinalizeQuastIndividualSummary.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReports.runtime_attr_override (RuntimeAttr?) FinalizeQuastSummaryAll.keyfile (File?) FinalizeQuastSummaryAll.name (String?) FinalizeQuastSummaryAll.runtime_attr_override (RuntimeAttr?) MergeAllFastqs.runtime_attr_override (RuntimeAttr?) primary_h0_h1_quast.runtime_attr_override (RuntimeAttr?) Hifiasm.AssembleForAltContigs.runtime_attr_override (RuntimeAttr?) Hifiasm.AssembleForHaplotigs.runtime_attr_override (RuntimeAttr?) Defaults Hifiasm.zones (String, default=\"us-central1-a us-central1-b us-central1-c\") MergeAllFastqs.prefix (String, default=\"merged\"): prefix for output files Outputs merged_fq (File) hifiasm_primary_gfa (File) hifiasm_primary_tigs (File) hifiasm_haploGFAs (File) hifiasm_haplotigs (File) hifiasm_alternate_gfa (File) hifiasm_alternate_tigs (File) quast_report_html (File?) quast_report_in_various_formats (File?) quast_summary_on_all (File?) quast_summary_on_primary (File?) quast_summary_on_H0 (File?) quast_summary_on_H1 (File?) Dot Diagram","title":"PBAssembleWithHifiasm"},{"location":"workflows/PBAssembleWithHifiasm/#pbassemblewithhifiasm","text":"","title":"PBAssembleWithHifiasm"},{"location":"workflows/PBAssembleWithHifiasm/#pbassemblewithhifiasm_1","text":"description A workflow that performs single sample genome assembly on PacBio HiFi reads from one or more SMRT cells. The multiple SMRT cells data are merged prior to assembly.","title":"PBAssembleWithHifiasm"},{"location":"workflows/PBAssembleWithHifiasm/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBAssembleWithHifiasm/#required","text":"ccs_fqs (Array[File], required ): GCS path to CCS fastq files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained prefix (String, required ): prefix for output files","title":"Required"},{"location":"workflows/PBAssembleWithHifiasm/#optional","text":"ref_fasta_for_eval (File?): Reference Fasta used for evaluating CompressAndFinalizeMergedFQ.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmAlternateFA.name (String?) FinalizeHifiasmAlternateFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmAlternateGFA.name (String?) FinalizeHifiasmAlternateGFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmHapFAs.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmHapGFAs.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmPrimaryFA.name (String?) FinalizeHifiasmPrimaryFA.runtime_attr_override (RuntimeAttr?) FinalizeHifiasmPrimaryGFA.name (String?) FinalizeHifiasmPrimaryGFA.runtime_attr_override (RuntimeAttr?) FinalizeMergedFQ.keyfile (File?) FinalizeMergedFQ.runtime_attr_override (RuntimeAttr?) FinalizeQuastIndividualSummary.keyfile (File?) FinalizeQuastIndividualSummary.name (String?) FinalizeQuastIndividualSummary.runtime_attr_override (RuntimeAttr?) FinalizeQuastReportHtml.keyfile (File?) FinalizeQuastReportHtml.name (String?) FinalizeQuastReportHtml.runtime_attr_override (RuntimeAttr?) FinalizeQuastReports.runtime_attr_override (RuntimeAttr?) FinalizeQuastSummaryAll.keyfile (File?) FinalizeQuastSummaryAll.name (String?) FinalizeQuastSummaryAll.runtime_attr_override (RuntimeAttr?) MergeAllFastqs.runtime_attr_override (RuntimeAttr?) primary_h0_h1_quast.runtime_attr_override (RuntimeAttr?) Hifiasm.AssembleForAltContigs.runtime_attr_override (RuntimeAttr?) Hifiasm.AssembleForHaplotigs.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBAssembleWithHifiasm/#defaults","text":"Hifiasm.zones (String, default=\"us-central1-a us-central1-b us-central1-c\") MergeAllFastqs.prefix (String, default=\"merged\"): prefix for output files","title":"Defaults"},{"location":"workflows/PBAssembleWithHifiasm/#outputs","text":"merged_fq (File) hifiasm_primary_gfa (File) hifiasm_primary_tigs (File) hifiasm_haploGFAs (File) hifiasm_haplotigs (File) hifiasm_alternate_gfa (File) hifiasm_alternate_tigs (File) quast_report_html (File?) quast_report_in_various_formats (File?) quast_summary_on_all (File?) quast_summary_on_primary (File?) quast_summary_on_H0 (File?) quast_summary_on_H1 (File?)","title":"Outputs"},{"location":"workflows/PBAssembleWithHifiasm/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBCCSIsoSeq/","text":"PBCCSIsoSeq PBCCSIsoSeq description A workflow that performs CCS correction and IsoSeq processing on PacBio HiFi reads from a single flow cell. The workflow shards the subreads into clusters and performs CCS in parallel on each cluster. Error-corrected reads are then processed with PacBio's IsoSeq software. A number of metrics and figures are produced along the way. Inputs Required barcode_file (File, required ): GCS path to the fasta file that specifies the expected set of multiplexing barcodes ccs_bams (Array[File], required ): GCS path to CCS BAM files ccs_pbis (Array[File], required ): GCS path to CCS BAM .pbi indices gcs_out_root_dir (String, required ): GCS bucket to store the corrected/uncorrected reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional AlignTranscripts.library (String?) BamToBed.runtime_attr_override (RuntimeAttr?) ClusterTranscripts.runtime_attr_override (RuntimeAttr?) CollapseTranscripts.runtime_attr_override (RuntimeAttr?) Demultiplex.runtime_attr_override (RuntimeAttr?) DetailedDemuxReportPNG.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedPbi.keyfile (File?) FinalizeAlignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBai.keyfile (File?) FinalizeAlignedTranscriptsBai.name (String?) FinalizeAlignedTranscriptsBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBam.keyfile (File?) FinalizeAlignedTranscriptsBam.name (String?) FinalizeAlignedTranscriptsBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBed.keyfile (File?) FinalizeAlignedTranscriptsBed.name (String?) FinalizeAlignedTranscriptsBed.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeCollapsedTranscripts.keyfile (File?) FinalizeCollapsedTranscripts.name (String?) FinalizeCollapsedTranscripts.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexCounts.keyfile (File?) FinalizeDemultiplexCounts.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexReport.keyfile (File?) FinalizeDemultiplexReport.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexSummary.keyfile (File?) FinalizeDemultiplexSummary.runtime_attr_override (RuntimeAttr?) FinalizeLimaDetailedPNG.keyfile (File?) FinalizeLimaDetailedPNG.runtime_attr_override (RuntimeAttr?) FinalizeLimaSummary.keyfile (File?) FinalizeLimaSummary.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MergeBarcodeBams.runtime_attr_override (RuntimeAttr?) RefineTranscriptReads.runtime_attr_override (RuntimeAttr?) SummarizedDemuxReportPNG.runtime_attr_override (RuntimeAttr?) Defaults drop_per_base_N_pulse_tags (Boolean, default=true) ClusterTranscripts.use_qvs (Boolean, default=true) CollapseTranscripts.use_qvs (Boolean, default=true) Demultiplex.isoseq (Boolean, default=false) Demultiplex.min_score (Int, default=0) Demultiplex.peek (Int, default=0) Demultiplex.peek_guess (Boolean, default=false) RefineTranscriptReads.require_polya (Boolean, default=true) Outputs ccs_bam (File) ccs_pbi (File) aligned_bam (File) aligned_bai (File) aligned_pbi (File) demux_counts (File) demux_reports (File) demux_summary (File) Dot Diagram","title":"PBCCSIsoSeq"},{"location":"workflows/PBCCSIsoSeq/#pbccsisoseq","text":"","title":"PBCCSIsoSeq"},{"location":"workflows/PBCCSIsoSeq/#pbccsisoseq_1","text":"description A workflow that performs CCS correction and IsoSeq processing on PacBio HiFi reads from a single flow cell. The workflow shards the subreads into clusters and performs CCS in parallel on each cluster. Error-corrected reads are then processed with PacBio's IsoSeq software. A number of metrics and figures are produced along the way.","title":"PBCCSIsoSeq"},{"location":"workflows/PBCCSIsoSeq/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBCCSIsoSeq/#required","text":"barcode_file (File, required ): GCS path to the fasta file that specifies the expected set of multiplexing barcodes ccs_bams (Array[File], required ): GCS path to CCS BAM files ccs_pbis (Array[File], required ): GCS path to CCS BAM .pbi indices gcs_out_root_dir (String, required ): GCS bucket to store the corrected/uncorrected reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/PBCCSIsoSeq/#optional","text":"AlignTranscripts.library (String?) BamToBed.runtime_attr_override (RuntimeAttr?) ClusterTranscripts.runtime_attr_override (RuntimeAttr?) CollapseTranscripts.runtime_attr_override (RuntimeAttr?) Demultiplex.runtime_attr_override (RuntimeAttr?) DetailedDemuxReportPNG.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.keyfile (File?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.keyfile (File?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedPbi.keyfile (File?) FinalizeAlignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBai.keyfile (File?) FinalizeAlignedTranscriptsBai.name (String?) FinalizeAlignedTranscriptsBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBam.keyfile (File?) FinalizeAlignedTranscriptsBam.name (String?) FinalizeAlignedTranscriptsBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedTranscriptsBed.keyfile (File?) FinalizeAlignedTranscriptsBed.name (String?) FinalizeAlignedTranscriptsBed.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeCollapsedTranscripts.keyfile (File?) FinalizeCollapsedTranscripts.name (String?) FinalizeCollapsedTranscripts.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexCounts.keyfile (File?) FinalizeDemultiplexCounts.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexReport.keyfile (File?) FinalizeDemultiplexReport.runtime_attr_override (RuntimeAttr?) FinalizeDemultiplexSummary.keyfile (File?) FinalizeDemultiplexSummary.runtime_attr_override (RuntimeAttr?) FinalizeLimaDetailedPNG.keyfile (File?) FinalizeLimaDetailedPNG.runtime_attr_override (RuntimeAttr?) FinalizeLimaSummary.keyfile (File?) FinalizeLimaSummary.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MergeBarcodeBams.runtime_attr_override (RuntimeAttr?) RefineTranscriptReads.runtime_attr_override (RuntimeAttr?) SummarizedDemuxReportPNG.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBCCSIsoSeq/#defaults","text":"drop_per_base_N_pulse_tags (Boolean, default=true) ClusterTranscripts.use_qvs (Boolean, default=true) CollapseTranscripts.use_qvs (Boolean, default=true) Demultiplex.isoseq (Boolean, default=false) Demultiplex.min_score (Int, default=0) Demultiplex.peek (Int, default=0) Demultiplex.peek_guess (Boolean, default=false) RefineTranscriptReads.require_polya (Boolean, default=true)","title":"Defaults"},{"location":"workflows/PBCCSIsoSeq/#outputs","text":"ccs_bam (File) ccs_pbi (File) aligned_bam (File) aligned_bai (File) aligned_pbi (File) demux_counts (File) demux_reports (File) demux_summary (File)","title":"Outputs"},{"location":"workflows/PBCCSIsoSeq/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBCCSWholeGenome/","text":"PBCCSWholeGenome PBCCSWholeGenome description A workflow that performs single sample variant calling on PacBio HiFi reads from one or more flow cells. The workflow merges multiple SMRT cells into a single BAM prior to variant calling. Inputs Required aligned_bais (Array[File], required ): GCS path to aligned BAM file indices aligned_bams (Array[File], required ): GCS path to aligned BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional bed_to_compute_coverage (File?) call_small_vars_on_mitochondria (Boolean?): if false, will not attempt to call variants on mitochondria; if true, some samples might fail (caller feature) due to lack of signal dvp_memory (Int?) dvp_threads (Int?) fast_less_sensitive_sv (Boolean?): to trade less sensitive SV calling for faster speed ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper run_dv_pepper_analysis (Boolean?): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeClairGTbi.keyfile (File?) FinalizeClairGTbi.name (String?) FinalizeClairGTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairGVcf.keyfile (File?) FinalizeClairGVcf.name (String?) FinalizeClairGVcf.runtime_attr_override (RuntimeAttr?) FinalizeClairTbi.keyfile (File?) FinalizeClairTbi.name (String?) FinalizeClairTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairVcf.keyfile (File?) FinalizeClairVcf.name (String?) FinalizeClairVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPEPPERPhasedTbi.keyfile (File?) FinalizeDVPEPPERPhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPEPPERPhasedVcf.keyfile (File?) FinalizeDVPEPPERPhasedVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGTbi.keyfile (File?) FinalizeDVPepperGTbi.name (String?) FinalizeDVPepperGTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGVcf.keyfile (File?) FinalizeDVPepperGVcf.name (String?) FinalizeDVPepperGVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperTbi.keyfile (File?) FinalizeDVPepperTbi.name (String?) FinalizeDVPepperTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperVcf.keyfile (File?) FinalizeDVPepperVcf.name (String?) FinalizeDVPepperVcf.runtime_attr_override (RuntimeAttr?) FinalizePBSV.keyfile (File?) FinalizePBSV.name (String?) FinalizePBSV.runtime_attr_override (RuntimeAttr?) FinalizePBSVtbi.keyfile (File?) FinalizePBSVtbi.name (String?) FinalizePBSVtbi.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeSniffles.keyfile (File?) FinalizeSniffles.name (String?) FinalizeSniffles.runtime_attr_override (RuntimeAttr?) FinalizeSnifflesTbi.keyfile (File?) FinalizeSnifflesTbi.name (String?) FinalizeSnifflesTbi.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) CallVariants.Clair.chr (String?) CallVariants.Clair.runtime_attr_override (RuntimeAttr?) CallVariants.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) CallVariants.MarginPhase.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClairVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClair_gVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeBams.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantGVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) CallVariants.Sniffles2SV.runtime_attr_override (RuntimeAttr?) CallVariants.SubsetBam.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) CallVariants.size_balanced_scatter.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?) CallVariants.CCSPepper.deep_variant.runtime_attr_override (RuntimeAttr?) CallVariants.CCSPepper.get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Call.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Discover.chr (String?) CallVariants.PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Call.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Discover.chr (String?) CallVariants.RunPBSV.Discover.runtime_attr_override (RuntimeAttr?) Defaults call_small_variants (Boolean, default=true): whether to call small variants call_svs (Boolean, default=true): whether to call SVs CallVariants.minsvlen (Int, default=50) CallVariants.SmallVariantsScatter.prefix (String, default=\"subset\") CallVariants.SubsetBam.prefix (String, default=\"subset\") Outputs aligned_bam (File) aligned_bai (File) aligned_pbi (File) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) bed_cov_summary (File?) pbsv_vcf (File?) pbsv_tbi (File?) sniffles_vcf (File?) sniffles_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?) Dot Diagram","title":"PBCCSWholeGenome"},{"location":"workflows/PBCCSWholeGenome/#pbccswholegenome","text":"","title":"PBCCSWholeGenome"},{"location":"workflows/PBCCSWholeGenome/#pbccswholegenome_1","text":"description A workflow that performs single sample variant calling on PacBio HiFi reads from one or more flow cells. The workflow merges multiple SMRT cells into a single BAM prior to variant calling.","title":"PBCCSWholeGenome"},{"location":"workflows/PBCCSWholeGenome/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBCCSWholeGenome/#required","text":"aligned_bais (Array[File], required ): GCS path to aligned BAM file indices aligned_bams (Array[File], required ): GCS path to aligned BAM files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/PBCCSWholeGenome/#optional","text":"bed_to_compute_coverage (File?) call_small_vars_on_mitochondria (Boolean?): if false, will not attempt to call variants on mitochondria; if true, some samples might fail (caller feature) due to lack of signal dvp_memory (Int?) dvp_threads (Int?) fast_less_sensitive_sv (Boolean?): to trade less sensitive SV calling for faster speed ref_scatter_interval_list_ids (File?): A file that gives short IDs to the interval_list files; needed only when running DV-Pepper ref_scatter_interval_list_locator (File?): A file holding paths to interval_list files; needed only when running DV-Pepper run_dv_pepper_analysis (Boolean?): to turn on DV-Pepper analysis or not (non-trivial increase in cost and runtime) sites_vcf (File?): for use with Clair sites_vcf_tbi (File?): for use with Clair FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeClairGTbi.keyfile (File?) FinalizeClairGTbi.name (String?) FinalizeClairGTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairGVcf.keyfile (File?) FinalizeClairGVcf.name (String?) FinalizeClairGVcf.runtime_attr_override (RuntimeAttr?) FinalizeClairTbi.keyfile (File?) FinalizeClairTbi.name (String?) FinalizeClairTbi.runtime_attr_override (RuntimeAttr?) FinalizeClairVcf.keyfile (File?) FinalizeClairVcf.name (String?) FinalizeClairVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPEPPERPhasedTbi.keyfile (File?) FinalizeDVPEPPERPhasedTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPEPPERPhasedVcf.keyfile (File?) FinalizeDVPEPPERPhasedVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGTbi.keyfile (File?) FinalizeDVPepperGTbi.name (String?) FinalizeDVPepperGTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperGVcf.keyfile (File?) FinalizeDVPepperGVcf.name (String?) FinalizeDVPepperGVcf.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperTbi.keyfile (File?) FinalizeDVPepperTbi.name (String?) FinalizeDVPepperTbi.runtime_attr_override (RuntimeAttr?) FinalizeDVPepperVcf.keyfile (File?) FinalizeDVPepperVcf.name (String?) FinalizeDVPepperVcf.runtime_attr_override (RuntimeAttr?) FinalizePBSV.keyfile (File?) FinalizePBSV.name (String?) FinalizePBSV.runtime_attr_override (RuntimeAttr?) FinalizePBSVtbi.keyfile (File?) FinalizePBSVtbi.name (String?) FinalizePBSVtbi.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeSniffles.keyfile (File?) FinalizeSniffles.name (String?) FinalizeSniffles.runtime_attr_override (RuntimeAttr?) FinalizeSnifflesTbi.keyfile (File?) FinalizeSnifflesTbi.name (String?) FinalizeSnifflesTbi.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) CallVariants.Clair.chr (String?) CallVariants.Clair.runtime_attr_override (RuntimeAttr?) CallVariants.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) CallVariants.MarginPhase.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClairVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClairVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeAndSortClair_gVCFs.header_definitions_file (File?) CallVariants.MergeAndSortClair_gVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeBams.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantGVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantGVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergeDeepVariantVCFs.header_definitions_file (File?) CallVariants.MergeDeepVariantVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.MergePBSVVCFs.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatter.runtime_attr_override (RuntimeAttr?) CallVariants.SmallVariantsScatterPrepp.runtime_attr_override (RuntimeAttr?) CallVariants.Sniffles2SV.runtime_attr_override (RuntimeAttr?) CallVariants.SubsetBam.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexPBSV.runtime_attr_override (RuntimeAttr?) CallVariants.ZipAndIndexSnifflesVCF.runtime_attr_override (RuntimeAttr?) CallVariants.size_balanced_scatter.runtime_attr_override (RuntimeAttr?) coverage.ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) coverage.MosDepthOverBed.runtime_attr_override (RuntimeAttr?) coverage.NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) coverage.cov_over_region.runtime_attr_override (RuntimeAttr?) CallVariants.CCSPepper.deep_variant.runtime_attr_override (RuntimeAttr?) CallVariants.CCSPepper.get_hap_tagged_bam.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Call.runtime_attr_override (RuntimeAttr?) CallVariants.PBSVslow.Discover.chr (String?) CallVariants.PBSVslow.Discover.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Call.runtime_attr_override (RuntimeAttr?) CallVariants.RunPBSV.Discover.chr (String?) CallVariants.RunPBSV.Discover.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBCCSWholeGenome/#defaults","text":"call_small_variants (Boolean, default=true): whether to call small variants call_svs (Boolean, default=true): whether to call SVs CallVariants.minsvlen (Int, default=50) CallVariants.SmallVariantsScatter.prefix (String, default=\"subset\") CallVariants.SubsetBam.prefix (String, default=\"subset\")","title":"Defaults"},{"location":"workflows/PBCCSWholeGenome/#outputs","text":"aligned_bam (File) aligned_bai (File) aligned_pbi (File) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) bed_cov_summary (File?) pbsv_vcf (File?) pbsv_tbi (File?) sniffles_vcf (File?) sniffles_tbi (File?) clair_vcf (File?) clair_tbi (File?) clair_gvcf (File?) clair_gtbi (File?) dvp_vcf (File?) dvp_tbi (File?) dvp_g_vcf (File?) dvp_g_tbi (File?) dvp_phased_vcf (File?) dvp_phased_tbi (File?)","title":"Outputs"},{"location":"workflows/PBCCSWholeGenome/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBFlowcell/","text":"PBFlowcell PBFlowcell description The workflow performs the alignment of an SMRT cell's worth of data to a reference. For genomic sequencing data, the workflow also optionally performs CCS correction if the data is from a CCS library but did not get corrected on-instrument. For MAS-seq transcriptome data, this workflow will determine the most likely MAS-seq model, then it will use that model to annotate, segment, and filter the CCS reads. These CCS reads will then be aligned to the reference in trascriptome alignemnt mode. Note: Currently the MAS-seq workflow separates CLR reads, but does not process them. Inputs Required LB (String, required ): the value to place in the BAM read group's LB (library) field SM (String, required ): the value to place in the BAM read group's SM field bam (File, required ): GCS path to raw subread bam dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): type of experiment run (CLR, CCS, ISOSEQ, MASSEQ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files pbi (File, required ): GCS path to pbi index for raw subread bam ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional ccs_report_txt (File?): GCS path to CCS report txt, required if on-instrument corrected, otherwise CCS is run in this workflow for CCS libraries mas_seq_model (String?): Longbow model to use for MAS-seq data. num_shards (Int?): number of shards into which fastq files should be batched AlignReads.runtime_attr_override (RuntimeAttr?) BamToFastq.runtime_attr_override (RuntimeAttr?) CCS.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) ExtractCcsReads.runtime_attr_override (RuntimeAttr?) ExtractClrReads.runtime_attr_override (RuntimeAttr?) ExtractHifiReads.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeCCSReport.name (String?) FinalizeCCSReport.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedBai.name (String?) FinalizeCCSUnalignedBai.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedBam.name (String?) FinalizeCCSUnalignedBam.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeFastq.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsPNGs.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsSVGs.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsSummary.name (String?) FinalizeFilteredCCSStatsSummary.runtime_attr_override (RuntimeAttr?) FinalizeLongbowAnnotatedBam.name (String?) FinalizeLongbowAnnotatedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowCorrectLog.runtime_attr_override (RuntimeAttr?) FinalizeLongbowCorrectedBam.name (String?) FinalizeLongbowCorrectedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowExtractedBam.name (String?) FinalizeLongbowExtractedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowFilterFailedBam.name (String?) FinalizeLongbowFilterFailedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowFilteredBam.name (String?) FinalizeLongbowFilteredBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowIntermediateBamIndices.runtime_attr_override (RuntimeAttr?) FinalizeLongbowIntermediateSingleCellBamIndices.runtime_attr_override (RuntimeAttr?) FinalizeLongbowSegmentedBam.name (String?) FinalizeLongbowSegmentedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowUmiAdjustmentLog.runtime_attr_override (RuntimeAttr?) FinalizeLongbowUncorrectedBam.name (String?) FinalizeLongbowUncorrectedBam.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqLongbowCorrectStats.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqUnprocessedCLRReads.name (String?) FinalizeMasSeqUnprocessedCLRReads.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqUnprocessedCLRReadsBai.name (String?) FinalizeMasSeqUnprocessedCLRReadsBai.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsPNGs.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsSVGs.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsSummary.name (String?) FinalizeOverallCCSStatsSummary.runtime_attr_override (RuntimeAttr?) FixMasSeqCcsReadTagsPostAlignment.runtime_attr_override (RuntimeAttr?) GetRawReadGroup.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) LongbowFilteredCCSStats.runtime_attr_override (RuntimeAttr?) LongbowOverallCCSStats.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.barcode_allow_list (File?) LongbowProcessCCS.barcode_tag (String?) LongbowProcessCCS.corrected_tag (String?) Longbow_Peek.runtime_attr_override (RuntimeAttr?) MasseqCCSBamToFastq.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) MergeAllFastqs.runtime_attr_override (RuntimeAttr?) MergeCCSReports.runtime_attr_override (RuntimeAttr?) MergeCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeLongbowAnnotatedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowCorrectedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowExtractedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowFilterFailedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowFilteredCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowSegmentedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowUncorrectableCCSBams.runtime_attr_override (RuntimeAttr?) MergeMASSeqCLRReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) RenameSingleCellBamTagsForMasIsoSeqV0.runtime_attr_override (RuntimeAttr?) ShardLongReads.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?) SummarizeCCSReport.runtime_attr_override (RuntimeAttr?) ValidateShard.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.AggregateCorrectLogStats.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.Extract.bam_pbi (File?) LongbowProcessCCS.Extract.leading_adapter (String?) LongbowProcessCCS.Extract.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.Extract.start_offset (Int?) LongbowProcessCCS.Extract.trailing_adapter (String?) LongbowProcessCCS.t_01_Peek.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_02_Annotate.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_03_Filter.bam_pbi (File?) LongbowProcessCCS.t_03_Filter.model (String?) LongbowProcessCCS.t_03_Filter.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_04_Segment.model (String?) LongbowProcessCCS.t_04_Segment.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_05_RemoveMasSeqTruncatedReads.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_07_PadUMI.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_08_PadCBC.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_09_Correct.barcode_freq_list (File?) LongbowProcessCCS.t_09_Correct.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) drop_per_base_N_pulse_tags (Boolean, default=true) validate_shards (Boolean, default=false) AlignMasSeqCCSReads.prefix (String, default=\"out\") AlignReads.prefix (String, default=\"out\") CCS.all (Boolean, default=true) CCS.by_strand (Boolean, default=false) CCS.kinetics (Boolean, default=false) ExtractHifiReads.prefix (String, default=\"hifi\") LongbowProcessCCS.same_barcode_per_read (Boolean, default=false) LongbowProcessCCS.shard_width (Int, default=25) MergeAllFastqs.prefix (String, default=\"merged\") ShardLongReads.num_threads (Int, default=8) ShardLongReads.prefix (String, default=\"shard\") SummarizeSubreadsPBI.qual_threshold (Int, default=0) WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") LongbowProcessCCS.Extract.base_padding (Int, default=2) LongbowProcessCCS.Extract.num_cpus (Int, default=2) LongbowProcessCCS.t_01_Peek.n (Int, default=100) LongbowProcessCCS.t_02_Annotate.num_cpus (Int, default=8) LongbowProcessCCS.t_03_Filter.num_cpus (Int, default=2) LongbowProcessCCS.t_04_Segment.num_cpus (Int, default=2) LongbowProcessCCS.t_07_PadUMI.padding (Int, default=2) LongbowProcessCCS.t_08_PadCBC.padding (Int, default=2) LongbowProcessCCS.t_09_Correct.ccs_lev_dist_threshold (Int, default=2) LongbowProcessCCS.t_09_Correct.clr_lev_dist_threshold (Int, default=2) LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.existing_umi_tag (String, default=\"ZU\") LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.new_umi_tag (String, default=\"JX\") Outputs ccs_report (File?) ccs_zmws_input (Float?) ccs_zmws_pass_filters (Float?) ccs_zmws_fail_filters (Float?) ccs_zmws_shortcut_filters (Float?) ccs_zmws_pass_filters_pct (Float?) ccs_zmws_fail_filters_pct (Float?) ccs_zmws_shortcut_filters_pct (Float?) polymerase_read_length_mean (Float) polymerase_read_length_N50 (Float) subread_read_length_mean (Float) subread_read_length_N50 (Float) fq (File?) ccs_bam (File?) ccs_pbi (File?) aligned_bam (File) aligned_bai (File) aligned_pbi (File) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q7 (Float) num_reads_Q10 (Float) num_reads_Q12 (Float) num_reads_Q15 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) library_type (String) longbow_overall_ccs_stats_plots_png (String?) longbow_overall_ccs_stats_plots_svg (String?) longbow_overall_ccs_stats (File?) longbow_filtered_ccs_stats_plots_png (String?) longbow_filtered_ccs_stats_plots_svg (String?) longbow_filtered_ccs_stats (File?) Dot Diagram","title":"PBFlowcell"},{"location":"workflows/PBFlowcell/#pbflowcell","text":"","title":"PBFlowcell"},{"location":"workflows/PBFlowcell/#pbflowcell_1","text":"description The workflow performs the alignment of an SMRT cell's worth of data to a reference. For genomic sequencing data, the workflow also optionally performs CCS correction if the data is from a CCS library but did not get corrected on-instrument. For MAS-seq transcriptome data, this workflow will determine the most likely MAS-seq model, then it will use that model to annotate, segment, and filter the CCS reads. These CCS reads will then be aligned to the reference in trascriptome alignemnt mode. Note: Currently the MAS-seq workflow separates CLR reads, but does not process them.","title":"PBFlowcell"},{"location":"workflows/PBFlowcell/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBFlowcell/#required","text":"LB (String, required ): the value to place in the BAM read group's LB (library) field SM (String, required ): the value to place in the BAM read group's SM field bam (File, required ): GCS path to raw subread bam dir_prefix (String, required ): directory prefix for output files experiment_type (String, required ): type of experiment run (CLR, CCS, ISOSEQ, MASSEQ) gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files pbi (File, required ): GCS path to pbi index for raw subread bam ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/PBFlowcell/#optional","text":"ccs_report_txt (File?): GCS path to CCS report txt, required if on-instrument corrected, otherwise CCS is run in this workflow for CCS libraries mas_seq_model (String?): Longbow model to use for MAS-seq data. num_shards (Int?): number of shards into which fastq files should be batched AlignReads.runtime_attr_override (RuntimeAttr?) BamToFastq.runtime_attr_override (RuntimeAttr?) CCS.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) ExtractCcsReads.runtime_attr_override (RuntimeAttr?) ExtractClrReads.runtime_attr_override (RuntimeAttr?) ExtractHifiReads.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBai.name (String?) FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) FinalizeAlignedBam.name (String?) FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) FinalizeAlignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeCCSReport.name (String?) FinalizeCCSReport.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedBai.name (String?) FinalizeCCSUnalignedBai.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedBam.name (String?) FinalizeCCSUnalignedBam.runtime_attr_override (RuntimeAttr?) FinalizeCCSUnalignedPbi.runtime_attr_override (RuntimeAttr?) FinalizeFastq.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsPNGs.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsSVGs.runtime_attr_override (RuntimeAttr?) FinalizeFilteredCCSStatsSummary.name (String?) FinalizeFilteredCCSStatsSummary.runtime_attr_override (RuntimeAttr?) FinalizeLongbowAnnotatedBam.name (String?) FinalizeLongbowAnnotatedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowCorrectLog.runtime_attr_override (RuntimeAttr?) FinalizeLongbowCorrectedBam.name (String?) FinalizeLongbowCorrectedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowExtractedBam.name (String?) FinalizeLongbowExtractedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowFilterFailedBam.name (String?) FinalizeLongbowFilterFailedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowFilteredBam.name (String?) FinalizeLongbowFilteredBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowIntermediateBamIndices.runtime_attr_override (RuntimeAttr?) FinalizeLongbowIntermediateSingleCellBamIndices.runtime_attr_override (RuntimeAttr?) FinalizeLongbowSegmentedBam.name (String?) FinalizeLongbowSegmentedBam.runtime_attr_override (RuntimeAttr?) FinalizeLongbowUmiAdjustmentLog.runtime_attr_override (RuntimeAttr?) FinalizeLongbowUncorrectedBam.name (String?) FinalizeLongbowUncorrectedBam.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqLongbowCorrectStats.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqUnprocessedCLRReads.name (String?) FinalizeMasSeqUnprocessedCLRReads.runtime_attr_override (RuntimeAttr?) FinalizeMasSeqUnprocessedCLRReadsBai.name (String?) FinalizeMasSeqUnprocessedCLRReadsBai.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsPNGs.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsSVGs.runtime_attr_override (RuntimeAttr?) FinalizeOverallCCSStatsSummary.name (String?) FinalizeOverallCCSStatsSummary.runtime_attr_override (RuntimeAttr?) FixMasSeqCcsReadTagsPostAlignment.runtime_attr_override (RuntimeAttr?) GetRawReadGroup.runtime_attr_override (RuntimeAttr?) GetRunInfo.runtime_attr_override (RuntimeAttr?) IndexAlignedReads.runtime_attr_override (RuntimeAttr?) IndexCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) LongbowFilteredCCSStats.runtime_attr_override (RuntimeAttr?) LongbowOverallCCSStats.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.barcode_allow_list (File?) LongbowProcessCCS.barcode_tag (String?) LongbowProcessCCS.corrected_tag (String?) Longbow_Peek.runtime_attr_override (RuntimeAttr?) MasseqCCSBamToFastq.runtime_attr_override (RuntimeAttr?) MergeAlignedReads.runtime_attr_override (RuntimeAttr?) MergeAllFastqs.runtime_attr_override (RuntimeAttr?) MergeCCSReports.runtime_attr_override (RuntimeAttr?) MergeCCSUnalignedReads.runtime_attr_override (RuntimeAttr?) MergeLongbowAnnotatedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowCorrectedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowExtractedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowFilterFailedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowFilteredCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowSegmentedCCSBams.runtime_attr_override (RuntimeAttr?) MergeLongbowUncorrectableCCSBams.runtime_attr_override (RuntimeAttr?) MergeMASSeqCLRReads.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) RenameSingleCellBamTagsForMasIsoSeqV0.runtime_attr_override (RuntimeAttr?) ShardLongReads.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ10PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ12PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ15PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ5PBI.runtime_attr_override (RuntimeAttr?) SummarizeAlignedQ7PBI.runtime_attr_override (RuntimeAttr?) SummarizeCCSReport.runtime_attr_override (RuntimeAttr?) ValidateShard.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.AggregateCorrectLogStats.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.Extract.bam_pbi (File?) LongbowProcessCCS.Extract.leading_adapter (String?) LongbowProcessCCS.Extract.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.Extract.start_offset (Int?) LongbowProcessCCS.Extract.trailing_adapter (String?) LongbowProcessCCS.t_01_Peek.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_02_Annotate.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_03_Filter.bam_pbi (File?) LongbowProcessCCS.t_03_Filter.model (String?) LongbowProcessCCS.t_03_Filter.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_04_Segment.model (String?) LongbowProcessCCS.t_04_Segment.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_05_RemoveMasSeqTruncatedReads.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_07_PadUMI.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_08_PadCBC.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_09_Correct.barcode_freq_list (File?) LongbowProcessCCS.t_09_Correct.runtime_attr_override (RuntimeAttr?) LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.FFYieldAligned.keyfile (File?) PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) PerFlowcellMetrics.MosDepth.window_size (Int?) PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBFlowcell/#defaults","text":"DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) drop_per_base_N_pulse_tags (Boolean, default=true) validate_shards (Boolean, default=false) AlignMasSeqCCSReads.prefix (String, default=\"out\") AlignReads.prefix (String, default=\"out\") CCS.all (Boolean, default=true) CCS.by_strand (Boolean, default=false) CCS.kinetics (Boolean, default=false) ExtractHifiReads.prefix (String, default=\"hifi\") LongbowProcessCCS.same_barcode_per_read (Boolean, default=false) LongbowProcessCCS.shard_width (Int, default=25) MergeAllFastqs.prefix (String, default=\"merged\") ShardLongReads.num_threads (Int, default=8) ShardLongReads.prefix (String, default=\"shard\") SummarizeSubreadsPBI.qual_threshold (Int, default=0) WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") LongbowProcessCCS.Extract.base_padding (Int, default=2) LongbowProcessCCS.Extract.num_cpus (Int, default=2) LongbowProcessCCS.t_01_Peek.n (Int, default=100) LongbowProcessCCS.t_02_Annotate.num_cpus (Int, default=8) LongbowProcessCCS.t_03_Filter.num_cpus (Int, default=2) LongbowProcessCCS.t_04_Segment.num_cpus (Int, default=2) LongbowProcessCCS.t_07_PadUMI.padding (Int, default=2) LongbowProcessCCS.t_08_PadCBC.padding (Int, default=2) LongbowProcessCCS.t_09_Correct.ccs_lev_dist_threshold (Int, default=2) LongbowProcessCCS.t_09_Correct.clr_lev_dist_threshold (Int, default=2) LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.existing_umi_tag (String, default=\"ZU\") LongbowProcessCCS.t_10_AdjustUmiSequenceWithAdapterAlignment.new_umi_tag (String, default=\"JX\")","title":"Defaults"},{"location":"workflows/PBFlowcell/#outputs","text":"ccs_report (File?) ccs_zmws_input (Float?) ccs_zmws_pass_filters (Float?) ccs_zmws_fail_filters (Float?) ccs_zmws_shortcut_filters (Float?) ccs_zmws_pass_filters_pct (Float?) ccs_zmws_fail_filters_pct (Float?) ccs_zmws_shortcut_filters_pct (Float?) polymerase_read_length_mean (Float) polymerase_read_length_N50 (Float) subread_read_length_mean (Float) subread_read_length_N50 (Float) fq (File?) ccs_bam (File?) ccs_pbi (File?) aligned_bam (File) aligned_bai (File) aligned_pbi (File) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length_mean (Float) read_length_median (Float) read_length_stdev (Float) read_length_N50 (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q7 (Float) num_reads_Q10 (Float) num_reads_Q12 (Float) num_reads_Q15 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) library_type (String) longbow_overall_ccs_stats_plots_png (String?) longbow_overall_ccs_stats_plots_svg (String?) longbow_overall_ccs_stats (File?) longbow_filtered_ccs_stats_plots_png (String?) longbow_filtered_ccs_stats_plots_svg (String?) longbow_filtered_ccs_stats (File?)","title":"Outputs"},{"location":"workflows/PBFlowcell/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBMASIsoSeqDemultiplex/","text":"PBMASIsoSeqDemultiplex PBMASIsoSeqDemultiplex description Demultiplex a BAM file based on the UMI tag Inputs Required bam (File, required ): GCS path to BAM file gcs_out_root_dir (String, required ): GCS bucket to store the demultiplexed BAMs participant_name (String, required ): name of the participant from whom these samples were obtained Optional Demultiplex.runtime_attr_override (RuntimeAttr?) FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) Index.runtime_attr_override (RuntimeAttr?) PBIndex.runtime_attr_override (RuntimeAttr?) Defaults tag (String, default=\"CB\"): BAM tag on which to demultiplex Outputs demuxed_bams (Array[File]) demuxed_bais (Array[File]) demuxed_pbis (Array[File]) Dot Diagram","title":"PBMASIsoSeqDemultiplex"},{"location":"workflows/PBMASIsoSeqDemultiplex/#pbmasisoseqdemultiplex","text":"","title":"PBMASIsoSeqDemultiplex"},{"location":"workflows/PBMASIsoSeqDemultiplex/#pbmasisoseqdemultiplex_1","text":"description Demultiplex a BAM file based on the UMI tag","title":"PBMASIsoSeqDemultiplex"},{"location":"workflows/PBMASIsoSeqDemultiplex/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBMASIsoSeqDemultiplex/#required","text":"bam (File, required ): GCS path to BAM file gcs_out_root_dir (String, required ): GCS bucket to store the demultiplexed BAMs participant_name (String, required ): name of the participant from whom these samples were obtained","title":"Required"},{"location":"workflows/PBMASIsoSeqDemultiplex/#optional","text":"Demultiplex.runtime_attr_override (RuntimeAttr?) FinalizeBai.keyfile (File?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.keyfile (File?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizePbi.keyfile (File?) FinalizePbi.runtime_attr_override (RuntimeAttr?) Index.runtime_attr_override (RuntimeAttr?) PBIndex.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBMASIsoSeqDemultiplex/#defaults","text":"tag (String, default=\"CB\"): BAM tag on which to demultiplex","title":"Defaults"},{"location":"workflows/PBMASIsoSeqDemultiplex/#outputs","text":"demuxed_bams (Array[File]) demuxed_bais (Array[File]) demuxed_pbis (Array[File])","title":"Outputs"},{"location":"workflows/PBMASIsoSeqDemultiplex/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBMASIsoSeqQuantify/","text":"PBMASIsoSeqQuantify PBMASIsoSeqQuantify description A workflow that performs processing of MAS-ISO-seq data on a single sample from one or more flow cells. The workflow merges multiple samples into a single BAM prior to processing. Quantifies RNA isoform expression from given extracted, aligned, UMI- and CBC-annotated MAS-ISO-seq reads. Inputs Required aligned_ccs_bais (Array[File], required ): GCS path to aligned MAS-ISO-seq CCS BAM file indices aligned_ccs_bams (Array[File], required ): GCS path to aligned MAS-ISO-seq CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the corrected/uncorrected reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_gtf (File, required ): GTF file to use for quantification ref_map_file (File, required ): table indicating reference sequence and auxillary file locations Optional interval_overlap_name (String?): [optional] The name of the annotation to add to the final anndata object for the column containing the overlap flag for transcripts that overlap intervals in the given intervals_of_interest file. intervals_of_interest (File?): [optional] An interval list file containing intervals to mark in the final anndata object as overlapping the transcripts. t_02_MergeAllReads.runtime_attr_override (RuntimeAttr?) t_03_AlignmentFilterArrayElements.runtime_attr_override (RuntimeAttr?) t_03_RestoreSingleCellBamTagsForMasIsoSeqV0.runtime_attr_override (RuntimeAttr?) t_04_IndexFilteredReads.runtime_attr_override (RuntimeAttr?) t_05_Stringtie2_Quantify.runtime_attr_override (RuntimeAttr?) t_06_Stringtie2_ExtractTranscriptSequences.runtime_attr_override (RuntimeAttr?) t_07_Stringtie2_CompareTranscriptomes.runtime_attr_override (RuntimeAttr?) t_08_GffCompareStringtie2toGencode.runtime_attr_override (RuntimeAttr?) t_09_GffCompareGencodetoStringtie2.runtime_attr_override (RuntimeAttr?) t_10_RestoreOriginalReadNames.runtime_attr_override (RuntimeAttr?) t_11_MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) t_12_SubsetBam.runtime_attr_override (RuntimeAttr?) t_13_ConvertSplicedBamToGff.runtime_attr_override (RuntimeAttr?) t_14_GffCompareStringtie2toMasSeqReads.runtime_attr_override (RuntimeAttr?) t_15_GffCompareGencodetoMasSeqReads.runtime_attr_override (RuntimeAttr?) t_16_QuantifyGffComparison.runtime_attr_override (RuntimeAttr?) t_17_CombineEqClassFiles.runtime_attr_override (RuntimeAttr?) t_18_CopyEqClassInfoToTag.runtime_attr_override (RuntimeAttr?) t_19_CorrectUmisWithSetCover.runtime_attr_override (RuntimeAttr?) t_20_CreateCCSCountMatrixFromAnnotatedBam.runtime_attr_override (RuntimeAttr?) t_22_FinalizeBam.runtime_attr_override (RuntimeAttr?) t_23_FinalizeBai.runtime_attr_override (RuntimeAttr?) t_24_FinalizeEqClassesGeneDefs.name (String?) t_24_FinalizeEqClassesGeneDefs.runtime_attr_override (RuntimeAttr?) t_25_FinalizeEqClassesGeneAssignments.name (String?) t_25_FinalizeEqClassesGeneAssignments.runtime_attr_override (RuntimeAttr?) t_26_FinalizeEqClassesTranscriptDefs.name (String?) t_26_FinalizeEqClassesTranscriptDefs.runtime_attr_override (RuntimeAttr?) t_27_FinalizeEqClassesTranscriptAssignments.name (String?) t_27_FinalizeEqClassesTranscriptAssignments.runtime_attr_override (RuntimeAttr?) t_28_FinalizeCCSCountMatrix.name (String?) t_28_FinalizeCCSCountMatrix.runtime_attr_override (RuntimeAttr?) t_29_FinalizeCCSCountMatrixAnnData.name (String?) t_29_FinalizeCCSCountMatrixAnnData.runtime_attr_override (RuntimeAttr?) t_30_FinalizeCCSRawQuantPickles.runtime_attr_override (RuntimeAttr?) t_31_FinalizeRefAndSt2Comparisons.runtime_attr_override (RuntimeAttr?) t_32_FinalizeTxAndGeneAssignmentsByContig.runtime_attr_override (RuntimeAttr?) t_33_FinalizeIntermediateAnnotatedArrayElements.runtime_attr_override (RuntimeAttr?) t_34_FinalizeAnnotatedArrayElements.runtime_attr_override (RuntimeAttr?) t_35_FinalizeDiscoveredTranscriptome.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) t_01_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_03_AlignmentFilterArrayElements.maxEndClipping (Int, default=1000) t_03_AlignmentFilterArrayElements.maxReadLength (Int, default=15000) t_12_SubsetBam.prefix (String, default=\"subset\") t_18_CopyEqClassInfoToTag.eq_class_tag (String, default=\"eq\") t_18_CopyEqClassInfoToTag.gene_tag (String, default=\"XG\") t_19_CorrectUmisWithSetCover.is_extracted (Boolean, default=true) t_21_CreateCCSCountMatrixAnndataFromEqClasses.force_anndata_gencode_overwrite (Boolean, default=false) Outputs merged_input_bam (File) merged_input_bai (File) gene_eq_class_defs (File) gene_eq_class_assignments (File) transcript_eq_class_defs (File) transcript_eq_class_assignments (File) raw_count_matrix (File) count_matrix_anndata (File) raw_quant_pickle_gcs_dir (String) ref_stringtie2_comparison_gcs_dir (String) tx_gene_assignments_gcs_dir (Array[String]) intermediate_read_gcs_dir (String) annotated_array_element_gcs_dir (String) discovered_transcriptome_gcs_dir (String) Dot Diagram","title":"PBMASIsoSeqQuantify"},{"location":"workflows/PBMASIsoSeqQuantify/#pbmasisoseqquantify","text":"","title":"PBMASIsoSeqQuantify"},{"location":"workflows/PBMASIsoSeqQuantify/#pbmasisoseqquantify_1","text":"description A workflow that performs processing of MAS-ISO-seq data on a single sample from one or more flow cells. The workflow merges multiple samples into a single BAM prior to processing. Quantifies RNA isoform expression from given extracted, aligned, UMI- and CBC-annotated MAS-ISO-seq reads.","title":"PBMASIsoSeqQuantify"},{"location":"workflows/PBMASIsoSeqQuantify/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBMASIsoSeqQuantify/#required","text":"aligned_ccs_bais (Array[File], required ): GCS path to aligned MAS-ISO-seq CCS BAM file indices aligned_ccs_bams (Array[File], required ): GCS path to aligned MAS-ISO-seq CCS BAM files gcs_out_root_dir (String, required ): GCS bucket to store the corrected/uncorrected reads, variants, and metrics files participant_name (String, required ): name of the participant from whom these samples were obtained ref_gtf (File, required ): GTF file to use for quantification ref_map_file (File, required ): table indicating reference sequence and auxillary file locations","title":"Required"},{"location":"workflows/PBMASIsoSeqQuantify/#optional","text":"interval_overlap_name (String?): [optional] The name of the annotation to add to the final anndata object for the column containing the overlap flag for transcripts that overlap intervals in the given intervals_of_interest file. intervals_of_interest (File?): [optional] An interval list file containing intervals to mark in the final anndata object as overlapping the transcripts. t_02_MergeAllReads.runtime_attr_override (RuntimeAttr?) t_03_AlignmentFilterArrayElements.runtime_attr_override (RuntimeAttr?) t_03_RestoreSingleCellBamTagsForMasIsoSeqV0.runtime_attr_override (RuntimeAttr?) t_04_IndexFilteredReads.runtime_attr_override (RuntimeAttr?) t_05_Stringtie2_Quantify.runtime_attr_override (RuntimeAttr?) t_06_Stringtie2_ExtractTranscriptSequences.runtime_attr_override (RuntimeAttr?) t_07_Stringtie2_CompareTranscriptomes.runtime_attr_override (RuntimeAttr?) t_08_GffCompareStringtie2toGencode.runtime_attr_override (RuntimeAttr?) t_09_GffCompareGencodetoStringtie2.runtime_attr_override (RuntimeAttr?) t_10_RestoreOriginalReadNames.runtime_attr_override (RuntimeAttr?) t_11_MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) t_12_SubsetBam.runtime_attr_override (RuntimeAttr?) t_13_ConvertSplicedBamToGff.runtime_attr_override (RuntimeAttr?) t_14_GffCompareStringtie2toMasSeqReads.runtime_attr_override (RuntimeAttr?) t_15_GffCompareGencodetoMasSeqReads.runtime_attr_override (RuntimeAttr?) t_16_QuantifyGffComparison.runtime_attr_override (RuntimeAttr?) t_17_CombineEqClassFiles.runtime_attr_override (RuntimeAttr?) t_18_CopyEqClassInfoToTag.runtime_attr_override (RuntimeAttr?) t_19_CorrectUmisWithSetCover.runtime_attr_override (RuntimeAttr?) t_20_CreateCCSCountMatrixFromAnnotatedBam.runtime_attr_override (RuntimeAttr?) t_22_FinalizeBam.runtime_attr_override (RuntimeAttr?) t_23_FinalizeBai.runtime_attr_override (RuntimeAttr?) t_24_FinalizeEqClassesGeneDefs.name (String?) t_24_FinalizeEqClassesGeneDefs.runtime_attr_override (RuntimeAttr?) t_25_FinalizeEqClassesGeneAssignments.name (String?) t_25_FinalizeEqClassesGeneAssignments.runtime_attr_override (RuntimeAttr?) t_26_FinalizeEqClassesTranscriptDefs.name (String?) t_26_FinalizeEqClassesTranscriptDefs.runtime_attr_override (RuntimeAttr?) t_27_FinalizeEqClassesTranscriptAssignments.name (String?) t_27_FinalizeEqClassesTranscriptAssignments.runtime_attr_override (RuntimeAttr?) t_28_FinalizeCCSCountMatrix.name (String?) t_28_FinalizeCCSCountMatrix.runtime_attr_override (RuntimeAttr?) t_29_FinalizeCCSCountMatrixAnnData.name (String?) t_29_FinalizeCCSCountMatrixAnnData.runtime_attr_override (RuntimeAttr?) t_30_FinalizeCCSRawQuantPickles.runtime_attr_override (RuntimeAttr?) t_31_FinalizeRefAndSt2Comparisons.runtime_attr_override (RuntimeAttr?) t_32_FinalizeTxAndGeneAssignmentsByContig.runtime_attr_override (RuntimeAttr?) t_33_FinalizeIntermediateAnnotatedArrayElements.runtime_attr_override (RuntimeAttr?) t_34_FinalizeAnnotatedArrayElements.runtime_attr_override (RuntimeAttr?) t_35_FinalizeDiscoveredTranscriptome.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBMASIsoSeqQuantify/#defaults","text":"DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) t_01_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_03_AlignmentFilterArrayElements.maxEndClipping (Int, default=1000) t_03_AlignmentFilterArrayElements.maxReadLength (Int, default=15000) t_12_SubsetBam.prefix (String, default=\"subset\") t_18_CopyEqClassInfoToTag.eq_class_tag (String, default=\"eq\") t_18_CopyEqClassInfoToTag.gene_tag (String, default=\"XG\") t_19_CorrectUmisWithSetCover.is_extracted (Boolean, default=true) t_21_CreateCCSCountMatrixAnndataFromEqClasses.force_anndata_gencode_overwrite (Boolean, default=false)","title":"Defaults"},{"location":"workflows/PBMASIsoSeqQuantify/#outputs","text":"merged_input_bam (File) merged_input_bai (File) gene_eq_class_defs (File) gene_eq_class_assignments (File) transcript_eq_class_defs (File) transcript_eq_class_assignments (File) raw_count_matrix (File) count_matrix_anndata (File) raw_quant_pickle_gcs_dir (String) ref_stringtie2_comparison_gcs_dir (String) tx_gene_assignments_gcs_dir (Array[String]) intermediate_read_gcs_dir (String) annotated_array_element_gcs_dir (String) discovered_transcriptome_gcs_dir (String)","title":"Outputs"},{"location":"workflows/PBMASIsoSeqQuantify/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PBSV/","text":"PBSV RunPBSV description Run PBSV to call SVs from a BAM file. Inputs Required bai (File, required ): index accompanying the BAM bam (File, required ): input BAM from which to call SVs is_ccs (Boolean, required ): if input BAM is CCS reads prefix (String, required ): prefix for output ref_fasta (File, required ): reference to which the BAM was aligned to ref_fasta_fai (File, required ): index accompanying the reference zones (String, required ): zones to run in Optional tandem_repeat_bed (File?): BED file containing TRF finder results (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Call.runtime_attr_override (RuntimeAttr?) Discover.chr (String?) Discover.runtime_attr_override (RuntimeAttr?) Outputs vcf (File) Dot Diagram","title":"PBSV"},{"location":"workflows/PBSV/#pbsv","text":"","title":"PBSV"},{"location":"workflows/PBSV/#runpbsv","text":"description Run PBSV to call SVs from a BAM file.","title":"RunPBSV"},{"location":"workflows/PBSV/#inputs","text":"","title":"Inputs"},{"location":"workflows/PBSV/#required","text":"bai (File, required ): index accompanying the BAM bam (File, required ): input BAM from which to call SVs is_ccs (Boolean, required ): if input BAM is CCS reads prefix (String, required ): prefix for output ref_fasta (File, required ): reference to which the BAM was aligned to ref_fasta_fai (File, required ): index accompanying the reference zones (String, required ): zones to run in","title":"Required"},{"location":"workflows/PBSV/#optional","text":"tandem_repeat_bed (File?): BED file containing TRF finder results (e.g. http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.trf.bed.gz) Call.runtime_attr_override (RuntimeAttr?) Discover.chr (String?) Discover.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PBSV/#outputs","text":"vcf (File)","title":"Outputs"},{"location":"workflows/PBSV/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/","text":"PanelProcessMalariaBarcodesForRh PanelProcessMalariaBarcodesForRh author Jonn Smith description A workflow that processes P. falciparum SNP panels (read: barcodes) and calculates several metrics that are relevant to studying the epidemiology of the disease. This WDL calls a script written by Wes Wong and based on the following paper: https://doi.org/10.1093/pnasnexus/pgac187 Inputs Required A1 (Array[String], required ): Nucleotide at the A1 barcode position. A10 (Array[String], required ): Nucleotide at the A10 barcode position. A11 (Array[String], required ): Nucleotide at the A11 barcode position. A12 (Array[String], required ): Nucleotide at the A12 barcode position. A2 (Array[String], required ): Nucleotide at the A2 barcode position. A3 (Array[String], required ): Nucleotide at the A3 barcode position. A4 (Array[String], required ): Nucleotide at the A4 barcode position. A5 (Array[String], required ): Nucleotide at the A5 barcode position. A6 (Array[String], required ): Nucleotide at the A6 barcode position. A7 (Array[String], required ): Nucleotide at the A7 barcode position. A8 (Array[String], required ): Nucleotide at the A8 barcode position. A9 (Array[String], required ): Nucleotide at the A9 barcode position. Adjusted_Het (Array[String], required ) B1 (Array[String], required ): Nucleotide at the B1 barcode position. B10 (Array[String], required ): Nucleotide at the B10 barcode position. B11 (Array[String], required ): Nucleotide at the B11 barcode position. B12 (Array[String], required ): Nucleotide at the B12 barcode position. B2 (Array[String], required ): Nucleotide at the B2 barcode position. B3 (Array[String], required ): Nucleotide at the B3 barcode position. B4 (Array[String], required ): Nucleotide at the B4 barcode position. B5 (Array[String], required ): Nucleotide at the B5 barcode position. B6 (Array[String], required ): Nucleotide at the B6 barcode position. B7 (Array[String], required ): Nucleotide at the B7 barcode position. B8 (Array[String], required ): Nucleotide at the B8 barcode position. B9 (Array[String], required ): Nucleotide at the B9 barcode position. Barcode_String (Array[String], required ): Nucleotide sequence of all barcode SNPs in genomic order. Delta_CT_Threshold (Array[String], required ) ISO3 (Array[String], required ) M_P (Array[String], required ): Mono- / Poly-clonal indicator. N (Array[String], required ) Number_Text (Array[String], required ) Raw_Name (Array[String], required ) Sample_Name (Array[String], required ) X (Array[String], required ) Year (Array[String], required ): Year this dataset was collected. barcode_def_tsv (File, required ): TSV file containing the definition of the SNP barcode sites with the columns: Name, Contig, Position cc (Array[String], required ) dir_prefix (String, required ): directory prefix for output files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files location_code (String, required ): Location code of the sample. Should correspond to the ISO3 value. mccoil_median (Array[String], required ) Optional t_002_ProcessBarcodeSpreadsheet.runtime_attr_override (RuntimeAttr?) t_003_FinalizeOutputs.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") Outputs summary_figure_svg (File) summary_figure_png (File) summary_stats (File) mono_barcode_stats (File) poly_barcode_stats (File) input_tsv (File) Dot Diagram","title":"PanelProcessMalariaBarcodesForRh"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#panelprocessmalariabarcodesforrh","text":"","title":"PanelProcessMalariaBarcodesForRh"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#_1","text":"","title":""},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#_2","text":"","title":""},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#_3","text":"","title":""},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#panelprocessmalariabarcodesforrh_1","text":"author Jonn Smith description A workflow that processes P. falciparum SNP panels (read: barcodes) and calculates several metrics that are relevant to studying the epidemiology of the disease. This WDL calls a script written by Wes Wong and based on the following paper: https://doi.org/10.1093/pnasnexus/pgac187","title":"PanelProcessMalariaBarcodesForRh"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#inputs","text":"","title":"Inputs"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#required","text":"A1 (Array[String], required ): Nucleotide at the A1 barcode position. A10 (Array[String], required ): Nucleotide at the A10 barcode position. A11 (Array[String], required ): Nucleotide at the A11 barcode position. A12 (Array[String], required ): Nucleotide at the A12 barcode position. A2 (Array[String], required ): Nucleotide at the A2 barcode position. A3 (Array[String], required ): Nucleotide at the A3 barcode position. A4 (Array[String], required ): Nucleotide at the A4 barcode position. A5 (Array[String], required ): Nucleotide at the A5 barcode position. A6 (Array[String], required ): Nucleotide at the A6 barcode position. A7 (Array[String], required ): Nucleotide at the A7 barcode position. A8 (Array[String], required ): Nucleotide at the A8 barcode position. A9 (Array[String], required ): Nucleotide at the A9 barcode position. Adjusted_Het (Array[String], required ) B1 (Array[String], required ): Nucleotide at the B1 barcode position. B10 (Array[String], required ): Nucleotide at the B10 barcode position. B11 (Array[String], required ): Nucleotide at the B11 barcode position. B12 (Array[String], required ): Nucleotide at the B12 barcode position. B2 (Array[String], required ): Nucleotide at the B2 barcode position. B3 (Array[String], required ): Nucleotide at the B3 barcode position. B4 (Array[String], required ): Nucleotide at the B4 barcode position. B5 (Array[String], required ): Nucleotide at the B5 barcode position. B6 (Array[String], required ): Nucleotide at the B6 barcode position. B7 (Array[String], required ): Nucleotide at the B7 barcode position. B8 (Array[String], required ): Nucleotide at the B8 barcode position. B9 (Array[String], required ): Nucleotide at the B9 barcode position. Barcode_String (Array[String], required ): Nucleotide sequence of all barcode SNPs in genomic order. Delta_CT_Threshold (Array[String], required ) ISO3 (Array[String], required ) M_P (Array[String], required ): Mono- / Poly-clonal indicator. N (Array[String], required ) Number_Text (Array[String], required ) Raw_Name (Array[String], required ) Sample_Name (Array[String], required ) X (Array[String], required ) Year (Array[String], required ): Year this dataset was collected. barcode_def_tsv (File, required ): TSV file containing the definition of the SNP barcode sites with the columns: Name, Contig, Position cc (Array[String], required ) dir_prefix (String, required ): directory prefix for output files gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files location_code (String, required ): Location code of the sample. Should correspond to the ISO3 value. mccoil_median (Array[String], required )","title":"Required"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#optional","text":"t_002_ProcessBarcodeSpreadsheet.runtime_attr_override (RuntimeAttr?) t_003_FinalizeOutputs.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#defaults","text":"DEBUG_MODE (Boolean, default=false) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\")","title":"Defaults"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#outputs","text":"summary_figure_svg (File) summary_figure_png (File) summary_stats (File) mono_barcode_stats (File) poly_barcode_stats (File) input_tsv (File)","title":"Outputs"},{"location":"workflows/PanelProcessMalariaBarcodesForRh/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Pf_Niare_HaplotypeCaller/","text":"Pf_Niare_HaplotypeCaller CallVariantsWithHaplotypeCaller author Jonn Smith description A workflow for calling small variants with GATK HaplotypeCaller from an Illumina BAM file using the methods laid out by Niare et al. (https://doi.org/10.1186/s12936-023-04632-0). Inputs Required bai (File, required ): Input bam index for bam . bam (File, required ): Input bam file containing reads from which to call variants. genotype_gvcfs_intervals (File, required ) prefix (String, required ): Prefix to use for output files. ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_id (String, required ): ID of the sample being called. Optional CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CollapseGVCFtoVCF.dbsnp_vcf (String?) CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) IndexBamout.runtime_attr_override (RuntimeAttr?) MergeGVCFs.runtime_attr_override (RuntimeAttr?) MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) Defaults call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. mito_contig (String, default=\"chrM\"): Name of the mitochondrial contig. CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) MergeGVCFs.is_gvcf (Boolean, default=false) Outputs output_gvcf (File) output_gvcf_index (File) output_vcf (File) output_vcf_index (File) bamout (File) bamout_index (File) Dot Diagram","title":"Pf_Niare_HaplotypeCaller"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#pf_niare_haplotypecaller","text":"","title":"Pf_Niare_HaplotypeCaller"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#callvariantswithhaplotypecaller","text":"author Jonn Smith description A workflow for calling small variants with GATK HaplotypeCaller from an Illumina BAM file using the methods laid out by Niare et al. (https://doi.org/10.1186/s12936-023-04632-0).","title":"CallVariantsWithHaplotypeCaller"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#inputs","text":"","title":"Inputs"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#required","text":"bai (File, required ): Input bam index for bam . bam (File, required ): Input bam file containing reads from which to call variants. genotype_gvcfs_intervals (File, required ) prefix (String, required ): Prefix to use for output files. ref_dict (File, required ) ref_fasta (File, required ) ref_fasta_fai (File, required ) sample_id (String, required ): ID of the sample being called.","title":"Required"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#optional","text":"CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CollapseGVCFtoVCF.dbsnp_vcf (String?) CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) IndexBamout.runtime_attr_override (RuntimeAttr?) MergeGVCFs.runtime_attr_override (RuntimeAttr?) MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#defaults","text":"call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. mito_contig (String, default=\"chrM\"): Name of the mitochondrial contig. CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) MergeGVCFs.is_gvcf (Boolean, default=false)","title":"Defaults"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#outputs","text":"output_gvcf (File) output_gvcf_index (File) output_vcf (File) output_vcf_index (File) bamout (File) bamout_index (File)","title":"Outputs"},{"location":"workflows/Pf_Niare_HaplotypeCaller/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PfalciparumDrugResistanceSummary/","text":"PfalciparumDrugResistanceSummary PfalciparumDrugResistanceSummary desciption Create a drug resistance report based on the given raw drug resistance loci report. Inputs Required participant_name (String, required ): Participant (or sample) name for the given bam file. raw_drug_resistance_info (File, required ) Optional gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. CreateDrugResistanceSummary.runtime_attr_override (RuntimeAttr?) FinalizeDrugResistanceSummary.keyfile (File?) FinalizeDrugResistanceSummary.name (String?) FinalizeDrugResistanceSummary.runtime_attr_override (RuntimeAttr?) Outputs drug_resistance_summary (File) predicted_chloroquine_status (String) predicted_pyrimethamine_status (String) predicted_sulfadoxine_status (String) predicted_mefloquine_status (String) predicted_artemisinin_status (String) predicted_piperaquine_status (String) Dot Diagram","title":"PfalciparumDrugResistanceSummary"},{"location":"workflows/PfalciparumDrugResistanceSummary/#pfalciparumdrugresistancesummary","text":"","title":"PfalciparumDrugResistanceSummary"},{"location":"workflows/PfalciparumDrugResistanceSummary/#pfalciparumdrugresistancesummary_1","text":"desciption Create a drug resistance report based on the given raw drug resistance loci report.","title":"PfalciparumDrugResistanceSummary"},{"location":"workflows/PfalciparumDrugResistanceSummary/#inputs","text":"","title":"Inputs"},{"location":"workflows/PfalciparumDrugResistanceSummary/#required","text":"participant_name (String, required ): Participant (or sample) name for the given bam file. raw_drug_resistance_info (File, required )","title":"Required"},{"location":"workflows/PfalciparumDrugResistanceSummary/#optional","text":"gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. CreateDrugResistanceSummary.runtime_attr_override (RuntimeAttr?) FinalizeDrugResistanceSummary.keyfile (File?) FinalizeDrugResistanceSummary.name (String?) FinalizeDrugResistanceSummary.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PfalciparumDrugResistanceSummary/#outputs","text":"drug_resistance_summary (File) predicted_chloroquine_status (String) predicted_pyrimethamine_status (String) predicted_sulfadoxine_status (String) predicted_mefloquine_status (String) predicted_artemisinin_status (String) predicted_piperaquine_status (String)","title":"Outputs"},{"location":"workflows/PfalciparumDrugResistanceSummary/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PfalciparumHrp2Hrp3Status/","text":"PfalciparumHrp2Hrp3Status PfalciparumHrp2Hrp3Status description Determine if HRP2 and HRP3 are deleted in a sample Inputs Required bai (File, required ): BAM index file bam (File, required ): BAM file Optional HRP2Status.runtime_attr_override (RuntimeAttr?) HRP3Status.runtime_attr_override (RuntimeAttr?) Outputs hrp2 (String) hrp3 (String) Dot Diagram","title":"PfalciparumHrp2Hrp3Status"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#pfalciparumhrp2hrp3status","text":"","title":"PfalciparumHrp2Hrp3Status"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#pfalciparumhrp2hrp3status_1","text":"description Determine if HRP2 and HRP3 are deleted in a sample","title":"PfalciparumHrp2Hrp3Status"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#inputs","text":"","title":"Inputs"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#required","text":"bai (File, required ): BAM index file bam (File, required ): BAM file","title":"Required"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#optional","text":"HRP2Status.runtime_attr_override (RuntimeAttr?) HRP3Status.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#outputs","text":"hrp2 (String) hrp3 (String)","title":"Outputs"},{"location":"workflows/PfalciparumHrp2Hrp3Status/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/","text":"PfalciparumPolygenomicityBarcodeEstimate PfalciparumPolygenomicityBarcodeEstimate author Jonn Smith description This workflow estimates whether a given sample is polygenomic or monogenomic based on a given fingerprint / barcode. Fingerprint is assumed to be 24 SNP barcode from Daniels et al. If no fingerprint / barcode is given, the fingerprint will be extracted from the given VCF. Inputs Required sample_name (String, required ): Name of the sample to be processed. Optional barcode_string (String?): Barcode to use for genomicity estimation. Assumed to be 24 SNP barcode from Daniels et al. fingerprint_haploytpe_db_file (File?): Haplotype DB file from which to fingerprint the input data. ref_map_file (String?): Reference map file indicating reference sequence and auxillary file locations. vcf (File?): VCF file from which to extract the barcode. vcf_index (File?): Index for the VCF file. t_001_FingerprintAndBarcodeVcf.runtime_attr_override (RuntimeAttr?) t_002_EstimateGenomicityFromBarcode.runtime_attr_override (RuntimeAttr?) Defaults t_002_EstimateGenomicityFromBarcode.hets_for_poly (Int, default=2) Outputs genomicity (String) fingerprint_vcf (File?) barcode (String?) Dot Diagram","title":"PfalciparumPolygenomicityBarcodeEstimate"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#pfalciparumpolygenomicitybarcodeestimate","text":"","title":"PfalciparumPolygenomicityBarcodeEstimate"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#pfalciparumpolygenomicitybarcodeestimate_1","text":"author Jonn Smith description This workflow estimates whether a given sample is polygenomic or monogenomic based on a given fingerprint / barcode. Fingerprint is assumed to be 24 SNP barcode from Daniels et al. If no fingerprint / barcode is given, the fingerprint will be extracted from the given VCF.","title":"PfalciparumPolygenomicityBarcodeEstimate"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#inputs","text":"","title":"Inputs"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#required","text":"sample_name (String, required ): Name of the sample to be processed.","title":"Required"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#optional","text":"barcode_string (String?): Barcode to use for genomicity estimation. Assumed to be 24 SNP barcode from Daniels et al. fingerprint_haploytpe_db_file (File?): Haplotype DB file from which to fingerprint the input data. ref_map_file (String?): Reference map file indicating reference sequence and auxillary file locations. vcf (File?): VCF file from which to extract the barcode. vcf_index (File?): Index for the VCF file. t_001_FingerprintAndBarcodeVcf.runtime_attr_override (RuntimeAttr?) t_002_EstimateGenomicityFromBarcode.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#defaults","text":"t_002_EstimateGenomicityFromBarcode.hets_for_poly (Int, default=2)","title":"Defaults"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#outputs","text":"genomicity (String) fingerprint_vcf (File?) barcode (String?)","title":"Outputs"},{"location":"workflows/PfalciparumPolygenomicityBarcodeEstimate/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/","text":"PfalciparumTypeDrugResistanceMarkers PfalciparumTypeDrugResistanceMarkers description Workflow to generate a report of drug resistance markers Inputs Required drug_resistance_list (File, required ): List of drug resistance markers for which to search gvcf (File, required ): GVCF file to process to use for coverage analysis of drug resistance markers gvcf_index (File, required ): Index of the GVCF file to process ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. snpeff_db (File, required ): SnpEff database for functional annotation snpeff_db_identifier (String, required ): Identifier for the SnpEff database to use vcf (File, required ): VCF file to process vcf_index (File, required ): Index of the VCF file to process Optional CallDrugResistanceMutations.runtime_attr_override (RuntimeAttr?) CreateDrugResistanceSummary.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotateVariants.runtime_attr_override (RuntimeAttr?) Defaults do_functional_annotation (Boolean, default=true): Whether to perform functional annotation Outputs drug_resistance_summary (File) drug_resistance_markers (File) predicted_drug_status_chloroquine (String) predicted_drug_status_pyrimethamine (String) predicted_drug_status_sulfadoxine (String) predicted_drug_status_mefloquine (String) predicted_drug_status_artemisinin (String) predicted_drug_status_piperaquine (String) annotated_vcf (File) annotated_vcf_index (File) snpEff_summary (File?) snpEff_genes (File?) pfFd_Asp_193_Tyr (String) pfaat1_Gln_454_Glu (String) pfaat1_Lys_541_Asn (String) pfaat1_Phe_313_Ser (String) pfaat1_Ser_258_Leu (String) pfap2_mu_Ile_592_Thr (String) pfarps10_Val_127_Met (String) pfatg18_Thr_38_Ile (String) pfcarl_Ile_1139_Lys (String) pfcarl_Leu_830_Val (String) pfcarl_Ser_1076_Asn (String) pfcarl_Ser_1076_Ile (String) pfcarl_Val_1103_Leu (String) pfcoronin_Arg_100_Lys (String) pfcoronin_Glu_107_Val (String) pfcoronin_Gly_50_Glu (String) pfcoronin_Pro_76_Ser (String) pfcrt_Asn_75_Glu (String) pfcrt_Cys_101_Phe (String) pfcrt_Cys_72_Ser (String) pfcrt_Gly_353_Val (String) pfcrt_His_97_Tyr (String) pfcrt_Lys_76_Thr (String) pfcrt_Met_343_Leu (String) pfcrt_Met_74_Ile (String) pfcrt_Phe_145_Ile (String) pfcrt_Ser_350_Arg (String) pfdhfr_Asn_51_Ile (String) pfdhfr_Cys_50_Arg (String) pfdhfr_Cys_59_Arg (String) pfdhfr_Ile_164_Lys (String) pfdhfr_Ser_108_Asn (String) pfdhps_Ala_581_Gly (String) pfdhps_Ala_613_Ser (String) pfdhps_Ala_613_Thr (String) pfdhps_Lys_437_Gly (String) pfdhps_Lys_540_Glu (String) pfdhps_Ser_436_Ala (String) pfexo_Glu_415_Gly (String) pfkelch13_Ala_675_Val (String) pfkelch13_Arg_539_Thr (String) pfkelch13_Arg_561_His (String) pfkelch13_Arg_633_Ile (String) pfkelch13_Asn_458_Tyr (String) pfkelch13_Cys_580_Tyr (String) pfkelch13_Ile_543_Thr (String) pfkelch13_Met_476_Ile (String) pfkelch13_Met_579_Ile (String) pfkelch13_Phe_446_Ile (String) pfkelch13_Phe_553_Leu (String) pfkelch13_Phe_574_Leu (String) pfkelch13_Phe_673_Ile (String) pfkelch13_Pro_441_Ile (String) pfkelch13_Pro_553_Leu (String) pfkelch13_Pro_574_Leu (String) pfkelch13_Tyr_493_His (String) pfkelch13_Val_568_Gly (String) pfmdr1_Asn_1024_Asp (String) pfmdr1_Asn_86_Tyr (String) pfmdr1_Asp_1246_Tyr (String) pfmdr1_Ser_1034_Cys (String) pfmdr1_Tyr_184_Phe (String) pfmdr2_Thr_484_Ile (String) pfubp1_Val_3275_Phe (String) Dot Diagram","title":"PfalciparumTypeDrugResistanceMarkers"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#pfalciparumtypedrugresistancemarkers","text":"","title":"PfalciparumTypeDrugResistanceMarkers"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#pfalciparumtypedrugresistancemarkers_1","text":"description Workflow to generate a report of drug resistance markers","title":"PfalciparumTypeDrugResistanceMarkers"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#inputs","text":"","title":"Inputs"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#required","text":"drug_resistance_list (File, required ): List of drug resistance markers for which to search gvcf (File, required ): GVCF file to process to use for coverage analysis of drug resistance markers gvcf_index (File, required ): Index of the GVCF file to process ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. snpeff_db (File, required ): SnpEff database for functional annotation snpeff_db_identifier (String, required ): Identifier for the SnpEff database to use vcf (File, required ): VCF file to process vcf_index (File, required ): Index of the VCF file to process","title":"Required"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#optional","text":"CallDrugResistanceMutations.runtime_attr_override (RuntimeAttr?) CreateDrugResistanceSummary.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotateVariants.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#defaults","text":"do_functional_annotation (Boolean, default=true): Whether to perform functional annotation","title":"Defaults"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#outputs","text":"drug_resistance_summary (File) drug_resistance_markers (File) predicted_drug_status_chloroquine (String) predicted_drug_status_pyrimethamine (String) predicted_drug_status_sulfadoxine (String) predicted_drug_status_mefloquine (String) predicted_drug_status_artemisinin (String) predicted_drug_status_piperaquine (String) annotated_vcf (File) annotated_vcf_index (File) snpEff_summary (File?) snpEff_genes (File?) pfFd_Asp_193_Tyr (String) pfaat1_Gln_454_Glu (String) pfaat1_Lys_541_Asn (String) pfaat1_Phe_313_Ser (String) pfaat1_Ser_258_Leu (String) pfap2_mu_Ile_592_Thr (String) pfarps10_Val_127_Met (String) pfatg18_Thr_38_Ile (String) pfcarl_Ile_1139_Lys (String) pfcarl_Leu_830_Val (String) pfcarl_Ser_1076_Asn (String) pfcarl_Ser_1076_Ile (String) pfcarl_Val_1103_Leu (String) pfcoronin_Arg_100_Lys (String) pfcoronin_Glu_107_Val (String) pfcoronin_Gly_50_Glu (String) pfcoronin_Pro_76_Ser (String) pfcrt_Asn_75_Glu (String) pfcrt_Cys_101_Phe (String) pfcrt_Cys_72_Ser (String) pfcrt_Gly_353_Val (String) pfcrt_His_97_Tyr (String) pfcrt_Lys_76_Thr (String) pfcrt_Met_343_Leu (String) pfcrt_Met_74_Ile (String) pfcrt_Phe_145_Ile (String) pfcrt_Ser_350_Arg (String) pfdhfr_Asn_51_Ile (String) pfdhfr_Cys_50_Arg (String) pfdhfr_Cys_59_Arg (String) pfdhfr_Ile_164_Lys (String) pfdhfr_Ser_108_Asn (String) pfdhps_Ala_581_Gly (String) pfdhps_Ala_613_Ser (String) pfdhps_Ala_613_Thr (String) pfdhps_Lys_437_Gly (String) pfdhps_Lys_540_Glu (String) pfdhps_Ser_436_Ala (String) pfexo_Glu_415_Gly (String) pfkelch13_Ala_675_Val (String) pfkelch13_Arg_539_Thr (String) pfkelch13_Arg_561_His (String) pfkelch13_Arg_633_Ile (String) pfkelch13_Asn_458_Tyr (String) pfkelch13_Cys_580_Tyr (String) pfkelch13_Ile_543_Thr (String) pfkelch13_Met_476_Ile (String) pfkelch13_Met_579_Ile (String) pfkelch13_Phe_446_Ile (String) pfkelch13_Phe_553_Leu (String) pfkelch13_Phe_574_Leu (String) pfkelch13_Phe_673_Ile (String) pfkelch13_Pro_441_Ile (String) pfkelch13_Pro_553_Leu (String) pfkelch13_Pro_574_Leu (String) pfkelch13_Tyr_493_His (String) pfkelch13_Val_568_Gly (String) pfmdr1_Asn_1024_Asp (String) pfmdr1_Asn_86_Tyr (String) pfmdr1_Asp_1246_Tyr (String) pfmdr1_Ser_1034_Cys (String) pfmdr1_Tyr_184_Phe (String) pfmdr2_Thr_484_Ile (String) pfubp1_Val_3275_Phe (String)","title":"Outputs"},{"location":"workflows/PfalciparumTypeDrugResistanceMarkers/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/ProcessMalariaBarcodesDemo/","text":"ProcessMalariaBarcodesDemo ProcessMalariaBarcodesDemo author Jonn Smith description A workflow that processes P. falciparum SNP panels (read: barcodes) and calculates several metrics that are relevant to studying the epidemiology of the disease. This WDL calls a script written by Wes Wong and based on the following paper: https://doi.org/10.1093/pnasnexus/pgac187 Inputs Required A1 (Array[String], required ): Nucleotide at the A1 barcode position. A10 (Array[String], required ): Nucleotide at the A10 barcode position. A11 (Array[String], required ): Nucleotide at the A11 barcode position. A12 (Array[String], required ): Nucleotide at the A12 barcode position. A2 (Array[String], required ): Nucleotide at the A2 barcode position. A3 (Array[String], required ): Nucleotide at the A3 barcode position. A4 (Array[String], required ): Nucleotide at the A4 barcode position. A5 (Array[String], required ): Nucleotide at the A5 barcode position. A6 (Array[String], required ): Nucleotide at the A6 barcode position. A7 (Array[String], required ): Nucleotide at the A7 barcode position. A8 (Array[String], required ): Nucleotide at the A8 barcode position. A9 (Array[String], required ): Nucleotide at the A9 barcode position. Adjusted_Het (Array[String], required ) B1 (Array[String], required ): Nucleotide at the B1 barcode position. B10 (Array[String], required ): Nucleotide at the B10 barcode position. B11 (Array[String], required ): Nucleotide at the B11 barcode position. B12 (Array[String], required ): Nucleotide at the B12 barcode position. B2 (Array[String], required ): Nucleotide at the B2 barcode position. B3 (Array[String], required ): Nucleotide at the B3 barcode position. B4 (Array[String], required ): Nucleotide at the B4 barcode position. B5 (Array[String], required ): Nucleotide at the B5 barcode position. B6 (Array[String], required ): Nucleotide at the B6 barcode position. B7 (Array[String], required ): Nucleotide at the B7 barcode position. B8 (Array[String], required ): Nucleotide at the B8 barcode position. B9 (Array[String], required ): Nucleotide at the B9 barcode position. Barcode_String (Array[String], required ): Nucleotide sequence of all barcode SNPs in genomic order. Delta_CT_Threshold (Array[String], required ) ISO3 (Array[String], required ): ISO3 formatted location code. M_P (Array[String], required ): Mono- / Poly-clonal indicator. N (Array[String], required ) Number_Text (Array[String], required ) Raw_Name (Array[String], required ) Sample_Name (Array[String], required ) X (Array[String], required ) Year (Array[String], required ): Year this dataset was collected. barcode_def_tsv (File, required ): TSV file containing the definition of the SNP barcode sites with the columns: Name, Contig, Position cc (Array[String], required ): Country Code location_code (String, required ): Location code of the sample. Should correspond to the ISO3 value. mccoil_median (Array[String], required ) Optional t_002_ProcessBarcodeSpreadsheet.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") Outputs summary_figure_svg (File) summary_figure_png (File) summary_stats (File) mono_barcode_stats (File) poly_barcode_stats (File) input_tsv (File) Dot Diagram","title":"ProcessMalariaBarcodesDemo"},{"location":"workflows/ProcessMalariaBarcodesDemo/#processmalariabarcodesdemo","text":"","title":"ProcessMalariaBarcodesDemo"},{"location":"workflows/ProcessMalariaBarcodesDemo/#_1","text":"","title":""},{"location":"workflows/ProcessMalariaBarcodesDemo/#_2","text":"","title":""},{"location":"workflows/ProcessMalariaBarcodesDemo/#_3","text":"","title":""},{"location":"workflows/ProcessMalariaBarcodesDemo/#processmalariabarcodesdemo_1","text":"author Jonn Smith description A workflow that processes P. falciparum SNP panels (read: barcodes) and calculates several metrics that are relevant to studying the epidemiology of the disease. This WDL calls a script written by Wes Wong and based on the following paper: https://doi.org/10.1093/pnasnexus/pgac187","title":"ProcessMalariaBarcodesDemo"},{"location":"workflows/ProcessMalariaBarcodesDemo/#inputs","text":"","title":"Inputs"},{"location":"workflows/ProcessMalariaBarcodesDemo/#required","text":"A1 (Array[String], required ): Nucleotide at the A1 barcode position. A10 (Array[String], required ): Nucleotide at the A10 barcode position. A11 (Array[String], required ): Nucleotide at the A11 barcode position. A12 (Array[String], required ): Nucleotide at the A12 barcode position. A2 (Array[String], required ): Nucleotide at the A2 barcode position. A3 (Array[String], required ): Nucleotide at the A3 barcode position. A4 (Array[String], required ): Nucleotide at the A4 barcode position. A5 (Array[String], required ): Nucleotide at the A5 barcode position. A6 (Array[String], required ): Nucleotide at the A6 barcode position. A7 (Array[String], required ): Nucleotide at the A7 barcode position. A8 (Array[String], required ): Nucleotide at the A8 barcode position. A9 (Array[String], required ): Nucleotide at the A9 barcode position. Adjusted_Het (Array[String], required ) B1 (Array[String], required ): Nucleotide at the B1 barcode position. B10 (Array[String], required ): Nucleotide at the B10 barcode position. B11 (Array[String], required ): Nucleotide at the B11 barcode position. B12 (Array[String], required ): Nucleotide at the B12 barcode position. B2 (Array[String], required ): Nucleotide at the B2 barcode position. B3 (Array[String], required ): Nucleotide at the B3 barcode position. B4 (Array[String], required ): Nucleotide at the B4 barcode position. B5 (Array[String], required ): Nucleotide at the B5 barcode position. B6 (Array[String], required ): Nucleotide at the B6 barcode position. B7 (Array[String], required ): Nucleotide at the B7 barcode position. B8 (Array[String], required ): Nucleotide at the B8 barcode position. B9 (Array[String], required ): Nucleotide at the B9 barcode position. Barcode_String (Array[String], required ): Nucleotide sequence of all barcode SNPs in genomic order. Delta_CT_Threshold (Array[String], required ) ISO3 (Array[String], required ): ISO3 formatted location code. M_P (Array[String], required ): Mono- / Poly-clonal indicator. N (Array[String], required ) Number_Text (Array[String], required ) Raw_Name (Array[String], required ) Sample_Name (Array[String], required ) X (Array[String], required ) Year (Array[String], required ): Year this dataset was collected. barcode_def_tsv (File, required ): TSV file containing the definition of the SNP barcode sites with the columns: Name, Contig, Position cc (Array[String], required ): Country Code location_code (String, required ): Location code of the sample. Should correspond to the ISO3 value. mccoil_median (Array[String], required )","title":"Required"},{"location":"workflows/ProcessMalariaBarcodesDemo/#optional","text":"t_002_ProcessBarcodeSpreadsheet.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/ProcessMalariaBarcodesDemo/#defaults","text":"DEBUG_MODE (Boolean, default=false) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\")","title":"Defaults"},{"location":"workflows/ProcessMalariaBarcodesDemo/#outputs","text":"summary_figure_svg (File) summary_figure_png (File) summary_stats (File) mono_barcode_stats (File) poly_barcode_stats (File) input_tsv (File)","title":"Outputs"},{"location":"workflows/ProcessMalariaBarcodesDemo/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/QCAssessmentDepthBased/","text":"QCAssessmentDepthBased QCAssessmentDepthBased description Assess quality metrics from mosdepth coverage and callable loci data to determine pass/fail status. To pass, the fraction of callable bases must be greater than min_callable_fraction and at least min_coverage_threshold_regions fraction of the genome must have a coverage depth greater than min_coverage. Inputs Required bai (File, required ): Index file for given bam file bam (File, required ): Bam file to assess coverage_bed_file (File, required ): Bed file for regions to assess prefix (String, required ): Prefix for output files ref_map_file (File, required ): Reference map file for the primary reference sequence and auxillary file locations. Optional t_001_CallableLoci.runtime_attr_override (RuntimeAttr?) t_001_MosDepthOverBed.runtime_attr_override (RuntimeAttr?) t_002_AssessQualityMetrics.runtime_attr_override (RuntimeAttr?) t_003_FastQC.runtime_attr_override (RuntimeAttr?) Defaults min_callable_fraction (Float, default=0.5): Minimum required fraction of genome that is callable (default: 0.50) min_coverage (Float, default=5): Minimum required mean coverage depth (default: 5) min_coverage_threshold_regions (Float, default=0.2): Minimum required fraction of genome that must have a coverage depth greater than min_coverage (default: 0.2) t_001_CallableLoci.min_base_quality (Int, default=20) t_001_CallableLoci.min_mapping_quality (Int, default=10) t_003_FastQC.num_cpus (Int, default=4) Outputs qc_status (String) qc_message (String) mosdepth_global_dist (File) mosdepth_region_dist (File) mosdepth_regions (File) mosdepth_regions_csi (File) callable_loci_summary (File) callable_loci_bed (File) fastqc_stats (File) fastqc_report (File) Dot Diagram","title":"QCAssessmentDepthBased"},{"location":"workflows/QCAssessmentDepthBased/#qcassessmentdepthbased","text":"","title":"QCAssessmentDepthBased"},{"location":"workflows/QCAssessmentDepthBased/#qcassessmentdepthbased_1","text":"description Assess quality metrics from mosdepth coverage and callable loci data to determine pass/fail status. To pass, the fraction of callable bases must be greater than min_callable_fraction and at least min_coverage_threshold_regions fraction of the genome must have a coverage depth greater than min_coverage.","title":"QCAssessmentDepthBased"},{"location":"workflows/QCAssessmentDepthBased/#inputs","text":"","title":"Inputs"},{"location":"workflows/QCAssessmentDepthBased/#required","text":"bai (File, required ): Index file for given bam file bam (File, required ): Bam file to assess coverage_bed_file (File, required ): Bed file for regions to assess prefix (String, required ): Prefix for output files ref_map_file (File, required ): Reference map file for the primary reference sequence and auxillary file locations.","title":"Required"},{"location":"workflows/QCAssessmentDepthBased/#optional","text":"t_001_CallableLoci.runtime_attr_override (RuntimeAttr?) t_001_MosDepthOverBed.runtime_attr_override (RuntimeAttr?) t_002_AssessQualityMetrics.runtime_attr_override (RuntimeAttr?) t_003_FastQC.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/QCAssessmentDepthBased/#defaults","text":"min_callable_fraction (Float, default=0.5): Minimum required fraction of genome that is callable (default: 0.50) min_coverage (Float, default=5): Minimum required mean coverage depth (default: 5) min_coverage_threshold_regions (Float, default=0.2): Minimum required fraction of genome that must have a coverage depth greater than min_coverage (default: 0.2) t_001_CallableLoci.min_base_quality (Int, default=20) t_001_CallableLoci.min_mapping_quality (Int, default=10) t_003_FastQC.num_cpus (Int, default=4)","title":"Defaults"},{"location":"workflows/QCAssessmentDepthBased/#outputs","text":"qc_status (String) qc_message (String) mosdepth_global_dist (File) mosdepth_region_dist (File) mosdepth_regions (File) mosdepth_regions_csi (File) callable_loci_summary (File) callable_loci_bed (File) fastqc_stats (File) fastqc_report (File)","title":"Outputs"},{"location":"workflows/QCAssessmentDepthBased/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/RemoveSingleOrganismContamination/","text":"RemoveSingleOrganismContamination RemoveSingleOrganismContamination author Jonn Smith description A workflow to remove contamination originating from a single organism from a dataset. Inputs Required LB (String, required ): the value to place in the BAM read group's LB (library) field SM (String, required ): the value to place in the BAM read group's SM field contaminant_ref_map_file (File, required ): Table indicating reference sequence and auxillary file locations. contaminant_ref_name (String, required ): Name of the contaminant genome to be used in output files. dir_prefix (String, required ): directory prefix for output files Optional fq_end1 (File?): GCS path to end1 of paired-end fastq fq_end2 (File?): GCS path to end2 of paired-end fastq gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. input_bai (File?): GCS path to bai index for unmapped bam input_bam (File?): GCS path to unmapped bam t_004_RevertSam.runtime_attr_override (RuntimeAttr?) t_005_Bam2Fastq.bam_index (File?) t_005_Bam2Fastq.reference_dict (File?) t_005_Bam2Fastq.reference_fasta (File?) t_005_Bam2Fastq.reference_fasta_index (File?) t_005_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_006_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_007_AlignReads.runtime_attr_override (RuntimeAttr?) t_008_ExtractDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_009_ExtractContaminatedReads.runtime_attr_override (RuntimeAttr?) t_010_SortDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_011_SortContaminatedReads.runtime_attr_override (RuntimeAttr?) t_012_CreateFastqFromDecontaminatedReads.bam_index (File?) t_012_CreateFastqFromDecontaminatedReads.reference_dict (File?) t_012_CreateFastqFromDecontaminatedReads.reference_fasta (File?) t_012_CreateFastqFromDecontaminatedReads.reference_fasta_index (File?) t_012_CreateFastqFromDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_013_FinalizeContaminatedBam.name (String?) t_013_FinalizeContaminatedBam.runtime_attr_override (RuntimeAttr?) t_014_FinalizeContaminatedBamIndex.name (String?) t_014_FinalizeContaminatedBamIndex.runtime_attr_override (RuntimeAttr?) t_015_FinalizeDecontaminatedFq1.name (String?) t_015_FinalizeDecontaminatedFq1.runtime_attr_override (RuntimeAttr?) t_016_FinalizeDecontaminatedFq2.name (String?) t_016_FinalizeDecontaminatedFq2.runtime_attr_override (RuntimeAttr?) t_017_FinalizeDecontaminatedUnpaired.name (String?) t_017_FinalizeDecontaminatedUnpaired.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) platform (String, default=\"illumina\"): [default valued] the value to place in the BAM read group's PL (platform) field (default: illumina) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_007_AlignReads.skip_sort (Boolean, default=false) t_009_ExtractContaminatedReads.extra_args (String, default=\"\") Outputs contaminated_bam (File) contaminated_bam_index (File) decontaminated_fq1 (File) decontaminated_fq2 (File) decontaminated_unpaired (File) Dot Diagram","title":"RemoveSingleOrganismContamination"},{"location":"workflows/RemoveSingleOrganismContamination/#removesingleorganismcontamination","text":"","title":"RemoveSingleOrganismContamination"},{"location":"workflows/RemoveSingleOrganismContamination/#removesingleorganismcontamination_1","text":"author Jonn Smith description A workflow to remove contamination originating from a single organism from a dataset.","title":"RemoveSingleOrganismContamination"},{"location":"workflows/RemoveSingleOrganismContamination/#inputs","text":"","title":"Inputs"},{"location":"workflows/RemoveSingleOrganismContamination/#required","text":"LB (String, required ): the value to place in the BAM read group's LB (library) field SM (String, required ): the value to place in the BAM read group's SM field contaminant_ref_map_file (File, required ): Table indicating reference sequence and auxillary file locations. contaminant_ref_name (String, required ): Name of the contaminant genome to be used in output files. dir_prefix (String, required ): directory prefix for output files","title":"Required"},{"location":"workflows/RemoveSingleOrganismContamination/#optional","text":"fq_end1 (File?): GCS path to end1 of paired-end fastq fq_end2 (File?): GCS path to end2 of paired-end fastq gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. input_bai (File?): GCS path to bai index for unmapped bam input_bam (File?): GCS path to unmapped bam t_004_RevertSam.runtime_attr_override (RuntimeAttr?) t_005_Bam2Fastq.bam_index (File?) t_005_Bam2Fastq.reference_dict (File?) t_005_Bam2Fastq.reference_fasta (File?) t_005_Bam2Fastq.reference_fasta_index (File?) t_005_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_006_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_007_AlignReads.runtime_attr_override (RuntimeAttr?) t_008_ExtractDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_009_ExtractContaminatedReads.runtime_attr_override (RuntimeAttr?) t_010_SortDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_011_SortContaminatedReads.runtime_attr_override (RuntimeAttr?) t_012_CreateFastqFromDecontaminatedReads.bam_index (File?) t_012_CreateFastqFromDecontaminatedReads.reference_dict (File?) t_012_CreateFastqFromDecontaminatedReads.reference_fasta (File?) t_012_CreateFastqFromDecontaminatedReads.reference_fasta_index (File?) t_012_CreateFastqFromDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_013_FinalizeContaminatedBam.name (String?) t_013_FinalizeContaminatedBam.runtime_attr_override (RuntimeAttr?) t_014_FinalizeContaminatedBamIndex.name (String?) t_014_FinalizeContaminatedBamIndex.runtime_attr_override (RuntimeAttr?) t_015_FinalizeDecontaminatedFq1.name (String?) t_015_FinalizeDecontaminatedFq1.runtime_attr_override (RuntimeAttr?) t_016_FinalizeDecontaminatedFq2.name (String?) t_016_FinalizeDecontaminatedFq2.runtime_attr_override (RuntimeAttr?) t_017_FinalizeDecontaminatedUnpaired.name (String?) t_017_FinalizeDecontaminatedUnpaired.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/RemoveSingleOrganismContamination/#defaults","text":"DEBUG_MODE (Boolean, default=false): [default valued] enables debugging tasks / subworkflows (default: false) platform (String, default=\"illumina\"): [default valued] the value to place in the BAM read group's PL (platform) field (default: illumina) t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_007_AlignReads.skip_sort (Boolean, default=false) t_009_ExtractContaminatedReads.extra_args (String, default=\"\")","title":"Defaults"},{"location":"workflows/RemoveSingleOrganismContamination/#outputs","text":"contaminated_bam (File) contaminated_bam_index (File) decontaminated_fq1 (File) decontaminated_fq2 (File) decontaminated_unpaired (File)","title":"Outputs"},{"location":"workflows/RemoveSingleOrganismContamination/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRBamToFq/","text":"SRBamToFq SRBamToFq Inputs Required bam (File, required ) participant_name (String, required ) Optional bam_index (File?) gcs_out_root_dir (String?) reference_dict (File?) reference_fasta (File?) reference_fasta_index (File?) BamToFq.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd1.keyfile (File?) FinalizeFqEnd1.name (String?) FinalizeFqEnd1.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd2.keyfile (File?) FinalizeFqEnd2.name (String?) FinalizeFqEnd2.runtime_attr_override (RuntimeAttr?) FinalizeFqUnpaired.keyfile (File?) FinalizeFqUnpaired.name (String?) FinalizeFqUnpaired.runtime_attr_override (RuntimeAttr?) Outputs fq_end1 (File) fq_end2 (File) fq_unpaired (File) Dot Diagram","title":"SRBamToFq"},{"location":"workflows/SRBamToFq/#srbamtofq","text":"","title":"SRBamToFq"},{"location":"workflows/SRBamToFq/#srbamtofq_1","text":"","title":"SRBamToFq"},{"location":"workflows/SRBamToFq/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRBamToFq/#required","text":"bam (File, required ) participant_name (String, required )","title":"Required"},{"location":"workflows/SRBamToFq/#optional","text":"bam_index (File?) gcs_out_root_dir (String?) reference_dict (File?) reference_fasta (File?) reference_fasta_index (File?) BamToFq.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd1.keyfile (File?) FinalizeFqEnd1.name (String?) FinalizeFqEnd1.runtime_attr_override (RuntimeAttr?) FinalizeFqEnd2.keyfile (File?) FinalizeFqEnd2.name (String?) FinalizeFqEnd2.runtime_attr_override (RuntimeAttr?) FinalizeFqUnpaired.keyfile (File?) FinalizeFqUnpaired.name (String?) FinalizeFqUnpaired.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRBamToFq/#outputs","text":"fq_end1 (File) fq_end2 (File) fq_unpaired (File)","title":"Outputs"},{"location":"workflows/SRBamToFq/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRFlowcell/","text":"SRFlowcell SRFlowcell author Jonn Smith description This workflow preprocesses short read flowcell data in preparation for variant calling. This workflow contains the following steps: 1) Sam -> Fastq (if necessary), 2) Alignment to reference with bwa-mem2 (https://github.com/bwa-mem2/bwa-mem2), 3) Mark Duplicate reads, 4) Recalibrate base quality scores. Inputs Required LB (String, required ) SM (String, required ): Sample name for the given bam file. dir_prefix (String, required ): Directory prefix to use for finalized location. ref_map_file (File, required ): Reference map file for the primary reference sequence and auxillary file locations. Optional bai (File?): Index for bam . bam must be defined if this argument is. This argument and bam are mutually exclusive with fq_end1 and fq_end2 bam (File?): Bam file containing reads to align and process. bai must be defined if this argument is. This argument and bai are mutually exclusive with fq_end1 and fq_end2 contaminant_ref_map_file (File?): Reference map file for the contaminant reference sequence and auxillary file locations. contaminant_ref_name (String?): Name for the contaminant reference. coverage_bed_file (File?): BED file containing regions to calculate coverage metrics for. fq_end1 (File?): FASTQ file containing end 1 of the short read data to process. fq_end2 must be defined if this argument is. This argument and fq_end2 are mutually exclusive with bam and bai fq_end2 (File?): FASTQ file containing end 2 of the short read data to process. fq_end1 must be defined if this argument is. This argument and fq_end1 are mutually exclusive with bam and bai gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. t_002_RevertSam.runtime_attr_override (RuntimeAttr?) t_003_Bam2Fastq.bam_index (File?) t_003_Bam2Fastq.reference_dict (File?) t_003_Bam2Fastq.reference_fasta (File?) t_003_Bam2Fastq.reference_fasta_index (File?) t_003_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_004_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.input_bai (File?) t_005_DecontaminateSample.input_bam (File?) t_006_AlignReads.runtime_attr_override (RuntimeAttr?) t_007_MergeBamAlignment.runtime_attr_override (RuntimeAttr?) t_008_MarkDuplicates.read_name_regex (String?) t_008_MarkDuplicates.runtime_attr_override (RuntimeAttr?) t_008_MarkDuplicates.sorting_collection_size_ratio (Float?) t_009_SortBam.runtime_attr_override (RuntimeAttr?) t_010_BaseRecalibrator.runtime_attr_override (RuntimeAttr?) t_011_ApplyBQSR.runtime_attr_override (RuntimeAttr?) t_012_SamStats.runtime_attr_override (RuntimeAttr?) t_013_FastQC.runtime_attr_override (RuntimeAttr?) t_014_ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) t_015_ComputeBamStats.qual_threshold (Int?) t_015_ComputeBamStats.runtime_attr_override (RuntimeAttr?) t_016_ComputeBamStatsQ5.runtime_attr_override (RuntimeAttr?) t_017_ComputeBamStatsQ10.runtime_attr_override (RuntimeAttr?) t_018_ComputeBamStatsQ20.runtime_attr_override (RuntimeAttr?) t_019_ComputeBamStatsQ30.runtime_attr_override (RuntimeAttr?) t_020_ComputeBamStatsQ40.runtime_attr_override (RuntimeAttr?) t_022_CallableLoci.runtime_attr_override (RuntimeAttr?) t_022_FinalizeUnalignedFastqReads.runtime_attr_override (RuntimeAttr?) t_023_FinalizeUnalignedReadsFromBam.runtime_attr_override (RuntimeAttr?) t_023_MosDepthOverBed.runtime_attr_override (RuntimeAttr?) t_024_AssessQualityMetrics.runtime_attr_override (RuntimeAttr?) t_024_FinalizeAlignedReads.runtime_attr_override (RuntimeAttr?) t_025_FinalizeAlignedBam.name (String?) t_025_FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) t_026_FinalizeAlignedBai.name (String?) t_026_FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) t_027_FinalizeMetrics.runtime_attr_override (RuntimeAttr?) t_028_FinalizeMarkDuplicatesMetrics.runtime_attr_override (RuntimeAttr?) t_029_FinalizeBQSRMetrics.runtime_attr_override (RuntimeAttr?) t_030_FinalizeFastQCReport.keyfile (File?) t_030_FinalizeFastQCReport.name (String?) t_030_FinalizeFastQCReport.runtime_attr_override (RuntimeAttr?) t_031_FinalizeCallableLociSummary.name (String?) t_031_FinalizeCallableLociSummary.runtime_attr_override (RuntimeAttr?) t_032_FinalizeCallableLociBed.name (String?) t_032_FinalizeCallableLociBed.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_004_RevertSam.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_005_Bam2Fastq.bam_index (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_dict (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_fasta (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_fasta_index (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_006_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_007_AlignReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_008_ExtractDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_009_ExtractContaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_010_SortDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_011_SortContaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.bam_index (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_dict (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_fasta (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_fasta_index (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_013_FinalizeContaminatedBam.name (String?) t_005_DecontaminateSample.t_013_FinalizeContaminatedBam.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_014_FinalizeContaminatedBamIndex.name (String?) t_005_DecontaminateSample.t_014_FinalizeContaminatedBamIndex.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_015_FinalizeDecontaminatedFq1.name (String?) t_005_DecontaminateSample.t_015_FinalizeDecontaminatedFq1.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_016_FinalizeDecontaminatedFq2.name (String?) t_005_DecontaminateSample.t_016_FinalizeDecontaminatedFq2.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_017_FinalizeDecontaminatedUnpaired.name (String?) t_005_DecontaminateSample.t_017_FinalizeDecontaminatedUnpaired.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) t_021_PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFYieldAligned.keyfile (File?) t_021_PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MosDepth.window_size (Int?) t_021_PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?) Defaults DEBUG_MODE (Boolean, default=false): If true, will add extra logging and extra debugging outputs. perform_BQSR (Boolean, default=true): If true, will perform Base Quality Score Recalibration. If false will not recalibrate base qualities. perform_mark_duplicates (Boolean, default=true): If true, will run MarkDuplicates on the raw reads from the sequencer. platform (String, default=\"illumina\"): Platform on which the sample for the given bam file was sequenced. t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_005_DecontaminateSample.DEBUG_MODE (Boolean, default=false): If true, will add extra logging and extra debugging outputs. t_011_ApplyBQSR.bin_base_qualities (Boolean, default=true) t_011_ApplyBQSR.emit_original_quals (Boolean, default=true) t_013_FastQC.num_cpus (Int, default=4) t_022_CallableLoci.min_base_quality (Int, default=20) t_022_CallableLoci.min_mapping_quality (Int, default=10) t_024_AssessQualityMetrics.min_callable_fraction (Float, default=0.5) t_024_AssessQualityMetrics.min_coverage (Float, default=5) t_024_AssessQualityMetrics.min_coverage_threshold_regions (Float, default=0.2) t_005_DecontaminateSample.t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_005_DecontaminateSample.t_007_AlignReads.skip_sort (Boolean, default=false) t_005_DecontaminateSample.t_009_ExtractContaminatedReads.extra_args (String, default=\"\") Outputs fq1 (File) fq2 (File) fq_unpaired (File?) unaligned_bam (File?) unaligned_bai (File?) aligned_bam (File) aligned_bai (File) contaminated_bam (File?) contaminated_bam_index (File?) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q10 (Float) num_reads_Q20 (Float) num_reads_Q30 (Float) num_reads_Q40 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length (Float) insert_size_average (Float) insert_size_standard_deviation (Float) pct_properly_paired_reads (Float) average_identity (Float) fastqc_report (File) callable_loci_summary (File) callable_loci_bed (File) qc_status (String?) qc_message (String?) Dot Diagram","title":"SRFlowcell"},{"location":"workflows/SRFlowcell/#srflowcell","text":"","title":"SRFlowcell"},{"location":"workflows/SRFlowcell/#srflowcell_1","text":"author Jonn Smith description This workflow preprocesses short read flowcell data in preparation for variant calling. This workflow contains the following steps: 1) Sam -> Fastq (if necessary), 2) Alignment to reference with bwa-mem2 (https://github.com/bwa-mem2/bwa-mem2), 3) Mark Duplicate reads, 4) Recalibrate base quality scores.","title":"SRFlowcell"},{"location":"workflows/SRFlowcell/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRFlowcell/#required","text":"LB (String, required ) SM (String, required ): Sample name for the given bam file. dir_prefix (String, required ): Directory prefix to use for finalized location. ref_map_file (File, required ): Reference map file for the primary reference sequence and auxillary file locations.","title":"Required"},{"location":"workflows/SRFlowcell/#optional","text":"bai (File?): Index for bam . bam must be defined if this argument is. This argument and bam are mutually exclusive with fq_end1 and fq_end2 bam (File?): Bam file containing reads to align and process. bai must be defined if this argument is. This argument and bai are mutually exclusive with fq_end1 and fq_end2 contaminant_ref_map_file (File?): Reference map file for the contaminant reference sequence and auxillary file locations. contaminant_ref_name (String?): Name for the contaminant reference. coverage_bed_file (File?): BED file containing regions to calculate coverage metrics for. fq_end1 (File?): FASTQ file containing end 1 of the short read data to process. fq_end2 must be defined if this argument is. This argument and fq_end2 are mutually exclusive with bam and bai fq_end2 (File?): FASTQ file containing end 2 of the short read data to process. fq_end1 must be defined if this argument is. This argument and fq_end1 are mutually exclusive with bam and bai gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. t_002_RevertSam.runtime_attr_override (RuntimeAttr?) t_003_Bam2Fastq.bam_index (File?) t_003_Bam2Fastq.reference_dict (File?) t_003_Bam2Fastq.reference_fasta (File?) t_003_Bam2Fastq.reference_fasta_index (File?) t_003_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_004_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.input_bai (File?) t_005_DecontaminateSample.input_bam (File?) t_006_AlignReads.runtime_attr_override (RuntimeAttr?) t_007_MergeBamAlignment.runtime_attr_override (RuntimeAttr?) t_008_MarkDuplicates.read_name_regex (String?) t_008_MarkDuplicates.runtime_attr_override (RuntimeAttr?) t_008_MarkDuplicates.sorting_collection_size_ratio (Float?) t_009_SortBam.runtime_attr_override (RuntimeAttr?) t_010_BaseRecalibrator.runtime_attr_override (RuntimeAttr?) t_011_ApplyBQSR.runtime_attr_override (RuntimeAttr?) t_012_SamStats.runtime_attr_override (RuntimeAttr?) t_013_FastQC.runtime_attr_override (RuntimeAttr?) t_014_ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) t_015_ComputeBamStats.qual_threshold (Int?) t_015_ComputeBamStats.runtime_attr_override (RuntimeAttr?) t_016_ComputeBamStatsQ5.runtime_attr_override (RuntimeAttr?) t_017_ComputeBamStatsQ10.runtime_attr_override (RuntimeAttr?) t_018_ComputeBamStatsQ20.runtime_attr_override (RuntimeAttr?) t_019_ComputeBamStatsQ30.runtime_attr_override (RuntimeAttr?) t_020_ComputeBamStatsQ40.runtime_attr_override (RuntimeAttr?) t_022_CallableLoci.runtime_attr_override (RuntimeAttr?) t_022_FinalizeUnalignedFastqReads.runtime_attr_override (RuntimeAttr?) t_023_FinalizeUnalignedReadsFromBam.runtime_attr_override (RuntimeAttr?) t_023_MosDepthOverBed.runtime_attr_override (RuntimeAttr?) t_024_AssessQualityMetrics.runtime_attr_override (RuntimeAttr?) t_024_FinalizeAlignedReads.runtime_attr_override (RuntimeAttr?) t_025_FinalizeAlignedBam.name (String?) t_025_FinalizeAlignedBam.runtime_attr_override (RuntimeAttr?) t_026_FinalizeAlignedBai.name (String?) t_026_FinalizeAlignedBai.runtime_attr_override (RuntimeAttr?) t_027_FinalizeMetrics.runtime_attr_override (RuntimeAttr?) t_028_FinalizeMarkDuplicatesMetrics.runtime_attr_override (RuntimeAttr?) t_029_FinalizeBQSRMetrics.runtime_attr_override (RuntimeAttr?) t_030_FinalizeFastQCReport.keyfile (File?) t_030_FinalizeFastQCReport.name (String?) t_030_FinalizeFastQCReport.runtime_attr_override (RuntimeAttr?) t_031_FinalizeCallableLociSummary.name (String?) t_031_FinalizeCallableLociSummary.runtime_attr_override (RuntimeAttr?) t_032_FinalizeCallableLociBed.name (String?) t_032_FinalizeCallableLociBed.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_004_RevertSam.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_005_Bam2Fastq.bam_index (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_dict (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_fasta (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.reference_fasta_index (File?) t_005_DecontaminateSample.t_005_Bam2Fastq.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_006_GetRawReadGroup.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_007_AlignReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_008_ExtractDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_009_ExtractContaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_010_SortDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_011_SortContaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.bam_index (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_dict (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_fasta (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.reference_fasta_index (File?) t_005_DecontaminateSample.t_012_CreateFastqFromDecontaminatedReads.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_013_FinalizeContaminatedBam.name (String?) t_005_DecontaminateSample.t_013_FinalizeContaminatedBam.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_014_FinalizeContaminatedBamIndex.name (String?) t_005_DecontaminateSample.t_014_FinalizeContaminatedBamIndex.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_015_FinalizeDecontaminatedFq1.name (String?) t_005_DecontaminateSample.t_015_FinalizeDecontaminatedFq1.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_016_FinalizeDecontaminatedFq2.name (String?) t_005_DecontaminateSample.t_016_FinalizeDecontaminatedFq2.runtime_attr_override (RuntimeAttr?) t_005_DecontaminateSample.t_017_FinalizeDecontaminatedUnpaired.name (String?) t_005_DecontaminateSample.t_017_FinalizeDecontaminatedUnpaired.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.AlignedFlagStats.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.AlignedReadMetrics.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageFullDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageFullDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageGlobalDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageGlobalDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantized.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantized.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantizedCsi.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantizedCsi.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageQuantizedDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageQuantizedDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegionDist.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegionDist.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegions.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegions.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFCoverageRegionsCsi.keyfile (File?) t_021_PerFlowcellMetrics.FFCoverageRegionsCsi.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFDepthSummaries.keyfile (File?) t_021_PerFlowcellMetrics.FFDepthSummaries.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.FFYieldAligned.keyfile (File?) t_021_PerFlowcellMetrics.FFYieldAligned.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MosDepth.runtime_attr_override (RuntimeAttr?) t_021_PerFlowcellMetrics.MosDepth.window_size (Int?) t_021_PerFlowcellMetrics.SummarizeDepth.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRFlowcell/#defaults","text":"DEBUG_MODE (Boolean, default=false): If true, will add extra logging and extra debugging outputs. perform_BQSR (Boolean, default=true): If true, will perform Base Quality Score Recalibration. If false will not recalibrate base qualities. perform_mark_duplicates (Boolean, default=true): If true, will run MarkDuplicates on the raw reads from the sequencer. platform (String, default=\"illumina\"): Platform on which the sample for the given bam file was sequenced. t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_005_DecontaminateSample.DEBUG_MODE (Boolean, default=false): If true, will add extra logging and extra debugging outputs. t_011_ApplyBQSR.bin_base_qualities (Boolean, default=true) t_011_ApplyBQSR.emit_original_quals (Boolean, default=true) t_013_FastQC.num_cpus (Int, default=4) t_022_CallableLoci.min_base_quality (Int, default=20) t_022_CallableLoci.min_mapping_quality (Int, default=10) t_024_AssessQualityMetrics.min_callable_fraction (Float, default=0.5) t_024_AssessQualityMetrics.min_coverage (Float, default=5) t_024_AssessQualityMetrics.min_coverage_threshold_regions (Float, default=0.2) t_005_DecontaminateSample.t_001_WdlExecutionStartTimestamp.date_format (String, default=\"%Y%m%d_%H%M%S_%N\") t_005_DecontaminateSample.t_007_AlignReads.skip_sort (Boolean, default=false) t_005_DecontaminateSample.t_009_ExtractContaminatedReads.extra_args (String, default=\"\")","title":"Defaults"},{"location":"workflows/SRFlowcell/#outputs","text":"fq1 (File) fq2 (File) fq_unpaired (File?) unaligned_bam (File?) unaligned_bai (File?) aligned_bam (File) aligned_bai (File) contaminated_bam (File?) contaminated_bam_index (File?) num_reads (Float) num_bases (Float) raw_est_fold_cov (Float) read_length (Float) read_qual_mean (Float) read_qual_median (Float) num_reads_Q5 (Float) num_reads_Q10 (Float) num_reads_Q20 (Float) num_reads_Q30 (Float) num_reads_Q40 (Float) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length (Float) insert_size_average (Float) insert_size_standard_deviation (Float) pct_properly_paired_reads (Float) average_identity (Float) fastqc_report (File) callable_loci_summary (File) callable_loci_bed (File) qc_status (String?) qc_message (String?)","title":"Outputs"},{"location":"workflows/SRFlowcell/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRIndexBam/","text":"SRIndexBam SRIndexBam author Jonn Smith description Index a given Bam file. Inputs Required bam (File, required ): Bam file for which to create an index. outdir (String, required ): GCS Bucket into which to finalize outputs. Optional FinalizeBamIndex.keyfile (File?) FinalizeBamIndex.name (String?) FinalizeBamIndex.runtime_attr_override (RuntimeAttr?) Index.runtime_attr_override (RuntimeAttr?) Outputs bai (File) Dot Diagram","title":"SRIndexBam"},{"location":"workflows/SRIndexBam/#srindexbam","text":"","title":"SRIndexBam"},{"location":"workflows/SRIndexBam/#srindexbam_1","text":"author Jonn Smith description Index a given Bam file.","title":"SRIndexBam"},{"location":"workflows/SRIndexBam/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRIndexBam/#required","text":"bam (File, required ): Bam file for which to create an index. outdir (String, required ): GCS Bucket into which to finalize outputs.","title":"Required"},{"location":"workflows/SRIndexBam/#optional","text":"FinalizeBamIndex.keyfile (File?) FinalizeBamIndex.name (String?) FinalizeBamIndex.runtime_attr_override (RuntimeAttr?) Index.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRIndexBam/#outputs","text":"bai (File)","title":"Outputs"},{"location":"workflows/SRIndexBam/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/","text":"SRJointCallGVCFsWithGenomicsDB SRJointCallGVCFsWithGenomicsDB author Jonn Smith description A workflow that performs joint calling on single-sample gVCFs from GATK4 HaplotypeCaller using GenomicsDB. Inputs Required gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . Optional annotation_bed_file_annotation_names (Array[String]?): Array of names/FILTER column entries to use for each given file in annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_file_indexes (Array[File]?): Array of bed indexes for annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_files (Array[File]?): Array of bed files to use to FILTER/annotate variants in the output file. Annotations will be placed in the FILTER column, effectively filtering variants that overlap these regions. background_sample_gvcf_indices (Array[Array[File]]?): Array of GVCF index files for background_sample_gvcfs . Order should correspond to that in background_sample_gvcfs . background_sample_gvcfs (Array[Array[File]]?): Array of GVCFs to use as background samples for joint calling. gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. interval_list (File?) snpeff_db (File?) snpeff_db_identifier (String?) AnnotateVcfRegions.runtime_attr_override (RuntimeAttr?) ConvertToZarr.ref_fai (String?) ConvertToZarr.ref_fasta (String?) ConvertToZarr.runtime_attr_override (RuntimeAttr?) CreateHailMatrixTable.runtime_attr_override (RuntimeAttr?) CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeGenomicsDB.runtime_attr_override (RuntimeAttr?) FinalizeHailMatrixTable.name (String?) FinalizeHailMatrixTable.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedAnnotations.name (String?) FinalizeIndelExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcf.name (String?) FinalizeIndelExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcfIndex.name (String?) FinalizeIndelExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedUnlabeledAnnotations.name (String?) FinalizeIndelExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsTrainingScores.name (String?) FinalizeIndelTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcf.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcf.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffGenes.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffSummary.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedAnnotations.name (String?) FinalizeSnpExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcf.name (String?) FinalizeSnpExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcfIndex.name (String?) FinalizeSnpExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedUnlabeledAnnotations.name (String?) FinalizeSnpExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsTrainingScores.name (String?) FinalizeSnpTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) FinalizeZarr.name (String?) FinalizeZarr.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotate.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GnarlyJointCallGVCFs.input_gvcf_index (File?) JointCallGVCFs.input_gvcf_index (File?) MakeIntervalListFromSequenceDictionary.runtime_attr_override (RuntimeAttr?) MakeSitesOnlyVCF.runtime_attr_override (RuntimeAttr?) MergeSitesOnlyVCFs.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) Defaults do_zarr_conversion (Boolean, default=false) heterozygosity (Float, default=0.001): Joint Genotyping Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept heterozygosity_stdev (Float, default=0.01): Joint Genotyping Parameter - Standard deviation of heterozygosity for SNP and indel calling. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_heterozygosity (Float, default=0.000125): Joint Genotyping Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. shard_max_interval_size_bp (Int, default=999999999): Maximum size of the interval on each shard. This along with the given sequence dictionary determines how many shards there will be. To shard by contig, set to a very high number. Default is 999999999. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. use_gnarly_genotyper (Boolean, default=false): If true, the GnarlyGenotyper will be used, greatly speeding up joint genotyping (at the cost of potentially lower accuracy). Setting this to true is recommended for large callsets. If false, GenotypeGVCFs will be used to generate the final VCF. Default is false. ConvertToZarr.num_cpus (Int, default=4) ConvertToZarr.reference (String, default=\"GRCh38\") GnarlyJointCallGVCFs.keep_combined_raw_annotations (Boolean, default=false) JointCallGVCFs.keep_combined_raw_annotations (Boolean, default=false) MakeIntervalListFromSequenceDictionary.ignore_contigs (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) Outputs joint_vcf_out (File) joint_vcf_out_tbi (File) joint_mt (File) genomicsDB (Array[String]) joint_zarr (File?) snpEff_summary (Array[String]?) snpEff_genes (Array[String]?) Dot Diagram","title":"SRJointCallGVCFsWithGenomicsDB"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#srjointcallgvcfswithgenomicsdb","text":"","title":"SRJointCallGVCFsWithGenomicsDB"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#srjointcallgvcfswithgenomicsdb_1","text":"author Jonn Smith description A workflow that performs joint calling on single-sample gVCFs from GATK4 HaplotypeCaller using GenomicsDB.","title":"SRJointCallGVCFsWithGenomicsDB"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#required","text":"gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants .","title":"Required"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#optional","text":"annotation_bed_file_annotation_names (Array[String]?): Array of names/FILTER column entries to use for each given file in annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_file_indexes (Array[File]?): Array of bed indexes for annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_files (Array[File]?): Array of bed files to use to FILTER/annotate variants in the output file. Annotations will be placed in the FILTER column, effectively filtering variants that overlap these regions. background_sample_gvcf_indices (Array[Array[File]]?): Array of GVCF index files for background_sample_gvcfs . Order should correspond to that in background_sample_gvcfs . background_sample_gvcfs (Array[Array[File]]?): Array of GVCFs to use as background samples for joint calling. gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. interval_list (File?) snpeff_db (File?) snpeff_db_identifier (String?) AnnotateVcfRegions.runtime_attr_override (RuntimeAttr?) ConvertToZarr.ref_fai (String?) ConvertToZarr.ref_fasta (String?) ConvertToZarr.runtime_attr_override (RuntimeAttr?) CreateHailMatrixTable.runtime_attr_override (RuntimeAttr?) CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeGenomicsDB.runtime_attr_override (RuntimeAttr?) FinalizeHailMatrixTable.name (String?) FinalizeHailMatrixTable.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedAnnotations.name (String?) FinalizeIndelExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcf.name (String?) FinalizeIndelExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcfIndex.name (String?) FinalizeIndelExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedUnlabeledAnnotations.name (String?) FinalizeIndelExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsTrainingScores.name (String?) FinalizeIndelTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcf.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcf.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffGenes.runtime_attr_override (RuntimeAttr?) FinalizeSnpEffSummary.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedAnnotations.name (String?) FinalizeSnpExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcf.name (String?) FinalizeSnpExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcfIndex.name (String?) FinalizeSnpExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedUnlabeledAnnotations.name (String?) FinalizeSnpExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsTrainingScores.name (String?) FinalizeSnpTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) FinalizeZarr.name (String?) FinalizeZarr.runtime_attr_override (RuntimeAttr?) FunctionallyAnnotate.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GnarlyJointCallGVCFs.input_gvcf_index (File?) JointCallGVCFs.input_gvcf_index (File?) MakeIntervalListFromSequenceDictionary.runtime_attr_override (RuntimeAttr?) MakeSitesOnlyVCF.runtime_attr_override (RuntimeAttr?) MergeSitesOnlyVCFs.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?)","title":"Optional"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#defaults","text":"do_zarr_conversion (Boolean, default=false) heterozygosity (Float, default=0.001): Joint Genotyping Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept heterozygosity_stdev (Float, default=0.01): Joint Genotyping Parameter - Standard deviation of heterozygosity for SNP and indel calling. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_heterozygosity (Float, default=0.000125): Joint Genotyping Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. shard_max_interval_size_bp (Int, default=999999999): Maximum size of the interval on each shard. This along with the given sequence dictionary determines how many shards there will be. To shard by contig, set to a very high number. Default is 999999999. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. use_gnarly_genotyper (Boolean, default=false): If true, the GnarlyGenotyper will be used, greatly speeding up joint genotyping (at the cost of potentially lower accuracy). Setting this to true is recommended for large callsets. If false, GenotypeGVCFs will be used to generate the final VCF. Default is false. ConvertToZarr.num_cpus (Int, default=4) ConvertToZarr.reference (String, default=\"GRCh38\") GnarlyJointCallGVCFs.keep_combined_raw_annotations (Boolean, default=false) JointCallGVCFs.keep_combined_raw_annotations (Boolean, default=false) MakeIntervalListFromSequenceDictionary.ignore_contigs (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95)","title":"Defaults"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#outputs","text":"joint_vcf_out (File) joint_vcf_out_tbi (File) joint_mt (File) genomicsDB (Array[String]) joint_zarr (File?) snpEff_summary (Array[String]?) snpEff_genes (Array[String]?)","title":"Outputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/","text":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR author Jonn Smith description This workflow implements a modified version of the joint calling pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. The modification is that this pipeline uses VETS instead of VQSR. Inputs Required gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . SplitContigToIntervals.prefix (String, required ): Prefix to use for output files. SplitContigToIntervals.ref_fasta (File, required ) SplitContigToIntervals.ref_fasta_fai (File, required ) Optional annotation_bed_file_annotation_names (Array[String]?): Array of names/FILTER column entries to use for each given file in annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_file_indexes (Array[File]?): Array of bed indexes for annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_files (Array[File]?): Array of bed files to use to FILTER/annotate variants in the output file. Annotations will be placed in the FILTER column, effectively filtering variants that overlap these regions. AnnotateVcfRegions.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GatherSitesOnlyVCFs.runtime_attr_override (RuntimeAttr?) GatherVcfs.runtime_attr_override (RuntimeAttr?) GenomicsDbImport.runtime_attr_override (RuntimeAttr?) GenotypeGVCFs.input_gvcf_index (File?) GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MakeSitesOnlyVCF.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) SplitContigToIntervals.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) Defaults indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CreateSampleNameMap.background_sample_gvcfs (Array[File], default=[]) GenomicsDbImport.batch_size (Int, default=100) GenotypeGVCFs.batch_size (Int, default=100) MakeChrIntervalList.filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) SplitContigToIntervals.size (Int, default=200000) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) Outputs joint_recalibrated_vcf (File) joint_recalibrated_vcf_tbi (File) Dot Diagram","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#srjointcallgvcfswithgenomicsdb_pf_niare_vets","text":"","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#srjointcallgvcfswithgenomicsdb_pf_niare_vqsr","text":"author Jonn Smith description This workflow implements a modified version of the joint calling pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. The modification is that this pipeline uses VETS instead of VQSR.","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#required","text":"gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . SplitContigToIntervals.prefix (String, required ): Prefix to use for output files. SplitContigToIntervals.ref_fasta (File, required ) SplitContigToIntervals.ref_fasta_fai (File, required )","title":"Required"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#optional","text":"annotation_bed_file_annotation_names (Array[String]?): Array of names/FILTER column entries to use for each given file in annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_file_indexes (Array[File]?): Array of bed indexes for annotation_bed_files . Order should correspond to annotation_bed_files . annotation_bed_files (Array[File]?): Array of bed files to use to FILTER/annotate variants in the output file. Annotations will be placed in the FILTER column, effectively filtering variants that overlap these regions. AnnotateVcfRegions.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GatherSitesOnlyVCFs.runtime_attr_override (RuntimeAttr?) GatherVcfs.runtime_attr_override (RuntimeAttr?) GenomicsDbImport.runtime_attr_override (RuntimeAttr?) GenotypeGVCFs.input_gvcf_index (File?) GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MakeSitesOnlyVCF.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) SplitContigToIntervals.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?)","title":"Optional"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#defaults","text":"indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CreateSampleNameMap.background_sample_gvcfs (Array[File], default=[]) GenomicsDbImport.batch_size (Int, default=100) GenotypeGVCFs.batch_size (Int, default=100) MakeChrIntervalList.filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) SplitContigToIntervals.size (Int, default=200000) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95)","title":"Defaults"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#outputs","text":"joint_recalibrated_vcf (File) joint_recalibrated_vcf_tbi (File)","title":"Outputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VETS/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/","text":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR author Jonn Smith description This workflow replicates the joint-calling pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. Inputs Required gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations. vqsr_sites_vcf (File, required ): Sites-only VCF to use with VQSR for training. vqsr_sites_vcf_index (File, required ): VCF index of vqsr_sites_vcf SplitContigToIntervals.prefix (String, required ): Prefix to use for output files. SplitContigToIntervals.ref_fasta (File, required ) SplitContigToIntervals.ref_fasta_fai (File, required ) Optional ApplyVqsrIndel.runtime_attr_override (RuntimeAttr?) ApplyVqsrSnp.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GatherVcfs.runtime_attr_override (RuntimeAttr?) GenomicsDbImport.runtime_attr_override (RuntimeAttr?) GenotypeGVCFs.input_gvcf_index (File?) GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MergeMultiAllelicSitesPostRecalibration.runtime_attr_override (RuntimeAttr?) NormalizeVcfSplittingMultiallelics.runtime_attr_override (RuntimeAttr?) SplitContigToIntervals.runtime_attr_override (RuntimeAttr?) VariantRecalibratorIndel.runtime_attr_override (RuntimeAttr?) VariantRecalibratorSnp.runtime_attr_override (RuntimeAttr?) Defaults CreateSampleNameMap.background_sample_gvcfs (Array[File], default=[]) GenomicsDbImport.batch_size (Int, default=100) GenotypeGVCFs.batch_size (Int, default=100) MakeChrIntervalList.filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) NormalizeVcfSplittingMultiallelics.batch_size (Int, default=100) SplitContigToIntervals.size (Int, default=200000) Outputs joint_recalibrated_vcf (File) joint_recalibrated_vcf_tbi (File) Dot Diagram","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#srjointcallgvcfswithgenomicsdb_pf_niare_vqsr","text":"","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#srjointcallgvcfswithgenomicsdb_pf_niare_vqsr_1","text":"author Jonn Smith description This workflow replicates the joint-calling pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions.","title":"SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#required","text":"gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. gvcf_indices (Array[File], required ): Array of gvcf index files for gvcfs . Order should correspond to that in gvcfs . gvcfs (Array[File], required ): Array of GVCF files to use as inputs for joint calling. prefix (String, required ): Prefix to use for output files. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations. vqsr_sites_vcf (File, required ): Sites-only VCF to use with VQSR for training. vqsr_sites_vcf_index (File, required ): VCF index of vqsr_sites_vcf SplitContigToIntervals.prefix (String, required ): Prefix to use for output files. SplitContigToIntervals.ref_fasta (File, required ) SplitContigToIntervals.ref_fasta_fai (File, required )","title":"Required"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#optional","text":"ApplyVqsrIndel.runtime_attr_override (RuntimeAttr?) ApplyVqsrSnp.runtime_attr_override (RuntimeAttr?) CreateSampleNameMap.runtime_attr_override (RuntimeAttr?) FinalizeVETSTBI.name (String?) FinalizeVETSTBI.runtime_attr_override (RuntimeAttr?) FinalizeVETSVCF.name (String?) FinalizeVETSVCF.runtime_attr_override (RuntimeAttr?) GatherRescoredVcfs.runtime_attr_override (RuntimeAttr?) GatherVcfs.runtime_attr_override (RuntimeAttr?) GenomicsDbImport.runtime_attr_override (RuntimeAttr?) GenotypeGVCFs.input_gvcf_index (File?) GenotypeGVCFs.runtime_attr_override (RuntimeAttr?) MakeChrIntervalList.runtime_attr_override (RuntimeAttr?) MergeMultiAllelicSitesPostRecalibration.runtime_attr_override (RuntimeAttr?) NormalizeVcfSplittingMultiallelics.runtime_attr_override (RuntimeAttr?) SplitContigToIntervals.runtime_attr_override (RuntimeAttr?) VariantRecalibratorIndel.runtime_attr_override (RuntimeAttr?) VariantRecalibratorSnp.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#defaults","text":"CreateSampleNameMap.background_sample_gvcfs (Array[File], default=[]) GenomicsDbImport.batch_size (Int, default=100) GenotypeGVCFs.batch_size (Int, default=100) MakeChrIntervalList.filter (Array[String], default=['random', 'chrUn', 'decoy', 'alt', 'HLA', 'EBV']) NormalizeVcfSplittingMultiallelics.batch_size (Int, default=100) SplitContigToIntervals.size (Int, default=200000)","title":"Defaults"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#outputs","text":"joint_recalibrated_vcf (File) joint_recalibrated_vcf_tbi (File)","title":"Outputs"},{"location":"workflows/SRJointCallGVCFsWithGenomicsDB_Pf_Niare_VQSR/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRWholeGenome/","text":"SRWholeGenome SRWholeGenome author Jonn Smith description This workflow performs single-sample variant calling on Illumina reads from one or more flow cells containing replicates of the same sample. The workflow merges multiple samples into a single BAM prior to variant calling. Inputs Required aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . Optional bed_to_compute_coverage (File?): Bed file to use as regions over which to measure coverage. fingerprint_haploytpe_db_file (File?): Haplotype DB file from which to fingerprint the input data. gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. interval_list (File?) CallVariantsWithHaplotypeCaller.haplotype_caller_runtime_attr_override (RuntimeAttr?) ComputeBamStats.qual_threshold (Int?) ComputeBamStats.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FastQC.runtime_attr_override (RuntimeAttr?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeFastQCReport.keyfile (File?) FinalizeFastQCReport.name (String?) FinalizeFastQCReport.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintVcf.name (String?) FinalizeFingerprintVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredTbi.name (String?) FinalizeHCRescoredTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredVcf.name (String?) FinalizeHCRescoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedAnnotations.name (String?) FinalizeIndelExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcf.name (String?) FinalizeIndelExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcfIndex.name (String?) FinalizeIndelExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedUnlabeledAnnotations.name (String?) FinalizeIndelExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsTrainingScores.name (String?) FinalizeIndelTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcf.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcf.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedAnnotations.name (String?) FinalizeSnpExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcf.name (String?) FinalizeSnpExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcfIndex.name (String?) FinalizeSnpExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedUnlabeledAnnotations.name (String?) FinalizeSnpExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsTrainingScores.name (String?) FinalizeSnpTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FingerprintAndBarcodeVcf.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MosDepth.runtime_attr_override (RuntimeAttr?) RegionalCoverage.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) SamStats.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.single_interval (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.annotations_to_keep (Array[String]?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.tree_score_cutoff (Float?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) Defaults contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. enable_hc_pileup_mode (Boolean, default=true): If true, will enable pileup mode in HaplotypeCaller. heterozygosity (Float, default=0.001): HaplotypeCaller Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept heterozygosity_stdev (Float, default=0.01): HaplotypeCaller Parameter - Standard deviation of heterozygosity for SNP and indel calling. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_heterozygosity (Float, default=0.000125): HaplotypeCaller Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. ploidy (Int, default=2): Ploidy of the species being variant called. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=true) FastQC.num_cpus (Int, default=4) RenameRawHcVcf.is_gvcf (Boolean, default=false) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.enable_dangling_branch_recovery (Boolean, default=false) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001): HaplotypeCaller Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01): HaplotypeCaller Parameter - Standard deviation of heterozygosity for SNP and indel calling. CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125): HaplotypeCaller Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.gq_blocks (Array[Int], default=[20, 30, 40]) Outputs vcf (File) tbi (File) g_vcf (File) g_tbi (File) bamout (File) baiout (File) fingerprint_vcf (File?) barcode (String?) successfully_processed (Boolean) aligned_bam (File?) aligned_bai (File?) average_identity (Float?) aligned_num_reads (Float?) aligned_num_bases (Float?) aligned_frac_bases (Float?) aligned_est_fold_cov (Float?) aligned_read_length_mean (Float?) insert_size_average (Float?) insert_size_standard_deviation (Float?) pct_properly_paired_reads (Float?) fastqc_report (File?) bed_cov_summary (File?) Dot Diagram","title":"SRWholeGenome"},{"location":"workflows/SRWholeGenome/#srwholegenome","text":"","title":"SRWholeGenome"},{"location":"workflows/SRWholeGenome/#srwholegenome_1","text":"author Jonn Smith description This workflow performs single-sample variant calling on Illumina reads from one or more flow cells containing replicates of the same sample. The workflow merges multiple samples into a single BAM prior to variant calling.","title":"SRWholeGenome"},{"location":"workflows/SRWholeGenome/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRWholeGenome/#required","text":"aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Table indicating reference sequence, auxillary file locations, and metadata. snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants .","title":"Required"},{"location":"workflows/SRWholeGenome/#optional","text":"bed_to_compute_coverage (File?): Bed file to use as regions over which to measure coverage. fingerprint_haploytpe_db_file (File?): Haplotype DB file from which to fingerprint the input data. gcs_out_root_dir (String?): GCS Bucket into which to finalize outputs. If no bucket is given, outputs will not be finalized and instead will remain in their native execution location. interval_list (File?) CallVariantsWithHaplotypeCaller.haplotype_caller_runtime_attr_override (RuntimeAttr?) ComputeBamStats.qual_threshold (Int?) ComputeBamStats.runtime_attr_override (RuntimeAttr?) ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FastQC.runtime_attr_override (RuntimeAttr?) FinalizeBai.runtime_attr_override (RuntimeAttr?) FinalizeBam.runtime_attr_override (RuntimeAttr?) FinalizeFastQCReport.keyfile (File?) FinalizeFastQCReport.name (String?) FinalizeFastQCReport.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintVcf.name (String?) FinalizeFingerprintVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredTbi.name (String?) FinalizeHCRescoredTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredVcf.name (String?) FinalizeHCRescoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedAnnotations.name (String?) FinalizeIndelExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcf.name (String?) FinalizeIndelExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedSitesOnlyVcfIndex.name (String?) FinalizeIndelExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeIndelExtractedUnlabeledAnnotations.name (String?) FinalizeIndelExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeIndelTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeIndelTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsTrainingScores.name (String?) FinalizeIndelTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeIndelTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FinalizeRegionalCoverage.keyfile (File?) FinalizeRegionalCoverage.name (String?) FinalizeRegionalCoverage.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcf.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreIndelVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreIndelVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsAnnotationsHdf5.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcf.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.name (String?) FinalizeScoreSnpVariantAnnotationsScoredVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.name (String?) FinalizeScoreSnpVariantAnnotationsScoresHdf5.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedAnnotations.name (String?) FinalizeSnpExtractedAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcf.name (String?) FinalizeSnpExtractedSitesOnlyVcf.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedSitesOnlyVcfIndex.name (String?) FinalizeSnpExtractedSitesOnlyVcfIndex.runtime_attr_override (RuntimeAttr?) FinalizeSnpExtractedUnlabeledAnnotations.name (String?) FinalizeSnpExtractedUnlabeledAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.name (String?) FinalizeSnpTrainVariantAnnotationsCalibrationSetScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsNegativeModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.name (String?) FinalizeSnpTrainVariantAnnotationsPositiveModelScorer.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsTrainingScores.name (String?) FinalizeSnpTrainVariantAnnotationsTrainingScores.runtime_attr_override (RuntimeAttr?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.name (String?) FinalizeSnpTrainVariantAnnotationsUnlabeledPositiveModelScores.runtime_attr_override (RuntimeAttr?) FingerprintAndBarcodeVcf.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MosDepth.runtime_attr_override (RuntimeAttr?) RegionalCoverage.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) SamStats.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.single_interval (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CreateIntervalListFileFromIntervalInfo.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ExtractIntervalNamesFromIntervalOrBamFile.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.annotations_to_keep (Array[String]?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.tree_score_cutoff (Float?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRWholeGenome/#defaults","text":"contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. enable_hc_pileup_mode (Boolean, default=true): If true, will enable pileup mode in HaplotypeCaller. heterozygosity (Float, default=0.001): HaplotypeCaller Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept heterozygosity_stdev (Float, default=0.01): HaplotypeCaller Parameter - Standard deviation of heterozygosity for SNP and indel calling. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_heterozygosity (Float, default=0.000125): HaplotypeCaller Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. ploidy (Int, default=2): Ploidy of the species being variant called. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=true) FastQC.num_cpus (Int, default=4) RenameRawHcVcf.is_gvcf (Boolean, default=false) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.enable_dangling_branch_recovery (Boolean, default=false) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001): HaplotypeCaller Parameter - Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01): HaplotypeCaller Parameter - Standard deviation of heterozygosity for SNP and indel calling. CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125): HaplotypeCaller Parameter - Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.ReblockHcGVCF.gq_blocks (Array[Int], default=[20, 30, 40])","title":"Defaults"},{"location":"workflows/SRWholeGenome/#outputs","text":"vcf (File) tbi (File) g_vcf (File) g_tbi (File) bamout (File) baiout (File) fingerprint_vcf (File?) barcode (String?) successfully_processed (Boolean) aligned_bam (File?) aligned_bai (File?) average_identity (Float?) aligned_num_reads (Float?) aligned_num_bases (Float?) aligned_frac_bases (Float?) aligned_est_fold_cov (Float?) aligned_read_length_mean (Float?) insert_size_average (Float?) insert_size_standard_deviation (Float?) pct_properly_paired_reads (Float?) fastqc_report (File?) bed_cov_summary (File?)","title":"Outputs"},{"location":"workflows/SRWholeGenome/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/","text":"SRWholeGenome_Pf_Niare_VETS SRWholeGenome_Pf_Niare_VETS author Jonn Smith description This workflow implements a modified version of the single-sample pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. The modification is that this pipeline uses VETS instead of VQSR. Inputs Required aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. genotype_gvcfs_intervals (File, required ): Intervals over which to batch Joint Genotyping. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . vcf_calling_interval_list (File, required ): Intervals over which to call variants. Optional bed_to_compute_coverage (File?): Bed file to use as regions over which to measure coverage. ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredTbi.name (String?) FinalizeHCRescoredTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredVcf.name (String?) FinalizeHCRescoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeRawHCTbi.name (String?) FinalizeRawHCTbi.runtime_attr_override (RuntimeAttr?) FinalizeRawHCVcf.name (String?) FinalizeRawHCVcf.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveFilteredVariants.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.dbsnp_vcf (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) Defaults contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=false) RenameRawHcVcf.is_gvcf (Boolean, default=false) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.MergeGVCFs.is_gvcf (Boolean, default=false) Outputs successfully_processed (Boolean) hc_g_vcf (File?) hc_g_tbi (File?) hc_bamout (File?) hc_baiout (File?) hc_raw_vcf (File?) hc_raw_tbi (File?) hc_rescored_vcf (File?) hc_rescored_tbi (File?) Dot Diagram","title":"SRWholeGenome_Pf_Niare_VETS"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#srwholegenome_pf_niare_vets","text":"","title":"SRWholeGenome_Pf_Niare_VETS"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#srwholegenome_pf_niare_vets_1","text":"author Jonn Smith description This workflow implements a modified version of the single-sample pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. The modification is that this pipeline uses VETS instead of VQSR.","title":"SRWholeGenome_Pf_Niare_VETS"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#required","text":"aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. genotype_gvcfs_intervals (File, required ): Intervals over which to batch Joint Genotyping. indel_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. indel_is_training (Array[Boolean], required ): Array of booleans indicating which files in indel_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. indel_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for INDELs. Each can be designated as either calibration or training using indel_is_training and indel_is_calibration . indel_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . indel_known_reference_variants_index (Array[File], required ): Array of VCF index files for indel_known_reference_variants . Order should correspond to that in indel_known_reference_variants . participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations snp_is_calibration (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as calibration sets. True ->calibration set. False -> NOT a calibration set. snp_is_training (Array[Boolean], required ): Array of booleans indicating which files in snp_known_reference_variants should be used as training sets. True -> training set. False -> NOT a training set. snp_known_reference_variants (Array[File], required ): Array of VCF files to use as input reference variants for SNPs. Each can be designated as either calibration or training using snp_is_training and snp_is_calibration . snp_known_reference_variants_identifier (Array[File], required ): Array of names to give to the VCF files given in snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . snp_known_reference_variants_index (Array[File], required ): Array of VCF index files for snp_known_reference_variants . Order should correspond to that in snp_known_reference_variants . vcf_calling_interval_list (File, required ): Intervals over which to call variants.","title":"Required"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#optional","text":"bed_to_compute_coverage (File?): Bed file to use as regions over which to measure coverage. ExtractIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ExtractSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredTbi.name (String?) FinalizeHCRescoredTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCRescoredVcf.name (String?) FinalizeHCRescoredVcf.runtime_attr_override (RuntimeAttr?) FinalizeRawHCTbi.name (String?) FinalizeRawHCTbi.runtime_attr_override (RuntimeAttr?) FinalizeRawHCVcf.name (String?) FinalizeRawHCVcf.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) RemoveFilteredVariants.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) ScoreIndelVariantAnnotations.runtime_attr_override (RuntimeAttr?) ScoreSnpVariantAnnotations.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainIndelVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) TrainSnpVariantAnnotationsModel.runtime_attr_override (RuntimeAttr?) TrainSnpVariantAnnotationsModel.unlabeled_annotation_hdf5 (File?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.dbsnp_vcf (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#defaults","text":"contigs_names_to_ignore (Array[String], default=[\"RANDOM_PLACEHOLDER_VALUE\"]): Array of names of contigs to ignore for the purposes of reporting variants. indel_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which INDEL variants will be filtered. indel_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled INDEL variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. indel_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the INDEL variant scoring model and over which to score INDEL variants. snp_calibration_sensitivity (Float, default=0.99): VETS (ScoreVariantAnnotations) parameter - score below which SNP variants will be filtered. snp_max_unlabeled_variants (Int, default=0): VETS (ExtractVariantAnnotations) parameter - maximum number of unlabeled SNP variants/alleles to randomly sample with reservoir sampling. If nonzero, annotations will also be extracted from unlabeled sites. snp_recalibration_annotation_values (Array[String], default=[\"BaseQRankSum\", \"ExcessHet\", \"FS\", \"HAPCOMP\", \"HAPDOM\", \"HEC\", \"MQ\", \"MQRankSum\", \"QD\", \"ReadPosRankSum\", \"SOR\", \"DP\"]): VETS (ScoreSnpVariantAnnotations/ScoreVariantAnnotations) parameter - Array of annotation names to use to create the SNP variant scoring model and over which to score SNP variants. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=false) RenameRawHcVcf.is_gvcf (Boolean, default=false) TrainIndelVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) TrainSnpVariantAnnotationsModel.calibration_sensitivity_threshold (Float, default=0.95) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.MergeGVCFs.is_gvcf (Boolean, default=false)","title":"Defaults"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#outputs","text":"successfully_processed (Boolean) hc_g_vcf (File?) hc_g_tbi (File?) hc_bamout (File?) hc_baiout (File?) hc_raw_vcf (File?) hc_raw_tbi (File?) hc_rescored_vcf (File?) hc_rescored_tbi (File?)","title":"Outputs"},{"location":"workflows/SRWholeGenome_Pf_Niare_VETS/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/","text":"SRWholeGenome_Pf_Niare_VQSR SRWholeGenome_Pf_Niare_VQSR author Jonn Smith description This workflow replicates the single-sample pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions. Inputs Required aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. genotype_gvcfs_intervals (File, required ): Intervals over which to batch Joint Genotyping. participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations vcf_calling_interval_list (File, required ): Intervals over which to call variants. vqsr_sites_vcf (File, required ): Sites-only VCF to use with VQSR for training. vqsr_sites_vcf_index (File, required ): VCF index of vqsr_sites_vcf Optional ApplyVqsrIndel.runtime_attr_override (RuntimeAttr?) ApplyVqsrSnp.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeRawHCTbi.name (String?) FinalizeRawHCTbi.runtime_attr_override (RuntimeAttr?) FinalizeRawHCVcf.name (String?) FinalizeRawHCVcf.runtime_attr_override (RuntimeAttr?) FinalizeRecalibratedVcf.name (String?) FinalizeRecalibratedVcf.runtime_attr_override (RuntimeAttr?) FinalizeRecalibratedVcfIndex.name (String?) FinalizeRecalibratedVcfIndex.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MergeMultiAllelicSitesPostRecalibration.runtime_attr_override (RuntimeAttr?) NormalizeVcfPreVqsr.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) VariantRecalibratorIndel.runtime_attr_override (RuntimeAttr?) VariantRecalibratorSnp.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.dbsnp_vcf (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) Defaults call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. contigs_names_to_ignore (Array[String], default=[\"Pf3D7_API_v3\"]): Array of names of contigs to ignore for the purposes of reporting variants. mito_contig (String, default=\"Pf3D7_MIT_v3\"): Name of the mitochondrial contig. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. NormalizeVcfPreVqsr.batch_size (Int, default=100) RenameRawHcVcf.is_gvcf (Boolean, default=false) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.MergeGVCFs.is_gvcf (Boolean, default=false) Outputs successfully_processed (Boolean) hc_g_vcf (File?) hc_g_tbi (File?) hc_bamout (File?) hc_baiout (File?) hc_raw_vcf (File?) hc_raw_tbi (File?) hc_rescored_vcf (File?) hc_rescored_tbi (File?) Dot Diagram","title":"SRWholeGenome_Pf_Niare_VQSR"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#srwholegenome_pf_niare_vqsr","text":"","title":"SRWholeGenome_Pf_Niare_VQSR"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#srwholegenome_pf_niare_vqsr_1","text":"author Jonn Smith description This workflow replicates the single-sample pipeline from Niare et al. (https://doi.org/10.1186/s12936-023-04632-0) using LRMA conventions.","title":"SRWholeGenome_Pf_Niare_VQSR"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#inputs","text":"","title":"Inputs"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#required","text":"aligned_bais (Array[File], required ): Array of aligned bam indices to process. Order must correspond to aligned_bams . aligned_bams (Array[File], required ): Array of aligned bam files to process. gcs_out_root_dir (String, required ): GCS Bucket into which to finalize outputs. genotype_gvcfs_intervals (File, required ): Intervals over which to batch Joint Genotyping. participant_name (String, required ): The unique identifier of this sample being processed. ref_map_file (File, required ): Reference map file indicating reference sequence and auxillary file locations vcf_calling_interval_list (File, required ): Intervals over which to call variants. vqsr_sites_vcf (File, required ): Sites-only VCF to use with VQSR for training. vqsr_sites_vcf_index (File, required ): VCF index of vqsr_sites_vcf","title":"Required"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#optional","text":"ApplyVqsrIndel.runtime_attr_override (RuntimeAttr?) ApplyVqsrSnp.runtime_attr_override (RuntimeAttr?) FinalizeHCBaiOut.name (String?) FinalizeHCBaiOut.runtime_attr_override (RuntimeAttr?) FinalizeHCBamOut.name (String?) FinalizeHCBamOut.runtime_attr_override (RuntimeAttr?) FinalizeHCGTbi.name (String?) FinalizeHCGTbi.runtime_attr_override (RuntimeAttr?) FinalizeHCGVcf.name (String?) FinalizeHCGVcf.runtime_attr_override (RuntimeAttr?) FinalizeRawHCTbi.name (String?) FinalizeRawHCTbi.runtime_attr_override (RuntimeAttr?) FinalizeRawHCVcf.name (String?) FinalizeRawHCVcf.runtime_attr_override (RuntimeAttr?) FinalizeRecalibratedVcf.name (String?) FinalizeRecalibratedVcf.runtime_attr_override (RuntimeAttr?) FinalizeRecalibratedVcfIndex.name (String?) FinalizeRecalibratedVcfIndex.runtime_attr_override (RuntimeAttr?) MergeAllReads.runtime_attr_override (RuntimeAttr?) MergeMultiAllelicSitesPostRecalibration.runtime_attr_override (RuntimeAttr?) NormalizeVcfPreVqsr.runtime_attr_override (RuntimeAttr?) RenameRawHcGvcf.runtime_attr_override (RuntimeAttr?) RenameRawHcVcf.runtime_attr_override (RuntimeAttr?) SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?) VariantRecalibratorIndel.runtime_attr_override (RuntimeAttr?) VariantRecalibratorSnp.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CallVariantsWithHC.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.dbsnp_vcf (String?) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.IndexBamout.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeGVCFs.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.MergeVariantCalledBamOuts.runtime_attr_override (RuntimeAttr?) CallVariantsWithHaplotypeCaller.SmallVariantsScatterPrep.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#defaults","text":"call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. contigs_names_to_ignore (Array[String], default=[\"Pf3D7_API_v3\"]): Array of names of contigs to ignore for the purposes of reporting variants. mito_contig (String, default=\"Pf3D7_MIT_v3\"): Name of the mitochondrial contig. CallVariantsWithHaplotypeCaller.call_vars_on_mitochondria (Boolean, default=false): If true, will call variants on the mitochondrial contig. NormalizeVcfPreVqsr.batch_size (Int, default=100) RenameRawHcVcf.is_gvcf (Boolean, default=false) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity (Float, default=0.001) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.heterozygosity_stdev (Float, default=0.01) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.indel_heterozygosity (Float, default=0.000125) CallVariantsWithHaplotypeCaller.CollapseGVCFtoVCF.keep_combined_raw_annotations (Boolean, default=false) CallVariantsWithHaplotypeCaller.MergeGVCFs.is_gvcf (Boolean, default=false)","title":"Defaults"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#outputs","text":"successfully_processed (Boolean) hc_g_vcf (File?) hc_g_tbi (File?) hc_bamout (File?) hc_baiout (File?) hc_raw_vcf (File?) hc_raw_tbi (File?) hc_rescored_vcf (File?) hc_rescored_tbi (File?)","title":"Outputs"},{"location":"workflows/SRWholeGenome_Pf_Niare_VQSR/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SampleLevelAlignedMetrics/","text":"SampleLevelAlignedMetrics SampleLevelAlignedMetrics description A utility (sub-)workflow to compute coverage on sample-leve BAM, and optionally over a provided BED file Inputs Required aligned_bai (File, required ): Index for the aligned BAM file aligned_bam (File, required ): Aligned BAM file ref_fasta (File, required ): Reference FASTA file Optional bed_to_compute_coverage (File?): Optional BED file to compute coverage over ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) MosDepthOverBed.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) cov_over_region.runtime_attr_override (RuntimeAttr?) Outputs bed_cov_summary (File?) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) reads_stats (Map[String,Float]) Dot Diagram","title":"SampleLevelAlignedMetrics"},{"location":"workflows/SampleLevelAlignedMetrics/#samplelevelalignedmetrics","text":"","title":"SampleLevelAlignedMetrics"},{"location":"workflows/SampleLevelAlignedMetrics/#samplelevelalignedmetrics_1","text":"description A utility (sub-)workflow to compute coverage on sample-leve BAM, and optionally over a provided BED file","title":"SampleLevelAlignedMetrics"},{"location":"workflows/SampleLevelAlignedMetrics/#inputs","text":"","title":"Inputs"},{"location":"workflows/SampleLevelAlignedMetrics/#required","text":"aligned_bai (File, required ): Index for the aligned BAM file aligned_bam (File, required ): Aligned BAM file ref_fasta (File, required ): Reference FASTA file","title":"Required"},{"location":"workflows/SampleLevelAlignedMetrics/#optional","text":"bed_to_compute_coverage (File?): Optional BED file to compute coverage over ComputeGenomeLength.runtime_attr_override (RuntimeAttr?) MosDepthOverBed.runtime_attr_override (RuntimeAttr?) NanoPlotFromBam.runtime_attr_override (RuntimeAttr?) cov_over_region.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SampleLevelAlignedMetrics/#outputs","text":"bed_cov_summary (File?) aligned_num_reads (Float) aligned_num_bases (Float) aligned_frac_bases (Float) aligned_est_fold_cov (Float) aligned_read_length_mean (Float) aligned_read_length_median (Float) aligned_read_length_stdev (Float) aligned_read_length_N50 (Float) average_identity (Float) median_identity (Float) reads_stats (Map[String,Float])","title":"Outputs"},{"location":"workflows/SampleLevelAlignedMetrics/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/Sniffles2/","text":"Sniffles2 Sniffles2 description This workflow calls SV candidates using Sniffles2 population mode. Inputs Required prefix (String, required ): prefix for output files sampleBAIs (Array[File], required ): GCS paths to aligned BAM files indices from multiple samples sampleBAMs (Array[File], required ): GCS paths to aligned BAM files from multiple samples sampleIDs (Array[String], required ): matching sample IDs of the BAMs Optional MergeCall.runtime_attr_override (RuntimeAttr?) SampleSV.runtime_attr_override (RuntimeAttr?) Defaults minsvlen (Int, default=50): Minimum SV length in bp Outputs single_snf (Array[File]) multisample_vcf (File) Dot Diagram","title":"Sniffles2"},{"location":"workflows/Sniffles2/#sniffles2","text":"","title":"Sniffles2"},{"location":"workflows/Sniffles2/#sniffles2_1","text":"description This workflow calls SV candidates using Sniffles2 population mode.","title":"Sniffles2"},{"location":"workflows/Sniffles2/#inputs","text":"","title":"Inputs"},{"location":"workflows/Sniffles2/#required","text":"prefix (String, required ): prefix for output files sampleBAIs (Array[File], required ): GCS paths to aligned BAM files indices from multiple samples sampleBAMs (Array[File], required ): GCS paths to aligned BAM files from multiple samples sampleIDs (Array[String], required ): matching sample IDs of the BAMs","title":"Required"},{"location":"workflows/Sniffles2/#optional","text":"MergeCall.runtime_attr_override (RuntimeAttr?) SampleSV.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/Sniffles2/#defaults","text":"minsvlen (Int, default=50): Minimum SV length in bp","title":"Defaults"},{"location":"workflows/Sniffles2/#outputs","text":"single_snf (Array[File]) multisample_vcf (File)","title":"Outputs"},{"location":"workflows/Sniffles2/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/SvQCPlots/","text":"SvQCPlots PlotSVQCMetrics description This workflow generates\u2014for one or more samples\u2014summaries and stats on the provided SV callers and their corresponding VCFs. Inputs Required callers (Array[String], required ): List of SV callers cohort_name (String, required ) coverage_metrics (Array[Float], required ): List of coverage metrics for each sample. Order must match the order of samples. gcs_out_root_dir (String, required ) matching_vcfs (Array[Array[File]], required ) output_plot_notebook_name (String, required ): Name of the output plot notebook reference_name (String, required ): Reference genome name samples (Array[String], required ): List of sample names. Order must match the order of coverage_metrics. Optional SaveHTML.keyfile (File?) SaveHTML.name (String?) SaveHTML.runtime_attr_override (RuntimeAttr?) SaveNotebook.keyfile (File?) SaveNotebook.runtime_attr_override (RuntimeAttr?) SavePlotPDFs.keyfile (File?) SavePlotPDFs.runtime_attr_override (RuntimeAttr?) SaveStatsByCoverage.keyfile (File?) SaveStatsByCoverage.runtime_attr_override (RuntimeAttr?) SaveStatsBySVtype.keyfile (File?) SaveStatsBySVtype.runtime_attr_override (RuntimeAttr?) addCoverageToSVstats.runtime_attr_override (RuntimeAttr?) bcfQuerySV.runtime_attr_override (RuntimeAttr?) compileSVstats.runtime_attr_override (RuntimeAttr?) concatSVstats.runtime_attr_override (RuntimeAttr?) plotSVQCMetrics.runtime_attr_override (RuntimeAttr?) Outputs SvQCPlotsMisc (Map[String,String]) SvQCPlotsHTML (File) Dot Diagram","title":"SvQCPlots"},{"location":"workflows/SvQCPlots/#svqcplots","text":"","title":"SvQCPlots"},{"location":"workflows/SvQCPlots/#plotsvqcmetrics","text":"description This workflow generates\u2014for one or more samples\u2014summaries and stats on the provided SV callers and their corresponding VCFs.","title":"PlotSVQCMetrics"},{"location":"workflows/SvQCPlots/#inputs","text":"","title":"Inputs"},{"location":"workflows/SvQCPlots/#required","text":"callers (Array[String], required ): List of SV callers cohort_name (String, required ) coverage_metrics (Array[Float], required ): List of coverage metrics for each sample. Order must match the order of samples. gcs_out_root_dir (String, required ) matching_vcfs (Array[Array[File]], required ) output_plot_notebook_name (String, required ): Name of the output plot notebook reference_name (String, required ): Reference genome name samples (Array[String], required ): List of sample names. Order must match the order of coverage_metrics.","title":"Required"},{"location":"workflows/SvQCPlots/#optional","text":"SaveHTML.keyfile (File?) SaveHTML.name (String?) SaveHTML.runtime_attr_override (RuntimeAttr?) SaveNotebook.keyfile (File?) SaveNotebook.runtime_attr_override (RuntimeAttr?) SavePlotPDFs.keyfile (File?) SavePlotPDFs.runtime_attr_override (RuntimeAttr?) SaveStatsByCoverage.keyfile (File?) SaveStatsByCoverage.runtime_attr_override (RuntimeAttr?) SaveStatsBySVtype.keyfile (File?) SaveStatsBySVtype.runtime_attr_override (RuntimeAttr?) addCoverageToSVstats.runtime_attr_override (RuntimeAttr?) bcfQuerySV.runtime_attr_override (RuntimeAttr?) compileSVstats.runtime_attr_override (RuntimeAttr?) concatSVstats.runtime_attr_override (RuntimeAttr?) plotSVQCMetrics.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/SvQCPlots/#outputs","text":"SvQCPlotsMisc (Map[String,String]) SvQCPlotsHTML (File)","title":"Outputs"},{"location":"workflows/SvQCPlots/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/TrainCnnFilters/","text":"TrainCnnFilters TrainCnnFilters author Jonn Smith description A workflow for training the 1D and 2D CNN filtration methods in GATK. Inputs Required bais (Array[File], required ): GCS path to index files for the bam files containing the either the mapped reads from which variants were called, or a bam-out from the variant caller that produced the input VCF files. bams (Array[File], required ): GCS path to bam files containing the either the mapped reads from which variants were called, or a bam-out from the variant caller that produced the input VCF files. ref_map_file (File, required ): table indicating reference sequence and auxillary file locations truth_beds (Array[File], required ): GCS path to bed files with confident regions for the given truth_vcfs truth_vcf_indices (Array[File], required ): GCS path to index files for VCF files containing validated variant calls (\"truth\") for the corresponding called variants in vcfs . truth_vcfs (Array[File], required ): GCS path to VCF files containing validated variant calls (\"truth\") for the corresponding called variants in vcfs . vcf_indices (Array[File], required ): GCS path to index files for called variants on which to train / test / validate the CNN models. vcfs (Array[File], required ): GCS path to VCF files containing called variants on which to train / test / validate the CNN models. Optional Create1DReferenceTensors.runtime_attr_override (RuntimeAttr?) Create2DReadTensors.runtime_attr_override (RuntimeAttr?) TrainCnn1D.runtime_attr_override (RuntimeAttr?) TrainCnn2D.runtime_attr_override (RuntimeAttr?) Defaults prefix (String, default=\"out\") TrainCnn1D.optimizer_beta1 (Float, default=0.9) TrainCnn1D.optimizer_beta2 (Float, default=0.999) TrainCnn1D.optimizer_clipnorm (Float, default=1.0) TrainCnn1D.optimizer_epsilon (Float, default=1e-08) TrainCnn1D.optimizer_learning_rate (Float, default=0.0001) TrainCnn2D.optimizer_beta1 (Float, default=0.9) TrainCnn2D.optimizer_beta2 (Float, default=0.999) TrainCnn2D.optimizer_clipnorm (Float, default=1.0) TrainCnn2D.optimizer_epsilon (Float, default=1e-08) Outputs cnn_1d_tensors (Array[File]) cnn_2d_tensors (Array[File]) cnn_1d_model_json (File) cnn_1d_model_hd5 (File) cnn_2d_model_json (File) cnn_2d_model_hd5 (File) Dot Diagram","title":"TrainCnnFilters"},{"location":"workflows/TrainCnnFilters/#traincnnfilters","text":"","title":"TrainCnnFilters"},{"location":"workflows/TrainCnnFilters/#traincnnfilters_1","text":"author Jonn Smith description A workflow for training the 1D and 2D CNN filtration methods in GATK.","title":"TrainCnnFilters"},{"location":"workflows/TrainCnnFilters/#inputs","text":"","title":"Inputs"},{"location":"workflows/TrainCnnFilters/#required","text":"bais (Array[File], required ): GCS path to index files for the bam files containing the either the mapped reads from which variants were called, or a bam-out from the variant caller that produced the input VCF files. bams (Array[File], required ): GCS path to bam files containing the either the mapped reads from which variants were called, or a bam-out from the variant caller that produced the input VCF files. ref_map_file (File, required ): table indicating reference sequence and auxillary file locations truth_beds (Array[File], required ): GCS path to bed files with confident regions for the given truth_vcfs truth_vcf_indices (Array[File], required ): GCS path to index files for VCF files containing validated variant calls (\"truth\") for the corresponding called variants in vcfs . truth_vcfs (Array[File], required ): GCS path to VCF files containing validated variant calls (\"truth\") for the corresponding called variants in vcfs . vcf_indices (Array[File], required ): GCS path to index files for called variants on which to train / test / validate the CNN models. vcfs (Array[File], required ): GCS path to VCF files containing called variants on which to train / test / validate the CNN models.","title":"Required"},{"location":"workflows/TrainCnnFilters/#optional","text":"Create1DReferenceTensors.runtime_attr_override (RuntimeAttr?) Create2DReadTensors.runtime_attr_override (RuntimeAttr?) TrainCnn1D.runtime_attr_override (RuntimeAttr?) TrainCnn2D.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/TrainCnnFilters/#defaults","text":"prefix (String, default=\"out\") TrainCnn1D.optimizer_beta1 (Float, default=0.9) TrainCnn1D.optimizer_beta2 (Float, default=0.999) TrainCnn1D.optimizer_clipnorm (Float, default=1.0) TrainCnn1D.optimizer_epsilon (Float, default=1e-08) TrainCnn1D.optimizer_learning_rate (Float, default=0.0001) TrainCnn2D.optimizer_beta1 (Float, default=0.9) TrainCnn2D.optimizer_beta2 (Float, default=0.999) TrainCnn2D.optimizer_clipnorm (Float, default=1.0) TrainCnn2D.optimizer_epsilon (Float, default=1e-08)","title":"Defaults"},{"location":"workflows/TrainCnnFilters/#outputs","text":"cnn_1d_tensors (Array[File]) cnn_2d_tensors (Array[File]) cnn_1d_model_json (File) cnn_1d_model_hd5 (File) cnn_2d_model_json (File) cnn_2d_model_hd5 (File)","title":"Outputs"},{"location":"workflows/TrainCnnFilters/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/TrioBinChildLongReads/","text":"TrioBinChildLongReads TrioBinChildLongReads description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication: De novo assembly of haplotype-resolved genomes with trio binning https://www.nature.com/articles/nbt.4277 We divide the workflow into two parts: - part one: collect k-mer stats given parental (short) reads - part two: given the k-mer stats database from part one, classify child long reads Inputs Required child_long_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of child long reads father_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of paternal origin genome_size (String, required ): an esimate on genome size of the specicies (affects k-value picking) long_read_platform (String, required ): platform of long read sequencing; currently only one of [pacbio-raw, nanopore-raw] is supported mother_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of maternal origin vm_local_monitoring_script (File, required ): GCS file holding a resouce monitoring script that runs locally and collects info for a very specific purpose workdir_name (String, required ): name of working directory Optional kmerSize (Int?): [optional] force specifying k-value in collecting k-mer stats on parents run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false AssignChildLongReads.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.MerylCount.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.MerylMergeAndSubtract.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.ParentalReadsRepartitionAndMerylConfigure.runtime_attr_override (RuntimeAttr?) Defaults child_read_assign_memoryG_est (Int, default=32): [default-valued] estimate on how many GB memory to allocate to the child longread classification step child_read_assign_threads_est (Int, default=36): [default-valued] estimate on how many threads to allocate to the child longread classification step meryl_operations_threads_est (Int, default=8): [default-valued] estimate on how many threads to allocate to k-mer stats collection step Outputs reads_assigned_to_father (File) reads_assigned_to_mother (File) unassigned_reads (File) Dot Diagram","title":"TrioBinChildLongReads"},{"location":"workflows/TrioBinChildLongReads/#triobinchildlongreads","text":"","title":"TrioBinChildLongReads"},{"location":"workflows/TrioBinChildLongReads/#triobinchildlongreads_1","text":"description A workflow that performs trio-binning of child long reads given parental (short) reads. Based on the trio-canu publication: De novo assembly of haplotype-resolved genomes with trio binning https://www.nature.com/articles/nbt.4277 We divide the workflow into two parts: - part one: collect k-mer stats given parental (short) reads - part two: given the k-mer stats database from part one, classify child long reads","title":"TrioBinChildLongReads"},{"location":"workflows/TrioBinChildLongReads/#inputs","text":"","title":"Inputs"},{"location":"workflows/TrioBinChildLongReads/#required","text":"child_long_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of child long reads father_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of paternal origin genome_size (String, required ): an esimate on genome size of the specicies (affects k-value picking) long_read_platform (String, required ): platform of long read sequencing; currently only one of [pacbio-raw, nanopore-raw] is supported mother_short_reads_bucket (String, required ): GCS bucket path holding FASTA/FASTQ of (short) reads of maternal origin vm_local_monitoring_script (File, required ): GCS file holding a resouce monitoring script that runs locally and collects info for a very specific purpose workdir_name (String, required ): name of working directory","title":"Required"},{"location":"workflows/TrioBinChildLongReads/#optional","text":"kmerSize (Int?): [optional] force specifying k-value in collecting k-mer stats on parents run_with_debug (Boolean?): [optional] whether to run in debug mode (takes significantly more disk space and more logs); defaults to false AssignChildLongReads.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.MerylCount.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.MerylMergeAndSubtract.runtime_attr_override (RuntimeAttr?) CollectParentsKmerStats.ParentalReadsRepartitionAndMerylConfigure.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/TrioBinChildLongReads/#defaults","text":"child_read_assign_memoryG_est (Int, default=32): [default-valued] estimate on how many GB memory to allocate to the child longread classification step child_read_assign_threads_est (Int, default=36): [default-valued] estimate on how many threads to allocate to the child longread classification step meryl_operations_threads_est (Int, default=8): [default-valued] estimate on how many threads to allocate to k-mer stats collection step","title":"Defaults"},{"location":"workflows/TrioBinChildLongReads/#outputs","text":"reads_assigned_to_father (File) reads_assigned_to_mother (File) unassigned_reads (File)","title":"Outputs"},{"location":"workflows/TrioBinChildLongReads/#dot-diagram","text":"","title":"Dot Diagram"},{"location":"workflows/VerifyFingerprint/","text":"VerifyFingerprint VerifyFingerprint description A workflow to check correctness of metadata on a flowcell, by genotyping it's BAM generated with its metadata, against a 'truth' genotyped VCF. Inputs Required aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting VCF collaborator_participant_id (String, required ): Collaborator participant ID collaborator_smid (String, required ): Collaborator sample ID expt_type (String, required ): There will be special treatment for 'CLR' data (minimum base quality for bases used when computing a fingerprint) fingerprint_store (String, required ): GS path to where all known fingerprinting GT'ed VCFS are stored gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations smid (String, required ): SM- prefixed ID Optional artificial_baseQ_for_CLR (Int?): An artificial value for CLR reads used for fingerprint verification (CLR reads come with all 0 base qual) use_this_fp_vcf (File?): Optional gt VCF, if provided, used for fingerprint verification (fingerprint_store, smid, collaborator_smid, collaborator_participant_id will all be ignored) CheckCLRFingerprint.runtime_attr_override (RuntimeAttr?) CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintDetailMetrics.keyfile (File?) FinalizeFingerprintDetailMetrics.name (String?) FinalizeFingerprintDetailMetrics.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintSummaryMetrics.keyfile (File?) FinalizeFingerprintSummaryMetrics.name (String?) FinalizeFingerprintSummaryMetrics.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResetCLRBaseQual.runtime_attr_override (RuntimeAttr?) Defaults FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV']) Outputs lod_expected_sample (Float) fingerprint_metrics (File) fingerprint_details (File) Dot Diagram","title":"VerifyFingerprint"},{"location":"workflows/VerifyFingerprint/#verifyfingerprint","text":"","title":"VerifyFingerprint"},{"location":"workflows/VerifyFingerprint/#verifyfingerprint_1","text":"description A workflow to check correctness of metadata on a flowcell, by genotyping it's BAM generated with its metadata, against a 'truth' genotyped VCF.","title":"VerifyFingerprint"},{"location":"workflows/VerifyFingerprint/#inputs","text":"","title":"Inputs"},{"location":"workflows/VerifyFingerprint/#required","text":"aligned_bai (File, required ) aligned_bam (File, required ): GCS path to aligned BAM file, supposed to be of the same sample as from the fingerprinting VCF collaborator_participant_id (String, required ): Collaborator participant ID collaborator_smid (String, required ): Collaborator sample ID expt_type (String, required ): There will be special treatment for 'CLR' data (minimum base quality for bases used when computing a fingerprint) fingerprint_store (String, required ): GS path to where all known fingerprinting GT'ed VCFS are stored gcs_out_root_dir (String, required ): GCS bucket to store the reads, variants, and metrics files ref_map_file (File, required ): table indicating reference sequence and auxillary file locations smid (String, required ): SM- prefixed ID","title":"Required"},{"location":"workflows/VerifyFingerprint/#optional","text":"artificial_baseQ_for_CLR (Int?): An artificial value for CLR reads used for fingerprint verification (CLR reads come with all 0 base qual) use_this_fp_vcf (File?): Optional gt VCF, if provided, used for fingerprint verification (fingerprint_store, smid, collaborator_smid, collaborator_participant_id will all be ignored) CheckCLRFingerprint.runtime_attr_override (RuntimeAttr?) CheckFingerprint.runtime_attr_override (RuntimeAttr?) ExtractRelevantGenotypingReads.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintDetailMetrics.keyfile (File?) FinalizeFingerprintDetailMetrics.name (String?) FinalizeFingerprintDetailMetrics.runtime_attr_override (RuntimeAttr?) FinalizeFingerprintSummaryMetrics.keyfile (File?) FinalizeFingerprintSummaryMetrics.name (String?) FinalizeFingerprintSummaryMetrics.runtime_attr_override (RuntimeAttr?) GetVCFSampleName.runtime_attr_override (RuntimeAttr?) ResetCLRBaseQual.runtime_attr_override (RuntimeAttr?)","title":"Optional"},{"location":"workflows/VerifyFingerprint/#defaults","text":"FilterGenotypesVCF.filters (Array[String], default=['_random\\t', '_decoy\\t', '_alt\\t', '^chrUn', '^HLA', '^EBV'])","title":"Defaults"},{"location":"workflows/VerifyFingerprint/#outputs","text":"lod_expected_sample (Float) fingerprint_metrics (File) fingerprint_details (File)","title":"Outputs"},{"location":"workflows/VerifyFingerprint/#dot-diagram","text":"","title":"Dot Diagram"}]}