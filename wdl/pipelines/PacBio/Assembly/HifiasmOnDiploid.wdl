version 1.0

import "../../../tasks/Assembly/Hifiasm.wdl"
import "../../../tasks/QC/Quast.wdl" as QuastEval

import "../../../tasks/Visualization/VisualizeResourceUsage.wdl"
import "../../../tasks/Utility/GeneralUtils.wdl" as GU
import "../../../tasks/Utility/Finalize.wdl" as FF

import "../../../pipelines/TechAgnostic/Utility/SaveFilesToDestination.wdl" as SAVE

workflow Assemble {

    meta {
        description:
        "Runs Hifiasm on diploid organism, and evaluate the assembly with QUAST."
        note:
        "We run two HiFiasm jobs, one for getting alternative contigs and one for getting the haplotigs. And we take the primary assembly from the first job. Note that we've only tested on diploid organisms."
    }

    parameter_meta {
        reads:
        "reads (in fasta or fastq format, compressed or uncompressed)"
        prefix:
        "prefix to apply to assembly output filenames"

        ref_fasta_for_eval:
        "Reference Fasta used for evaluating the assembly; providing this will significantly slow down the whole pipeline since evaluating assembly against a reference is slow."

        gcp_zones:
        "GCP zones for carrying out the compute; set this to where you data is to save $."

        primary_alt_outputs:
        "files generated by Hifiasm in the primary-alt mode"

        hap_outputs:
        "files generated by Hifiasm in the haplotype-resolve mode"

        asm_summary:
        # note: "It should be a Map[String, Int] conceptually, but given that WDL/Cromwell/Terra enforces a Int32 max value on Int types, human genomes sizes overflow that value, hence we use String"
        "summary on critical metrics on the [primary, H1, H2] FASTA."

        asm_metrics_files:
        "a collection of metrics files produced with QUAST"
    }

    input {
        File reads
        String prefix

        File? ref_fasta_for_eval

        String gcs_out_root_dir

        Int? memory_override
        Array[String] gcp_zones = ['us-central1-a', 'us-central1-b', 'us-central1-c', 'us-central1-f']
    }

    output {
        String last_processing_date = today.yyyy_mm_dd

        ########################################
        Map[String, File] primary_alt_outputs = {
            "primary_gfa": FinalizeHifiasmPrimaryGFA.gcs_path,
            "primary_fasta": FinalizeHifiasmPrimaryFA.gcs_path,
            "primary_fa_gzi": FinalizeHifiasmPrimaryGzi.gcs_path,
            "alternate_gfa": FinalizeHifiasmAlternateGFA.gcs_path,
            "alternate_fasta": FinalizeHifiasmAlternateFA.gcs_path,
            "alternate_fa_gzi": FinalizeHifiasmAlternateGzi.gcs_path,
        }
        ########################################
        Map[String, File] hap_outputs = {
            "HapOne_GFA": FinalizeHifiasmHapOneGFA.gcs_path,
            "HapTwo_GFA": FinalizeHifiasmHapTwoGFA.gcs_path,
            "HapOne_FASTA": FinalizeHifiasmHapOneFASTA.gcs_path,
            "HapTwo_FASTA": FinalizeHifiasmHapTwoFASTA.gcs_path,
            "HapOne_FA_GZI": FinalizeHifiasmHapOneFaGzi.gcs_path,
            "HapTWO_FA_GZI": FinalizeHifiasmHapTwoFaGzi.gcs_path,
        }

        ########################################
        Map[String, String] asm_summary = SummarizeAssemblyMetrics.summary

        Map[String, File] asm_metrics_files = SaveMetricsFiles.result
    }

    String outdir = sub(gcs_out_root_dir, "/$", "")
    String asm_dir = outdir + "/assembly"
    String metrics_dir = asm_dir + "/quast"

    #########################################################################################
    # HIFIASM
    #########################################################################################
    call GU.CollapseArrayOfStrings as get_zones {input: input_array = gcp_zones, joiner = " "}
    String wdl_parsable_zones = get_zones.collapsed

    call Hifiasm.GenerateBinFiles { input:
        reads  = reads,
        prefix = prefix,
        zones = wdl_parsable_zones,
        memory_override = memory_override
    }

    call Hifiasm.AssembleForHaplotigs { input:
        reads  = reads,
        prefix = prefix,
        zones  = wdl_parsable_zones,
        bin_files = [GenerateBinFiles.ec_bin, GenerateBinFiles.ovlp_reverse_bin, GenerateBinFiles.ovlp_source_bin]
    }

    call Hifiasm.AssembleForAltContigs { input:
        reads  = reads,
        prefix = prefix,
        zones  = wdl_parsable_zones,
        bin_files = [GenerateBinFiles.ec_bin, GenerateBinFiles.ovlp_reverse_bin, GenerateBinFiles.ovlp_source_bin]
    }

    # save primary/alt
    call FF.CompressAndFinalize as FinalizeHifiasmPrimaryGFA   { input: outdir = asm_dir, file = AssembleForAltContigs.primary_gfa }
    call FF.FinalizeToFile      as FinalizeHifiasmPrimaryFA    { input: outdir = asm_dir, file = AssembleForAltContigs.primary_tigs }
    call FF.FinalizeToFile      as FinalizeHifiasmPrimaryGzi   { input: outdir = asm_dir, file = AssembleForAltContigs.primary_fa_gzi }

    call FF.CompressAndFinalize as FinalizeHifiasmAlternateGFA   { input: outdir = asm_dir, file = AssembleForAltContigs.alternate_gfa }
    call FF.FinalizeToFile      as FinalizeHifiasmAlternateFA    { input: outdir = asm_dir, file = AssembleForAltContigs.alternate_tigs }
    call FF.FinalizeToFile      as FinalizeHifiasmAlternateGzi   { input: outdir = asm_dir, file = AssembleForAltContigs.alternate_tigs_gzi }

    # save H1/H2
    call FF.FinalizeToFile as FinalizeHifiasmHapOneGFA   { input: outdir = asm_dir, file = AssembleForHaplotigs.hap1_gfa }
    call FF.FinalizeToFile as FinalizeHifiasmHapOneFASTA { input: outdir = asm_dir, file = AssembleForHaplotigs.hap1_tigs }
    call FF.FinalizeToFile as FinalizeHifiasmHapOneFaGzi { input: outdir = asm_dir, file = AssembleForHaplotigs.hap1_tig_gzi }
    call FF.FinalizeToFile as FinalizeHifiasmHapTwoGFA   { input: outdir = asm_dir, file = AssembleForHaplotigs.hap2_gfa }
    call FF.FinalizeToFile as FinalizeHifiasmHapTwoFASTA { input: outdir = asm_dir, file = AssembleForHaplotigs.hap2_tigs }
    call FF.FinalizeToFile as FinalizeHifiasmHapTwoFaGzi { input: outdir = asm_dir, file = AssembleForHaplotigs.hap2_tig_gzi }

    # save more files for debugging
    call FF.FinalizeToFile as FinalizeHifiasmHapOneLowQBed { input: outdir = asm_dir, file = AssembleForHaplotigs.hap1_lowQ_bed }
    call FF.FinalizeToFile as FinalizeHifiasmHapTwoLowQBed { input: outdir = asm_dir, file = AssembleForHaplotigs.hap2_lowQ_bed }
    call FF.FinalizeToFile as FinalizeHifiasmPrimaryLowQBed { input: outdir = asm_dir, file = AssembleForAltContigs.primary_lowQ_bed }
    call FF.FinalizeToFile as FinalizeHifiasmAlternateLowQBed { input: outdir = asm_dir, file = AssembleForAltContigs.alternate_lowQ_bed }
    call FF.FinalizeToFile as FinalizeHifiasmRawUtigGraph  { input: outdir = asm_dir, file = AssembleForHaplotigs.raw_unitig_graph }
    call FF.FinalizeToFile as FinalizeHifiasmRawUtigGraphRawUtigGraph { input: outdir = asm_dir, file = AssembleForHaplotigs.raw_unitig_lowQ_bed }

    #########################################################################################
    # QUAST
    #########################################################################################
    # todo: assumes ploidy 2
    call QuastEval.Quast as primary_h0_h1_quast { input:
        ref = ref_fasta_for_eval,
        is_large = true,
        assemblies = [AssembleForAltContigs.primary_tigs,
                      AssembleForHaplotigs.hap1_tigs,
                      AssembleForHaplotigs.hap2_tigs]
    }

    call QuastEval.SummarizeQuastReport as primary_h0_h1_quast_summary { input:
        quast_report_txt = primary_h0_h1_quast.report_txt
    }

    call QuastEval.SummarizeAssemblyMetrics { input:
        quast_summary = primary_h0_h1_quast_summary.quast_metrics_together
    }

    #########################################################################################
    # save misc metrics
    #########################################################################################
    FinalizationManifestLine a = object
                                {files_to_save: [primary_h0_h1_quast.report_html],
                                 file_names: ['~{prefix}.quast-report.html'],
                                 is_singleton_file: true,
                                 destination: metrics_dir,
                                 output_attribute_name: "quast_html"}
    FinalizationManifestLine b = object
                                {files_to_save: [primary_h0_h1_quast_summary.quast_metrics_together],
                                 file_names: ['~{prefix}.quast-summary.txt'],
                                 is_singleton_file: true,
                                 destination: metrics_dir,
                                 output_attribute_name: "quast_summary"}

    FinalizationManifestLine c = object
                                {files_to_save: flatten([select_all([primary_h0_h1_quast.contigs_reports]),
                                                         primary_h0_h1_quast.plots,
                                                         primary_h0_h1_quast.report_in_various_formats,
                                                         primary_h0_h1_quast_summary.quast_metrics
                                                        ]),
                                 is_singleton_file: false,
                                 destination: metrics_dir,
                                 output_attribute_name: "quast_reports"}

    call VisualizeResourceUsage.SimpleRscript as VisualizeHifiasmBingenResoureUsage { input:
        resource_log = GenerateBinFiles.resouce_monitor_log,
        output_pdf_name = "~{prefix}.hifiasm.resources-usage.bin-only.pdf",
        plot_title = "Hifiasm, on input ~{prefix}, --bin-only"
    }
    FinalizationManifestLine d = object
                                {files_to_save: [GenerateBinFiles.log, AssembleForAltContigs.log, AssembleForHaplotigs.log,
                                                 VisualizeHifiasmBingenResoureUsage.plot_pdf],
                                 file_names: ["~{prefix}.hifiasm-binonly.log", "~{prefix}.hifiasm-altmode.log", "~{prefix}.hifiasm-hapmode.log",
                                              basename(VisualizeHifiasmBingenResoureUsage.plot_pdf)],
                                 is_singleton_file: false,
                                 destination: asm_dir,
                                 output_attribute_name: "hifiasm_misc_metrics_files"}

    call SAVE.SaveFilestoDestination as SaveMetricsFiles { input:
        instructions = [a, b, c, d],
        already_finalized = [{"HapOneLowQBed": FinalizeHifiasmHapOneLowQBed.gcs_path,
                              "HapTwoLowQBed": FinalizeHifiasmHapTwoLowQBed.gcs_path,
                              "PrimaryLowQBed": FinalizeHifiasmPrimaryLowQBed.gcs_path,
                              "AlternateLowQBed": FinalizeHifiasmAlternateLowQBed.gcs_path,
                              "RawUtigGraph": FinalizeHifiasmRawUtigGraph.gcs_path,
                              "RawUtigGraphRawUtigGraph": FinalizeHifiasmRawUtigGraphRawUtigGraph.gcs_path,}]
    }
    #########################################################################################
    call GU.GetTodayDate as today {}
}
