# Workflow for creating a GATK GermlineCNVCaller denoising model and generating calls given a list of normal samples. Supports both WGS and WES.
#
# Notes:
#
# - The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the
#   GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists).
#   These intervals will be padded on both sides by the amount specified by padding (default 250)
#   and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning,
#   e.g., for WES).  For WGS, the intervals should simply cover the chromosomes of interest.
#
# - Intervals can be blacklisted from coverage collection and all downstream steps by using the blacklist_intervals
#   argument, which accepts formats compatible with the GATK -XL argument
#   (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists).
#   This may be useful for excluding centromeric regions, etc. from analysis.  Alternatively, these regions may
#   be manually filtered from the final callset.
#
#############

version 1.0

import "../../../tasks/Utility/cnv_common_tasks.wdl" as CNVTasks

import "LRProcessIntervalsForCnv.wdl" as PreProcess

import "../../../tasks/Utility/Finalize.wdl" as FF


workflow LRCNVs {

    meta {
        description: "Workflow for creating a GATK GermlineCNVCaller denoising model and generating calls given a list of normal samples. Supports both WGS and WES."
        notes: "<br /> - The intervals argument is required for both WGS and WES workflows and accepts formats compatible with the GATK -L argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). These intervals will be padded on both sides by the amount specified by padding (default 250) and split into bins of length specified by bin_length (default 1000; specify 0 to skip binning, e.g., for WES).  For WGS, the intervals should simply cover the chromosomes of interest. <br />  - Intervals can be blacklisted from coverage collection and all downstream steps by using the blacklist_intervals argument, which accepts formats compatible with the GATK -XL argument (see https://gatkforums.broadinstitute.org/gatk/discussion/11009/intervals-and-interval-lists). This may be useful for excluding centromeric regions, etc. from analysis.  Alternatively, these regions may be manually filtered from the final callset."
    }
    parameter_meta {
        intervals: "Required.  Intervals file (in .bed format) containing the regions to be analyzed.  For WGS, this should simply cover the chromosomes of interest.  For WES, this should cover the target regions to be analyzed."
        blacklist_intervals: "Optional.  Intervals file (in .bed format) containing the regions to be excluded from analysis.  For WGS, this may be useful for excluding centromeric regions, etc. from analysis.  For WES, this may be useful for excluding regions that are not covered by the target capture kit."
        normal_bams: "Required.  Array of BAM files for the normal samples to be used for denoising model generation."
        normal_bais: "Required.  Array of BAI index files for the normal samples to be used for denoising model generation."
        cohort_entity_id: "Required.  String identifier for the cohort used for denoising model generation."
        contig_ploidy_priors: "Required.  File containing contig ploidy priors."
        ref_map_file: "Required.  File containing the reference copy-number map."
        num_intervals_per_scatter: "Optional.  Number of intervals to process in each scatter.  Default is 10000."
        gatk_docker: "Optional.  Docker image for the GATK tool.  Default is broadinstitute/gatk:broadinstitute/gatk:4.1.7.0."
    }

    input {
        ##################################
        #### required basic arguments ####
        ##################################
        String gcs_out_root_dir
        String run_uuid  # used to distinguish different runs, can be empty if not so desired

        ##################################
        #### required basic arguments ####
        ##################################
        File intervals
        File? blacklist_intervals
        Array[String]+ normal_bams
        Array[String]+ normal_bais
        String cohort_entity_id
        File contig_ploidy_priors
        File ref_map_file
        Int num_intervals_per_scatter = 10000
        String gatk_docker = "broadinstitute/gatk:4.1.7.0"

        ##################################
        #### optional basic arguments ####
        ##################################
        # If true, AnnotateIntervals will be run to create GC annotations and explicit
        # GC correction will be performed by the model generated by
        Boolean? do_explicit_gc_correction
        File? gatk4_jar_override
        Int? preemptible_attempts

        ####################################################
        #### optional arguments for PreprocessIntervals ####
        ####################################################
        Int? padding
        Int? bin_length = 100000

        ##################################################
        #### optional arguments for AnnotateIntervals ####
        ##################################################
        File? mappability_track_bed
        File? mappability_track_bed_idx
        File? segmental_duplication_track_bed
        File? segmental_duplication_track_bed_idx
        Int? feature_query_lookahead
        Int? mem_gb_for_annotate_intervals

        #################################################
        #### optional arguments for FilterIntervals ####
        ################################################
        File? blacklist_intervals_for_filter_intervals
        Float? minimum_gc_content
        Float? maximum_gc_content
        Float? minimum_mappability
        Float? maximum_mappability
        Float? minimum_segmental_duplication_content
        Float? maximum_segmental_duplication_content
        Int? low_count_filter_count_threshold
        Float? low_count_filter_percentage_of_samples
        Float? extreme_count_filter_minimum_percentile
        Float? extreme_count_filter_maximum_percentile
        Float? extreme_count_filter_percentage_of_samples
        Int? mem_gb_for_filter_intervals

        ##############################################
        #### optional arguments for CollectCounts ####
        ##############################################
        String? collect_counts_format
        Boolean? collect_counts_enable_indexing
        Int? mem_gb_for_collect_counts

        ########################################################################
        #### optional arguments for DetermineGermlineContigPloidyCohortMode ####
        ########################################################################
        Float? ploidy_mean_bias_standard_deviation
        Float? ploidy_mapping_error_rate
        Float? ploidy_global_psi_scale
        Float? ploidy_sample_psi_scale
        Int? mem_gb_for_determine_germline_contig_ploidy
        Int? cpu_for_determine_germline_contig_ploidy

        ############################################################
        #### optional arguments for GermlineCNVCallerCohortMode ####
        ############################################################
        Float? gcnv_p_alt
        Float? gcnv_p_active
        Float? gcnv_cnv_coherence_length
        Float? gcnv_class_coherence_length
        Int? gcnv_max_copy_number
        Int? mem_gb_for_germline_cnv_caller
        Int? cpu_for_germline_cnv_caller

        # optional arguments for germline CNV denoising model
        Int? gcnv_max_bias_factors
        Float? gcnv_mapping_error_rate
        Float? gcnv_interval_psi_scale
        Float? gcnv_sample_psi_scale
        Float? gcnv_depth_correction_tau
        Float? gcnv_log_mean_bias_standard_deviation
        Float? gcnv_init_ard_rel_unexplained_variance
        Int? gcnv_num_gc_bins
        Float? gcnv_gc_curve_standard_deviation
        String? gcnv_copy_number_posterior_expectation_mode
        Boolean? gcnv_enable_bias_factors
        Int? gcnv_active_class_padding_hybrid_mode

        # optional arguments for Hybrid ADVI
        Float? gcnv_learning_rate
        Float? gcnv_adamax_beta_1
        Float? gcnv_adamax_beta_2
        Int? gcnv_log_emission_samples_per_round
        Float? gcnv_log_emission_sampling_median_rel_error
        Int? gcnv_log_emission_sampling_rounds
        Int? gcnv_max_advi_iter_first_epoch
        Int? gcnv_max_advi_iter_subsequent_epochs
        Int? gcnv_min_training_epochs
        Int? gcnv_max_training_epochs
        Float? gcnv_initial_temperature
        Int? gcnv_num_thermal_advi_iters
        Int? gcnv_convergence_snr_averaging_window
        Float? gcnv_convergence_snr_trigger_threshold
        Int? gcnv_convergence_snr_countdown_window
        Int? gcnv_max_calling_iters
        Float? gcnv_caller_update_convergence_threshold
        Float? gcnv_caller_internal_admixing_rate
        Float? gcnv_caller_external_admixing_rate
        Boolean? gcnv_disable_annealing

        ###################################################
        #### arguments for PostprocessGermlineCNVCalls ####
        ###################################################
        Int ref_copy_number_autosomal_contigs = 2
        Array[String]? allosomal_contigs

        ##########################
        #### arguments for QC ####
        ##########################
        Int maximum_number_events_per_sample = 1000
    }

    #############################################################################
    String workflow_name = 'LRgCNV'
    #############################################################################
    # preprocess
    call PreProcess.LRProcessIntervalsForCnv as PP {
        input:
            gcs_out_root_dir = gcs_out_root_dir,
            run_uuid = run_uuid,

            intervals = intervals,
            blacklist_intervals = blacklist_intervals,
            normal_bams = normal_bams,
            normal_bais = normal_bais,
            cohort_entity_id = cohort_entity_id,
            contig_ploidy_priors = contig_ploidy_priors,
            ref_map_file = ref_map_file,
            gatk_docker = gatk_docker,

            do_explicit_gc_correction = do_explicit_gc_correction,
            gatk4_jar_override = gatk4_jar_override,
            preemptible_attempts = preemptible_attempts,

            padding = padding,
            bin_length = bin_length,

            mappability_track_bed = mappability_track_bed,
            mappability_track_bed_idx = mappability_track_bed_idx,
            segmental_duplication_track_bed = segmental_duplication_track_bed,
            segmental_duplication_track_bed_idx = segmental_duplication_track_bed_idx,
            feature_query_lookahead = feature_query_lookahead,
            mem_gb_for_annotate_intervals = mem_gb_for_annotate_intervals,

            blacklist_intervals_for_filter_intervals = blacklist_intervals_for_filter_intervals,
            minimum_gc_content = minimum_gc_content,
            maximum_gc_content = maximum_gc_content,
            minimum_mappability = minimum_mappability,
            maximum_mappability = maximum_mappability,
            minimum_segmental_duplication_content = minimum_segmental_duplication_content,
            maximum_segmental_duplication_content = maximum_segmental_duplication_content,
            low_count_filter_count_threshold = low_count_filter_count_threshold,
            low_count_filter_percentage_of_samples = low_count_filter_percentage_of_samples,
            extreme_count_filter_minimum_percentile = extreme_count_filter_minimum_percentile,
            extreme_count_filter_maximum_percentile = extreme_count_filter_maximum_percentile,
            extreme_count_filter_percentage_of_samples = extreme_count_filter_percentage_of_samples,
            mem_gb_for_filter_intervals = mem_gb_for_filter_intervals,

            collect_counts_format = collect_counts_format,
            collect_counts_enable_indexing = collect_counts_enable_indexing,
            mem_gb_for_collect_counts = mem_gb_for_collect_counts,

            ploidy_mean_bias_standard_deviation = ploidy_mean_bias_standard_deviation,
            ploidy_mapping_error_rate = ploidy_mapping_error_rate,
            ploidy_global_psi_scale = ploidy_global_psi_scale,
            ploidy_sample_psi_scale = ploidy_sample_psi_scale,
            mem_gb_for_determine_germline_contig_ploidy = mem_gb_for_determine_germline_contig_ploidy,
            cpu_for_determine_germline_contig_ploidy = cpu_for_determine_germline_contig_ploidy
    }
    #############################################################################
    # main
    call CNVTasks.ScatterIntervals {
        input:
            interval_list = PP.filtered_intervals,
            num_intervals_per_scatter = num_intervals_per_scatter,
            gatk_docker = gatk_docker,
            preemptible_attempts = preemptible_attempts
    }

    scatter (scatter_index in range(length(ScatterIntervals.scattered_interval_lists))) {
        call GermlineCNVCallerCohortMode {
            input:
                scatter_index = scatter_index,
                cohort_entity_id = cohort_entity_id,
                read_count_files = PP.read_counts,
                contig_ploidy_calls_tar = PP.contig_ploidy_calls_tar,
                intervals = ScatterIntervals.scattered_interval_lists[scatter_index],
                annotated_intervals = PP.annotated_intervals,
                gatk4_jar_override = gatk4_jar_override,
                gatk_docker = gatk_docker,
                mem_gb = mem_gb_for_germline_cnv_caller,
                cpu = cpu_for_germline_cnv_caller,
                p_alt = gcnv_p_alt,
                p_active = gcnv_p_active,
                cnv_coherence_length = gcnv_cnv_coherence_length,
                class_coherence_length = gcnv_class_coherence_length,
                max_copy_number = gcnv_max_copy_number,
                max_bias_factors = gcnv_max_bias_factors,
                mapping_error_rate = gcnv_mapping_error_rate,
                interval_psi_scale = gcnv_interval_psi_scale,
                sample_psi_scale = gcnv_sample_psi_scale,
                depth_correction_tau = gcnv_depth_correction_tau,
                log_mean_bias_standard_deviation = gcnv_log_mean_bias_standard_deviation,
                init_ard_rel_unexplained_variance = gcnv_init_ard_rel_unexplained_variance,
                num_gc_bins = gcnv_num_gc_bins,
                gc_curve_standard_deviation = gcnv_gc_curve_standard_deviation,
                copy_number_posterior_expectation_mode = gcnv_copy_number_posterior_expectation_mode,
                enable_bias_factors = gcnv_enable_bias_factors,
                active_class_padding_hybrid_mode = gcnv_active_class_padding_hybrid_mode,
                learning_rate = gcnv_learning_rate,
                adamax_beta_1 = gcnv_adamax_beta_1,
                adamax_beta_2 = gcnv_adamax_beta_2,
                log_emission_samples_per_round = gcnv_log_emission_samples_per_round,
                log_emission_sampling_median_rel_error = gcnv_log_emission_sampling_median_rel_error,
                log_emission_sampling_rounds = gcnv_log_emission_sampling_rounds,
                max_advi_iter_first_epoch = gcnv_max_advi_iter_first_epoch,
                max_advi_iter_subsequent_epochs = gcnv_max_advi_iter_subsequent_epochs,
                min_training_epochs = gcnv_min_training_epochs,
                max_training_epochs = gcnv_max_training_epochs,
                initial_temperature = gcnv_initial_temperature,
                num_thermal_advi_iters = gcnv_num_thermal_advi_iters,
                convergence_snr_averaging_window = gcnv_convergence_snr_averaging_window,
                convergence_snr_trigger_threshold = gcnv_convergence_snr_trigger_threshold,
                convergence_snr_countdown_window = gcnv_convergence_snr_countdown_window,
                max_calling_iters = gcnv_max_calling_iters,
                caller_update_convergence_threshold = gcnv_caller_update_convergence_threshold,
                caller_internal_admixing_rate = gcnv_caller_internal_admixing_rate,
                caller_external_admixing_rate = gcnv_caller_external_admixing_rate,
                disable_annealing = gcnv_disable_annealing,
                preemptible_attempts = preemptible_attempts
        }
    }

    Array[Array[File]] call_tars_sample_by_shard = transpose(GermlineCNVCallerCohortMode.gcnv_call_tars)
    #############################################################################
    # postprocessing
    Array[String] sample_names = PP.read_counts_entity_ids
    scatter (sample_index in range(length(sample_names))) {
        call CNVTasks.PostprocessGermlineCNVCalls {
            input:
                entity_id = sample_names[sample_index],
                gcnv_calls_tars = call_tars_sample_by_shard[sample_index],
                gcnv_model_tars = GermlineCNVCallerCohortMode.gcnv_model_tar,
                calling_configs = GermlineCNVCallerCohortMode.calling_config_json,
                denoising_configs = GermlineCNVCallerCohortMode.denoising_config_json,
                gcnvkernel_version = GermlineCNVCallerCohortMode.gcnvkernel_version_json,
                sharded_interval_lists = GermlineCNVCallerCohortMode.sharded_interval_list,
                contig_ploidy_calls_tar = PP.contig_ploidy_calls_tar,
                allosomal_contigs = allosomal_contigs,
                ref_copy_number_autosomal_contigs = ref_copy_number_autosomal_contigs,
                sample_index = sample_index,
                gatk4_jar_override = gatk4_jar_override,
                gatk_docker = gatk_docker,
                preemptible_attempts = preemptible_attempts
        }

        call CNVTasks.CollectSampleQualityMetrics {
            input:
                genotyped_segments_vcf = PostprocessGermlineCNVCalls.genotyped_segments_vcf,
                entity_id = sample_names[sample_index],
                maximum_number_events = maximum_number_events_per_sample,
                gatk_docker = gatk_docker,
                preemptible_attempts = preemptible_attempts
        }
    }

    call CNVTasks.CollectModelQualityMetrics {
        input:
            gcnv_model_tars = GermlineCNVCallerCohortMode.gcnv_model_tar,
            gatk_docker = gatk_docker,
            preemptible_attempts = preemptible_attempts
    }
    #############################################################################
    # save results
    String outdir = sub(gcs_out_root_dir, "/$", "") + "/~{workflow_name}"
    String run_specific_outdir = outdir + if (run_uuid == "") then "" else "/~{run_uuid}"

    ###########################################
    call FF.FinalizeToDir as FF_Model { input:
        files = GermlineCNVCallerCohortMode.gcnv_model_tar, outdir = run_specific_outdir + "/gCNV_model/"
    }
    call FF.FinalizeToDir as FF_Tracking { input:
        files = GermlineCNVCallerCohortMode.gcnv_tracking_tar, outdir = run_specific_outdir + "/gCNV_tracking/"
    }
    call FF.FinalizeToFile as FF_MQC_S { input:
        file = CollectModelQualityMetrics.qc_status_file, outdir = run_specific_outdir
    }
    call FF.FinalizeToDir as FF_SMQCf { input:
        files = CollectSampleQualityMetrics.qc_status_file, outdir = run_specific_outdir + "/Sample_QC_status/"
    }

    call FF.FinalizeToDir as FF_GTIvcf { input:
        files = PostprocessGermlineCNVCalls.genotyped_intervals_vcf, outdir = run_specific_outdir + "/GTed_intervals_vcfs/"
    }
    call FF.FinalizeToDir as FF_GTSvcf { input:
        files = PostprocessGermlineCNVCalls.genotyped_segments_vcf, outdir = run_specific_outdir + "/GTed_segments_vcfs/"
    }
    call FF.FinalizeToDir as FF_DCR { input:
        files = PostprocessGermlineCNVCalls.denoised_copy_ratios, outdir = run_specific_outdir + "/Denoised_copy_ratios/"
    }

    # call FF.FinalizeToDir as FF_matrix { input:
    #     files = flatten(GermlineCNVCallerCohortMode.gcnv_call_tars), outdir = run_specific_outdir + "/gCNV_calls/"
    # }
    Array[Int] dummy = range(length(GermlineCNVCallerCohortMode.gcnv_call_tars))
    scatter (dummy_pair in zip(dummy, GermlineCNVCallerCohortMode.gcnv_call_tars)) {
        Int dummy_index = dummy_pair.left
        call FF.FinalizeToDir as FF_matrix_row { input:
            files = dummy_pair.right, outdir = run_specific_outdir + "/gCNV_calls/shard-~{dummy_index}"
        }
    }

    output {

        Array[String] read_counts_entity_ids = PP.read_counts_entity_ids

        Map[String, String] gcnv_output_summary = {
            "preprocessed_intervals": PP.preprocessed_intervals,
            "read_counts": run_specific_outdir + "/ReadCounts/", # PP.read_counts -- this is an array of files, would lead to type coersion error if used directly
            "annotated_intervals": select_first([PP.annotated_intervals, "None"]),
            "filtered_intervals": PP.filtered_intervals,
            "contig_ploidy_model_tar": PP.contig_ploidy_model_tar,
            "contig_ploidy_calls_tar": PP.contig_ploidy_calls_tar,

            "gcnv_model_tars": FF_Model.gcs_dir,
            "gcnv_tracking_tars": FF_Tracking.gcs_dir,
            "genotyped_intervals_vcfs": FF_GTIvcf.gcs_dir,
            "genotyped_segments_vcfs": FF_GTSvcf.gcs_dir,
            "sample_qc_status_files": FF_SMQCf.gcs_dir,
            # "sample_qc_status_strings": "", # commented out because we don't know how to handle this Array of non-file-path strings
            "model_qc_status_file": FF_MQC_S.gcs_path,
            "model_qc_string":CollectModelQualityMetrics.qc_status_string,
            "denoised_copy_ratios":FF_DCR.gcs_dir,
        }

        Array[Array[String]] gcnv_calls_tars = FF_matrix_row.final_paths
        Array[String] gcnv_sample_qc_status_strings = CollectSampleQualityMetrics.qc_status_string
        # Array[String] gcnv_model_tars = FF_Model.final_paths
        # Array[String] gcnv_tracking_tars = FF_Tracking.final_paths
        # Array[String] genotyped_intervals_vcfs = FF_GTIvcf.final_paths
        # Array[String] genotyped_segments_vcfs = FF_GTSvcf.final_paths
        # Array[String] sample_qc_status_files = FF_SMQCf.final_paths
        # File model_qc_status_file = FF_MQC_S.gcs_path
        # String model_qc_string = CollectModelQualityMetrics.qc_status_string

        # Array[String] denoised_copy_ratios = FF_DCR.final_paths
    }
}

task GermlineCNVCallerCohortMode {
    input {
      Int scatter_index
      String cohort_entity_id
      Array[File] read_count_files
      File contig_ploidy_calls_tar
      File intervals
      File? annotated_intervals
      String? output_dir
      File? gatk4_jar_override

      # Runtime parameters
      String gatk_docker
      Int? mem_gb
      Int? disk_space_gb
      Boolean use_ssd = false
      Int? cpu
      Int? preemptible_attempts

      # Caller parameters
      Float? p_alt
      Float? p_active
      Float? cnv_coherence_length
      Float? class_coherence_length
      Int? max_copy_number

      # Denoising model parameters
      Int? max_bias_factors
      Float? mapping_error_rate
      Float? interval_psi_scale
      Float? sample_psi_scale
      Float? depth_correction_tau
      Float? log_mean_bias_standard_deviation
      Float? init_ard_rel_unexplained_variance
      Int? num_gc_bins
      Float? gc_curve_standard_deviation
      String? copy_number_posterior_expectation_mode
      Boolean? enable_bias_factors
      Int? active_class_padding_hybrid_mode

      # Hybrid ADVI parameters
      Float? learning_rate
      Float? adamax_beta_1
      Float? adamax_beta_2
      Int? log_emission_samples_per_round
      Float? log_emission_sampling_median_rel_error
      Int? log_emission_sampling_rounds
      Int? max_advi_iter_first_epoch
      Int? max_advi_iter_subsequent_epochs
      Int? min_training_epochs
      Int? max_training_epochs
      Float? initial_temperature
      Int? num_thermal_advi_iters
      Int? convergence_snr_averaging_window
      Float? convergence_snr_trigger_threshold
      Int? convergence_snr_countdown_window
      Int? max_calling_iters
      Float? caller_update_convergence_threshold
      Float? caller_internal_admixing_rate
      Float? caller_external_admixing_rate
      Boolean? disable_annealing
    }

    Int machine_mem_mb = select_first([mem_gb, 7]) * 1000
    Int command_mem_mb = machine_mem_mb - 500

    # If optional output_dir not specified, use "out"
    String output_dir_ = select_first([output_dir, "out"])
    Int num_samples = length(read_count_files)

    String dollar = "$" #WDL workaround, see https://github.com/broadinstitute/cromwell/issues/1819

    command <<<
        set -eu
        export GATK_LOCAL_JAR=~{default="/root/gatk.jar" gatk4_jar_override}
        export MKL_NUM_THREADS=~{default=8 cpu}
        export OMP_NUM_THREADS=~{default=8 cpu}

        mkdir contig-ploidy-calls
        tar xzf ~{contig_ploidy_calls_tar} -C contig-ploidy-calls

        gatk --java-options "-Xmx~{command_mem_mb}m"  GermlineCNVCaller \
            --run-mode COHORT \
            -L ~{intervals} \
            --input ~{sep=" --input " read_count_files} \
            --contig-ploidy-calls contig-ploidy-calls \
            ~{"--annotated-intervals " + annotated_intervals} \
            --interval-merging-rule OVERLAPPING_ONLY \
            --output ~{output_dir_} \
            --output-prefix ~{cohort_entity_id} \
            --verbosity DEBUG \
            --p-alt ~{default="1e-6" p_alt} \
            --p-active ~{default="1e-2" p_active} \
            --cnv-coherence-length ~{default="10000.0" cnv_coherence_length} \
            --class-coherence-length ~{default="10000.0" class_coherence_length} \
            --max-copy-number ~{default="5" max_copy_number} \
            --max-bias-factors ~{default="5" max_bias_factors} \
            --mapping-error-rate ~{default="0.01" mapping_error_rate} \
            --interval-psi-scale ~{default="0.001" interval_psi_scale} \
            --sample-psi-scale ~{default="0.0001" sample_psi_scale} \
            --depth-correction-tau ~{default="10000.0" depth_correction_tau} \
            --log-mean-bias-standard-deviation ~{default="0.1" log_mean_bias_standard_deviation} \
            --init-ard-rel-unexplained-variance ~{default="0.1" init_ard_rel_unexplained_variance} \
            --num-gc-bins ~{default="20" num_gc_bins} \
            --gc-curve-standard-deviation ~{default="1.0" gc_curve_standard_deviation} \
            --copy-number-posterior-expectation-mode ~{default="HYBRID" copy_number_posterior_expectation_mode} \
            --enable-bias-factors ~{default="true" enable_bias_factors} \
            --active-class-padding-hybrid-mode ~{default="50000" active_class_padding_hybrid_mode} \
            --learning-rate ~{default="0.05" learning_rate} \
            --adamax-beta-1 ~{default="0.9" adamax_beta_1} \
            --adamax-beta-2 ~{default="0.99" adamax_beta_2} \
            --log-emission-samples-per-round ~{default="50" log_emission_samples_per_round} \
            --log-emission-sampling-median-rel-error ~{default="0.005" log_emission_sampling_median_rel_error} \
            --log-emission-sampling-rounds ~{default="10" log_emission_sampling_rounds} \
            --max-advi-iter-first-epoch ~{default="5000" max_advi_iter_first_epoch} \
            --max-advi-iter-subsequent-epochs ~{default="100" max_advi_iter_subsequent_epochs} \
            --min-training-epochs ~{default="10" min_training_epochs} \
            --max-training-epochs ~{default="100" max_training_epochs} \
            --initial-temperature ~{default="2.0" initial_temperature} \
            --num-thermal-advi-iters ~{default="2500" num_thermal_advi_iters} \
            --convergence-snr-averaging-window ~{default="500" convergence_snr_averaging_window} \
            --convergence-snr-trigger-threshold ~{default="0.1" convergence_snr_trigger_threshold} \
            --convergence-snr-countdown-window ~{default="10" convergence_snr_countdown_window} \
            --max-calling-iters ~{default="10" max_calling_iters} \
            --caller-update-convergence-threshold ~{default="0.001" caller_update_convergence_threshold} \
            --caller-internal-admixing-rate ~{default="0.75" caller_internal_admixing_rate} \
            --caller-external-admixing-rate ~{default="1.00" caller_external_admixing_rate} \
            --disable-annealing ~{default="false" disable_annealing}

        tar czf ~{cohort_entity_id}-gcnv-model-shard-~{scatter_index}.tar.gz -C ~{output_dir_}/~{cohort_entity_id}-model .
        tar czf ~{cohort_entity_id}-gcnv-tracking-shard-~{scatter_index}.tar.gz -C ~{output_dir_}/~{cohort_entity_id}-tracking .

        CURRENT_SAMPLE=0
        NUM_SAMPLES=~{num_samples}
        NUM_DIGITS=${#NUM_SAMPLES}
        while [ $CURRENT_SAMPLE -lt $NUM_SAMPLES ]; do
            CURRENT_SAMPLE_WITH_LEADING_ZEROS=$(printf "%0${NUM_DIGITS}d" $CURRENT_SAMPLE)
            tar czf ~{cohort_entity_id}-gcnv-calls-shard-~{scatter_index}-sample-$CURRENT_SAMPLE_WITH_LEADING_ZEROS.tar.gz -C ~{output_dir_}/~{cohort_entity_id}-calls/SAMPLE_$CURRENT_SAMPLE .
            let CURRENT_SAMPLE=CURRENT_SAMPLE+1
        done

        rm -rf contig-ploidy-calls
    >>>

    runtime {
        docker: gatk_docker
        memory: machine_mem_mb + " MB"
        disks: "local-disk " + select_first([disk_space_gb, 150]) + if use_ssd then " SSD" else " HDD"
        cpu: select_first([cpu, 8])
        preemptible: select_first([preemptible_attempts, 2])
    }

    output {
        File gcnv_model_tar = "~{cohort_entity_id}-gcnv-model-shard-~{scatter_index}.tar.gz"
        Array[File] gcnv_call_tars = glob("~{cohort_entity_id}-gcnv-calls-shard-~{scatter_index}-sample-*.tar.gz")
        File gcnv_tracking_tar = "~{cohort_entity_id}-gcnv-tracking-shard-~{scatter_index}.tar.gz"
        File calling_config_json = "~{output_dir_}/~{cohort_entity_id}-calls/calling_config.json"
        File denoising_config_json = "~{output_dir_}/~{cohort_entity_id}-calls/denoising_config.json"
        File gcnvkernel_version_json = "~{output_dir_}/~{cohort_entity_id}-calls/gcnvkernel_version.json"
        File sharded_interval_list = "~{output_dir_}/~{cohort_entity_id}-calls/interval_list.tsv"
    }
}
