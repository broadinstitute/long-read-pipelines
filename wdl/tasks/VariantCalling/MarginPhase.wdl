version 1.0

import "../../structs/Structs.wdl"

task MarginPhase {

    meta {
        description: "Generates phased VCF. Note this runs fast so no need to parallize."
    }

    parameter_meta {
        # inputs
        data_type: "Must be one of [ONT, PacBio]"
        bam: {localization_optional: true}

        # outputs
        phaseset_bed: "a BED file describing the phasesets and the reason why phasing was broken with respect to the previous phaseset"
        chunk_csv: "a CSV describing the boundaries of each chunk"
        # suboptimal_haplotagged_bam: "a BAM file with all reads tagged (HP) as 1, 2, or 0. Note it is named suboptimal because we recommend using the parameters tuned for phasing variants, coupled with the following sentense from the github repo: 'The haplotag parameters are tuned to produce more phased reads and more accurate local read phasing, and were tuned using variants generated by PEPPER.' "
    }

    input {
        File bam
        File bai

        String data_type

        File unphased_vcf
        File unphased_tbi

        File ref_fasta
        File ref_fasta_fai

        Int memory = 200
        String zones = "us-central1-a us-central1-b us-central1-c us-central1-f"

        RuntimeAttr? runtime_attr_override
    }

    Int bam_sz = ceil(size(bam, "GB"))
	Int disk_size = if bam_sz > 200 then 2*bam_sz else bam_sz + 200

    String prefix = basename(unphased_vcf, ".vcf.gz")
    String output_root = "/cromwell_root/margin_output"

    # name of pre-made parameter set json file. See margin github page for appropriate values.
    String parameter_json_file_name = if data_type == 'ONT' then "allParams.phase_vcf.ont.json" else "allParams.phase_vcf.pb-hifi.json"

    String base = basename(bam)
    String local_bam = "/cromwell_root/~{base}"
    String local_bai = "~{local_bam}.bai"

    command <<<
        set -euxo pipefail

        time gcloud storage cp ~{bam} ~{local_bam}
        mv ~{bai} ~{local_bai}

        num_core=$(cat /proc/cpuinfo | awk '/^processor/{print $3}' | wc -l)

        mkdir -p "~{output_root}" "~{output_root}/logs"
        touch ~{bai}

        # note the -M option was suggested by an author of margin
        # it's unclear which phasedBAM one should use: this, or the one generated from the Pepper step
        margin phase \
            ~{local_bam} \
            ~{ref_fasta} \
            ~{unphased_vcf} \
            "/opt/margin_dir/params/phase/~{parameter_json_file_name}" \
            -t "${num_core}" \
            -M \
            -o "~{output_root}/~{prefix}" \
            2>&1 | tee "~{output_root}/logs/5_margin_phase_vcf.log"

        ls "~{output_root}/"
        cd "~{output_root}/" && \
        bgzip -c "~{prefix}".phased.vcf > "~{prefix}".phased.vcf.gz && \
        tabix -p vcf "~{prefix}".phased.vcf.gz
        ls

        mv "~{prefix}".phased.vcf.gz      "~{prefix}".margin-phased.vcf.gz
        mv "~{prefix}".phased.vcf.gz.tbi  "~{prefix}".margin-phased.vcf.gz.tbi
        mv "~{prefix}".chunks.csv         "~{prefix}".margin-phased.chunks.csv
        mv "~{prefix}".phaseset.bed       "~{prefix}".margin-phased.phaseset.bed
    >>>

    output {
        File phased_vcf   = "~{output_root}/~{prefix}.margin-phased.vcf.gz"
        File phased_tbi   = "~{output_root}/~{prefix}.margin-phased.vcf.gz.tbi"

        File chunk_csv    = "~{output_root}/~{prefix}.margin-phased.chunks.csv"
        File phaseset_bed = "~{output_root}/~{prefix}.margin-phased.phaseset.bed"

        # File suboptimal_haplotagged_bam = "~{output_root}/~{prefix}.margin-phase-haplotagged.bam"
    }

    #########################
    RuntimeAttr default_attr = object {
        cpu_cores:          64,
        mem_gb:             memory,
        disk_gb:            disk_size,
        boot_disk_gb:       100,
        preemptible_tries:  2,
        max_retries:        1,
        docker:             "us.gcr.io/broad-dsp-lrma/lr-margin:2.2.dev-69f6fff"
    }
    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])
    runtime {
        cpu:                    select_first([runtime_attr.cpu_cores,         default_attr.cpu_cores])
        memory:                 select_first([runtime_attr.mem_gb,            default_attr.mem_gb]) + " GiB"
        disks: "local-disk " +  select_first([runtime_attr.disk_gb,           default_attr.disk_gb]) + " SSD"
        zones: zones
        bootDiskSizeGb:         select_first([runtime_attr.boot_disk_gb,      default_attr.boot_disk_gb])
        preemptible:            select_first([runtime_attr.preemptible_tries, default_attr.preemptible_tries])
        maxRetries:             select_first([runtime_attr.max_retries,       default_attr.max_retries])
        docker:                 select_first([runtime_attr.docker,            default_attr.docker])
    }
}
